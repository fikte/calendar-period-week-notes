'use strict';

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */

/**
 * Represents the BINARY value type, which contains extra methods for encoding and decoding.
 *
 * @memberof ICAL
 */
class Binary {
  /**
   * Creates a binary value from the given string.
   *
   * @param {String} aString        The binary value string
   * @return {Binary}               The binary value instance
   */
  static fromString(aString) {
    return new Binary(aString);
  }

  /**
   * Creates a new ICAL.Binary instance
   *
   * @param {String} aValue     The binary data for this value
   */
  constructor(aValue) {
    this.value = aValue;
  }

  /**
   * The type name, to be used in the jCal object.
   * @default "binary"
   * @constant
   */
  icaltype = "binary";

  /**
   * Base64 decode the current value
   *
   * @return {String}         The base64-decoded value
   */
  decodeValue() {
    return this._b64_decode(this.value);
  }

  /**
   * Encodes the passed parameter with base64 and sets the internal
   * value to the result.
   *
   * @param {String} aValue      The raw binary value to encode
   */
  setEncodedValue(aValue) {
    this.value = this._b64_encode(aValue);
  }

  _b64_encode(data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Tyler Akins (http://rumkin.com)
    // +   improved by: Bayron Guevara
    // +   improved by: Thunder.m
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Pellentesque Malesuada
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Rafa≈Ç Kukawski (http://kukawski.pl)
    // *     example 1: base64_encode('Kevin van Zonneveld');
    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
    // mozilla has this native
    // - but breaks in 2.0.0.12!
    //if (typeof this.window['atob'] == 'function') {
    //    return atob(data);
    //}
    let b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
              "abcdefghijklmnopqrstuvwxyz0123456789+/=";
    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
      ac = 0,
      enc = "",
      tmp_arr = [];

    if (!data) {
      return data;
    }

    do { // pack three octets into four hexets
      o1 = data.charCodeAt(i++);
      o2 = data.charCodeAt(i++);
      o3 = data.charCodeAt(i++);

      bits = o1 << 16 | o2 << 8 | o3;

      h1 = bits >> 18 & 0x3f;
      h2 = bits >> 12 & 0x3f;
      h3 = bits >> 6 & 0x3f;
      h4 = bits & 0x3f;

      // use hexets to index into b64, and append result to encoded string
      tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);

    enc = tmp_arr.join('');

    let r = data.length % 3;

    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);

  }

  _b64_decode(data) {
    // http://kevin.vanzonneveld.net
    // +   original by: Tyler Akins (http://rumkin.com)
    // +   improved by: Thunder.m
    // +      input by: Aman Gupta
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   bugfixed by: Onno Marsman
    // +   bugfixed by: Pellentesque Malesuada
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
    // *     returns 1: 'Kevin van Zonneveld'
    // mozilla has this native
    // - but breaks in 2.0.0.12!
    //if (typeof this.window['btoa'] == 'function') {
    //    return btoa(data);
    //}
    let b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
              "abcdefghijklmnopqrstuvwxyz0123456789+/=";
    let o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
      ac = 0,
      dec = "",
      tmp_arr = [];

    if (!data) {
      return data;
    }

    data += '';

    do { // unpack four hexets into three octets using index points in b64
      h1 = b64.indexOf(data.charAt(i++));
      h2 = b64.indexOf(data.charAt(i++));
      h3 = b64.indexOf(data.charAt(i++));
      h4 = b64.indexOf(data.charAt(i++));

      bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

      o1 = bits >> 16 & 0xff;
      o2 = bits >> 8 & 0xff;
      o3 = bits & 0xff;

      if (h3 == 64) {
        tmp_arr[ac++] = String.fromCharCode(o1);
      } else if (h4 == 64) {
        tmp_arr[ac++] = String.fromCharCode(o1, o2);
      } else {
        tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
      }
    } while (i < data.length);

    dec = tmp_arr.join('');

    return dec;
  }

  /**
   * The string representation of this value
   * @return {String}
   */
  toString() {
    return this.value;
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


const DURATION_LETTERS = /([PDWHMTS]{1,1})/;
const DATA_PROPS_TO_COPY = ["weeks", "days", "hours", "minutes", "seconds", "isNegative"];

/**
 * This class represents the "duration" value type, with various calculation
 * and manipulation methods.
 *
 * @memberof ICAL
 */
class Duration {
  /**
   * Returns a new ICAL.Duration instance from the passed seconds value.
   *
   * @param {Number} aSeconds       The seconds to create the instance from
   * @return {Duration}             The newly created duration instance
   */
  static fromSeconds(aSeconds) {
    return (new Duration()).fromSeconds(aSeconds);
  }

  /**
   * Checks if the given string is an iCalendar duration value.
   *
   * @param {String} value      The raw ical value
   * @return {Boolean}          True, if the given value is of the
   *                              duration ical type
   */
  static isValueString(string) {
    return (string[0] === 'P' || string[1] === 'P');
  }

  /**
   * Creates a new {@link ICAL.Duration} instance from the passed string.
   *
   * @param {String} aStr       The string to parse
   * @return {Duration}         The created duration instance
   */
  static fromString(aStr) {
    let pos = 0;
    let dict = Object.create(null);
    let chunks = 0;

    while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {
      let type = aStr[pos];
      let numeric = aStr.slice(0, Math.max(0, pos));
      aStr = aStr.slice(pos + 1);

      chunks += parseDurationChunk(type, numeric, dict);
    }

    if (chunks < 2) {
      // There must be at least a chunk with "P" and some unit chunk
      throw new Error(
        'invalid duration value: Not enough duration components in "' + aStr + '"'
      );
    }

    return new Duration(dict);
  }

  /**
   * Creates a new ICAL.Duration instance from the given data object.
   *
   * @param {Object} aData                An object with members of the duration
   * @param {Number=} aData.weeks         Duration in weeks
   * @param {Number=} aData.days          Duration in days
   * @param {Number=} aData.hours         Duration in hours
   * @param {Number=} aData.minutes       Duration in minutes
   * @param {Number=} aData.seconds       Duration in seconds
   * @param {Boolean=} aData.isNegative   If true, the duration is negative
   * @return {Duration}                   The createad duration instance
   */
  static fromData(aData) {
    return new Duration(aData);
  }

  /**
   * Creates a new ICAL.Duration instance.
   *
   * @param {Object} data                 An object with members of the duration
   * @param {Number=} data.weeks          Duration in weeks
   * @param {Number=} data.days           Duration in days
   * @param {Number=} data.hours          Duration in hours
   * @param {Number=} data.minutes        Duration in minutes
   * @param {Number=} data.seconds        Duration in seconds
   * @param {Boolean=} data.isNegative    If true, the duration is negative
   */
  constructor(data) {
    this.wrappedJSObject = this;
    this.fromData(data);
  }

  /**
   * The weeks in this duration
   * @type {Number}
   * @default 0
   */
  weeks = 0;

  /**
   * The days in this duration
   * @type {Number}
   * @default 0
   */
  days = 0;

  /**
   * The days in this duration
   * @type {Number}
   * @default 0
   */
  hours = 0;

  /**
   * The minutes in this duration
   * @type {Number}
   * @default 0
   */
  minutes = 0;

  /**
   * The seconds in this duration
   * @type {Number}
   * @default 0
   */
  seconds = 0;

  /**
   * The seconds in this duration
   * @type {Boolean}
   * @default false
   */
  isNegative = false;

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "icalduration"
   */
  icalclass = "icalduration";

  /**
   * The type name, to be used in the jCal object.
   * @constant
   * @type {String}
   * @default "duration"
   */
  icaltype = "duration";

  /**
   * Returns a clone of the duration object.
   *
   * @return {Duration}      The cloned object
   */
  clone() {
    return Duration.fromData(this);
  }

  /**
   * The duration value expressed as a number of seconds.
   *
   * @return {Number}             The duration value in seconds
   */
  toSeconds() {
    let seconds = this.seconds + 60 * this.minutes + 3600 * this.hours +
                  86400 * this.days + 7 * 86400 * this.weeks;
    return (this.isNegative ? -seconds : seconds);
  }

  /**
   * Reads the passed seconds value into this duration object. Afterwards,
   * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up
   * accordingly.
   *
   * @param {Number} aSeconds     The duration value in seconds
   * @return {Duration}           Returns this instance
   */
  fromSeconds(aSeconds) {
    let secs = Math.abs(aSeconds);

    this.isNegative = (aSeconds < 0);
    this.days = trunc(secs / 86400);

    // If we have a flat number of weeks, use them.
    if (this.days % 7 == 0) {
      this.weeks = this.days / 7;
      this.days = 0;
    } else {
      this.weeks = 0;
    }

    secs -= (this.days + 7 * this.weeks) * 86400;

    this.hours = trunc(secs / 3600);
    secs -= this.hours * 3600;

    this.minutes = trunc(secs / 60);
    secs -= this.minutes * 60;

    this.seconds = secs;
    return this;
  }

  /**
   * Sets up the current instance using members from the passed data object.
   *
   * @param {Object} aData                An object with members of the duration
   * @param {Number=} aData.weeks         Duration in weeks
   * @param {Number=} aData.days          Duration in days
   * @param {Number=} aData.hours         Duration in hours
   * @param {Number=} aData.minutes       Duration in minutes
   * @param {Number=} aData.seconds       Duration in seconds
   * @param {Boolean=} aData.isNegative   If true, the duration is negative
   */
  fromData(aData) {
    for (let prop of DATA_PROPS_TO_COPY) {
      if (aData && prop in aData) {
        this[prop] = aData[prop];
      } else {
        this[prop] = 0;
      }
    }
  }

  /**
   * Resets the duration instance to the default values, i.e. PT0S
   */
  reset() {
    this.isNegative = false;
    this.weeks = 0;
    this.days = 0;
    this.hours = 0;
    this.minutes = 0;
    this.seconds = 0;
  }

  /**
   * Compares the duration instance with another one.
   *
   * @param {Duration} aOther             The instance to compare with
   * @return {Number}                     -1, 0 or 1 for less/equal/greater
   */
  compare(aOther) {
    let thisSeconds = this.toSeconds();
    let otherSeconds = aOther.toSeconds();
    return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);
  }

  /**
   * Normalizes the duration instance. For example, a duration with a value
   * of 61 seconds will be normalized to 1 minute and 1 second.
   */
  normalize() {
    this.fromSeconds(this.toSeconds());
  }

  /**
   * The string representation of this duration.
   * @return {String}
   */
  toString() {
    if (this.toSeconds() == 0) {
      return "PT0S";
    } else {
      let str = "";
      if (this.isNegative) str += "-";
      str += "P";
      let hasWeeks = false;
      if (this.weeks) {
        if (this.days || this.hours || this.minutes || this.seconds) {
          str += (this.weeks * 7 + this.days) + "D";
        } else {
          str += (this.weeks + "W");
          hasWeeks = true;
        }
      } else if (this.days) {
        str += (this.days + "D");
      }

      if (!hasWeeks) {
        if (this.hours || this.minutes || this.seconds) {
          str += "T";
          if (this.hours) {
            str += this.hours + "H";
          }

          if (this.minutes) {
            str += this.minutes + "M";
          }

          if (this.seconds) {
            str += this.seconds + "S";
          }
        }
      }

      return str;
    }
  }

  /**
   * The iCalendar string representation of this duration.
   * @return {String}
   */
  toICALString() {
    return this.toString();
  }
}

/**
 * Internal helper function to handle a chunk of a duration.
 *
 * @private
 * @param {String} letter type of duration chunk
 * @param {String} number numeric value or -/+
 * @param {Object} dict target to assign values to
 */
function parseDurationChunk(letter, number, object) {
  let type;
  switch (letter) {
    case 'P':
      if (number && number === '-') {
        object.isNegative = true;
      } else {
        object.isNegative = false;
      }
      // period
      break;
    case 'D':
      type = 'days';
      break;
    case 'W':
      type = 'weeks';
      break;
    case 'H':
      type = 'hours';
      break;
    case 'M':
      type = 'minutes';
      break;
    case 'S':
      type = 'seconds';
      break;
    default:
      // Not a valid chunk
      return 0;
  }

  if (type) {
    if (!number && number !== 0) {
      throw new Error(
        'invalid duration value: Missing number before "' + letter + '"'
      );
    }
    let num = parseInt(number, 10);
    if (isStrictlyNaN(num)) {
      throw new Error(
        'invalid duration value: Invalid number "' + number + '" before "' + letter + '"'
      );
    }
    object[type] = num;
  }

  return 1;
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 * @ignore
 * @typedef {import("./types.js").jCalComponent} jCalComponent
 * Imports the 'occurrenceDetails' type from the "types.js" module
 */

/**
 * This class represents the "period" value type, with various calculation and manipulation methods.
 *
 * @memberof ICAL
 */
class Period {
  /**
   * Creates a new {@link ICAL.Period} instance from the passed string.
   *
   * @param {String} str            The string to parse
   * @param {Property} prop         The property this period will be on
   * @return {Period}               The created period instance
   */
  static fromString(str, prop) {
    let parts = str.split('/');

    if (parts.length !== 2) {
      throw new Error(
        'Invalid string value: "' + str + '" must contain a "/" char.'
      );
    }

    let options = {
      start: Time.fromDateTimeString(parts[0], prop)
    };

    let end = parts[1];

    if (Duration.isValueString(end)) {
      options.duration = Duration.fromString(end);
    } else {
      options.end = Time.fromDateTimeString(end, prop);
    }

    return new Period(options);
  }

  /**
   * Creates a new {@link ICAL.Period} instance from the given data object.
   * The passed data object cannot contain both and end date and a duration.
   *
   * @param {Object} aData                  An object with members of the period
   * @param {Time=} aData.start             The start of the period
   * @param {Time=} aData.end               The end of the period
   * @param {Duration=} aData.duration      The duration of the period
   * @return {Period}                       The period instance
   */
  static fromData(aData) {
    return new Period(aData);
  }

  /**
   * Returns a new period instance from the given jCal data array. The first
   * member is always the start date string, the second member is either a
   * duration or end date string.
   *
   * @param {jCalComponent} aData           The jCal data array
   * @param {Property} aProp                The property this jCal data is on
   * @param {Boolean} aLenient              If true, data value can be both date and date-time
   * @return {Period}                       The period instance
   */
  static fromJSON(aData, aProp, aLenient) {
    function fromDateOrDateTimeString(aValue, dateProp) {
      if (aLenient) {
        return Time.fromString(aValue, dateProp);
      } else {
        return Time.fromDateTimeString(aValue, dateProp);
      }
    }

    if (Duration.isValueString(aData[1])) {
      return Period.fromData({
        start: fromDateOrDateTimeString(aData[0], aProp),
        duration: Duration.fromString(aData[1])
      });
    } else {
      return Period.fromData({
        start: fromDateOrDateTimeString(aData[0], aProp),
        end: fromDateOrDateTimeString(aData[1], aProp)
      });
    }
  }

  /**
   * Creates a new ICAL.Period instance. The passed data object cannot contain both and end date and
   * a duration.
   *
   * @param {Object} aData                  An object with members of the period
   * @param {Time=} aData.start             The start of the period
   * @param {Time=} aData.end               The end of the period
   * @param {Duration=} aData.duration      The duration of the period
   */
  constructor(aData) {
    this.wrappedJSObject = this;

    if (aData && 'start' in aData) {
      if (aData.start && !(aData.start instanceof Time)) {
        throw new TypeError('.start must be an instance of ICAL.Time');
      }
      this.start = aData.start;
    }

    if (aData && aData.end && aData.duration) {
      throw new Error('cannot accept both end and duration');
    }

    if (aData && 'end' in aData) {
      if (aData.end && !(aData.end instanceof Time)) {
        throw new TypeError('.end must be an instance of ICAL.Time');
      }
      this.end = aData.end;
    }

    if (aData && 'duration' in aData) {
      if (aData.duration && !(aData.duration instanceof Duration)) {
        throw new TypeError('.duration must be an instance of ICAL.Duration');
      }
      this.duration = aData.duration;
    }
  }


  /**
   * The start of the period
   * @type {Time}
   */
  start = null;

  /**
   * The end of the period
   * @type {Time}
   */
  end = null;

  /**
   * The duration of the period
   * @type {Duration}
   */
  duration = null;

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "icalperiod"
   */
  icalclass = "icalperiod";

  /**
   * The type name, to be used in the jCal object.
   * @constant
   * @type {String}
   * @default "period"
   */
  icaltype = "period";

  /**
   * Returns a clone of the duration object.
   *
   * @return {Period}      The cloned object
   */
  clone() {
    return Period.fromData({
      start: this.start ? this.start.clone() : null,
      end: this.end ? this.end.clone() : null,
      duration: this.duration ? this.duration.clone() : null
    });
  }

  /**
   * Calculates the duration of the period, either directly or by subtracting
   * start from end date.
   *
   * @return {Duration}      The calculated duration
   */
  getDuration() {
    if (this.duration) {
      return this.duration;
    } else {
      return this.end.subtractDate(this.start);
    }
  }

  /**
   * Calculates the end date of the period, either directly or by adding
   * duration to start date.
   *
   * @return {Time}          The calculated end date
   */
  getEnd() {
    if (this.end) {
      return this.end;
    } else {
      let end = this.start.clone();
      end.addDuration(this.duration);
      return end;
    }
  }

  /**
   * Compare this period with a date or other period. To maintain the logic where a.compare(b)
   * returns 1 when a > b, this function will return 1 when the period is after the date, 0 when the
   * date is within the period, and -1 when the period is before the date. When comparing two
   * periods, as soon as they overlap in any way this will return 0.
   *
   * @param {Time|Period} dt    The date or other period to compare with
   */
  compare(dt) {
    if (dt.compare(this.start) < 0) {
      return 1;
    } else if (dt.compare(this.getEnd()) > 0) {
      return -1;
    } else {
      return 0;
    }
  }

  /**
   * The string representation of this period.
   * @return {String}
   */
  toString() {
    return this.start + "/" + (this.end || this.duration);
  }

  /**
   * The jCal representation of this period type.
   * @return {Object}
   */
  toJSON() {
    return [this.start.toString(), (this.end || this.duration).toString()];
  }

  /**
   * The iCalendar string representation of this period.
   * @return {String}
   */
  toICALString() {
    return this.start.toICALString() + "/" +
           (this.end || this.duration).toICALString();
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 *
 * @ignore
 * @typedef {import("./types.js").weekDay} weekDay
 * Imports the 'weekDay' type from the "types.js" module
 *
 * @ignore
 * @typedef {import("./types.js").timeInit} timeInit
 * Imports the 'timeInit' type from the "types.js" module
 */

/**
 * @classdesc
 * iCalendar Time representation (similar to JS Date object).  Fully
 * independent of system (OS) timezone / time.  Unlike JS Date, the month
 * January is 1, not zero.
 *
 * @example
 * var time = new ICAL.Time({
 *   year: 2012,
 *   month: 10,
 *   day: 11
 *   minute: 0,
 *   second: 0,
 *   isDate: false
 * });
 *
 *
 * @memberof ICAL
*/
class Time {
  static _dowCache = {};
  static _wnCache = {};

  /**
   * Returns the days in the given month
   *
   * @param {Number} month      The month to check
   * @param {Number} year       The year to check
   * @return {Number}           The number of days in the month
   */
  static daysInMonth(month, year) {
    let _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    let days = 30;

    if (month < 1 || month > 12) return days;

    days = _daysInMonth[month];

    if (month == 2) {
      days += Time.isLeapYear(year);
    }

    return days;
  }

  /**
   * Checks if the year is a leap year
   *
   * @param {Number} year       The year to check
   * @return {Boolean}          True, if the year is a leap year
   */
  static isLeapYear(year) {
    if (year <= 1752) {
      return ((year % 4) == 0);
    } else {
      return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));
    }
  }

  /**
   * Create a new ICAL.Time from the day of year and year. The date is returned
   * in floating timezone.
   *
   * @param {Number} aDayOfYear     The day of year
   * @param {Number} aYear          The year to create the instance in
   * @return {Time}                 The created instance with the calculated date
   */
  static fromDayOfYear(aDayOfYear, aYear) {
    let year = aYear;
    let doy = aDayOfYear;
    let tt = new Time();
    tt.auto_normalize = false;
    let is_leap = (Time.isLeapYear(year) ? 1 : 0);

    if (doy < 1) {
      year--;
      is_leap = (Time.isLeapYear(year) ? 1 : 0);
      doy += Time.daysInYearPassedMonth[is_leap][12];
      return Time.fromDayOfYear(doy, year);
    } else if (doy > Time.daysInYearPassedMonth[is_leap][12]) {
      is_leap = (Time.isLeapYear(year) ? 1 : 0);
      doy -= Time.daysInYearPassedMonth[is_leap][12];
      year++;
      return Time.fromDayOfYear(doy, year);
    }

    tt.year = year;
    tt.isDate = true;

    for (let month = 11; month >= 0; month--) {
      if (doy > Time.daysInYearPassedMonth[is_leap][month]) {
        tt.month = month + 1;
        tt.day = doy - Time.daysInYearPassedMonth[is_leap][month];
        break;
      }
    }

    tt.auto_normalize = true;
    return tt;
  }

  /**
   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
   *
   * @deprecated                Use {@link ICAL.Time.fromDateString} instead
   * @param {String} str        The string to create from
   * @return {Time}             The date/time instance
   */
  static fromStringv2(str) {
    return new Time({
      year: parseInt(str.slice(0, 4), 10),
      month: parseInt(str.slice(5, 7), 10),
      day: parseInt(str.slice(8, 10), 10),
      isDate: true
    });
  }

  /**
   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
   *
   * @param {String} aValue     The string to create from
   * @return {Time}             The date/time instance
   */
  static fromDateString(aValue) {
    // Dates should have no timezone.
    // Google likes to sometimes specify Z on dates
    // we specifically ignore that to avoid issues.

    // YYYY-MM-DD
    // 2012-10-10
    return new Time({
      year: strictParseInt(aValue.slice(0, 4)),
      month: strictParseInt(aValue.slice(5, 7)),
      day: strictParseInt(aValue.slice(8, 10)),
      isDate: true
    });
  }

  /**
   * Returns a new ICAL.Time instance from a date-time string, e.g
   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up
   * from the property's TZID parameter.
   *
   * @param {String} aValue         The string to create from
   * @param {Property=} prop        The property the date belongs to
   * @return {Time}                 The date/time instance
   */
  static fromDateTimeString(aValue, prop) {
    if (aValue.length < 19) {
      throw new Error(
        'invalid date-time value: "' + aValue + '"'
      );
    }

    let zone;
    let zoneId;

    if (aValue.slice(-1) === 'Z') {
      zone = Timezone.utcTimezone;
    } else if (prop) {
      zoneId = prop.getParameter('tzid');

      if (prop.parent) {
        if (prop.parent.name === 'standard' || prop.parent.name === 'daylight') {
          // Per RFC 5545 3.8.2.4 and 3.8.2.2, start/end date-times within
          // these components MUST be specified in local time.
          zone = Timezone.localTimezone;
        } else if (zoneId) {
          // If the desired time zone is defined within the component tree,
          // fetch its definition and prefer that.
          zone = prop.parent.getTimeZoneByID(zoneId);
        }
      }
    }

    const timeData = {
      year: strictParseInt(aValue.slice(0, 4)),
      month: strictParseInt(aValue.slice(5, 7)),
      day: strictParseInt(aValue.slice(8, 10)),
      hour: strictParseInt(aValue.slice(11, 13)),
      minute: strictParseInt(aValue.slice(14, 16)),
      second: strictParseInt(aValue.slice(17, 19)),
    };

    // Although RFC 5545 requires that all TZIDs used within a file have a
    // corresponding time zone definition, we may not be parsing the full file
    // or we may be dealing with a non-compliant file; in either case, we can
    // check our own time zone service for the TZID in a last-ditch effort.
    if (zoneId && !zone) {
      timeData.timezone = zoneId;
    }

    // 2012-10-10T10:10:10(Z)?
    return new Time(timeData, zone);
  }

  /**
   * Returns a new ICAL.Time instance from a date or date-time string,
   *
   * @param {String} aValue         The string to create from
   * @param {Property=} prop        The property the date belongs to
   * @return {Time}                 The date/time instance
   */
  static fromString(aValue, aProperty) {
    if (aValue.length > 10) {
      return Time.fromDateTimeString(aValue, aProperty);
    } else {
      return Time.fromDateString(aValue);
    }
  }

  /**
   * Creates a new ICAL.Time instance from the given Javascript Date.
   *
   * @param {?Date} aDate             The Javascript Date to read, or null to reset
   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used
   */
  static fromJSDate(aDate, useUTC) {
    let tt = new Time();
    return tt.fromJSDate(aDate, useUTC);
  }

  /**
   * Creates a new ICAL.Time instance from the the passed data object.
   *
   * @param {timeInit} aData          Time initialization
   * @param {Timezone=} aZone         Timezone this position occurs in
   */
  static fromData = function fromData(aData, aZone) {
    let t = new Time();
    return t.fromData(aData, aZone);
  };

  /**
   * Creates a new ICAL.Time instance from the current moment.
   * The instance is ‚Äúfloating‚Äù - has no timezone relation.
   * To create an instance considering the time zone, call
   * ICAL.Time.fromJSDate(new Date(), true)
   * @return {Time}
   */
  static now() {
    return Time.fromJSDate(new Date(), false);
  }

  /**
   * Returns the date on which ISO week number 1 starts.
   *
   * @see Time#weekNumber
   * @param {Number} aYear                  The year to search in
   * @param {weekDay=} aWeekStart           The week start weekday, used for calculation.
   * @return {Time}                         The date on which week number 1 starts
   */
  static weekOneStarts(aYear, aWeekStart) {
    let t = Time.fromData({
      year: aYear,
      month: 1,
      day: 1,
      isDate: true
    });

    let dow = t.dayOfWeek();
    let wkst = aWeekStart || Time.DEFAULT_WEEK_START;
    if (dow > Time.THURSDAY) {
      t.day += 7;
    }
    if (wkst > Time.THURSDAY) {
      t.day -= 7;
    }

    t.day -= dow - wkst;

    return t;
  }

  /**
   * Get the dominical letter for the given year. Letters range from A - G for
   * common years, and AG to GF for leap years.
   *
   * @param {Number} yr           The year to retrieve the letter for
   * @return {String}             The dominical letter.
   */
  static getDominicalLetter(yr) {
    let LTRS = "GFEDCBA";
    let dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;
    let isLeap = Time.isLeapYear(yr);
    if (isLeap) {
      return LTRS[(dom + 6) % 7] + LTRS[dom];
    } else {
      return LTRS[dom];
    }
  }

  static #epochTime = null;
  /**
   * January 1st, 1970 as an ICAL.Time.
   * @type {Time}
   * @constant
   * @instance
   */
  static get epochTime() {
    if (!this.#epochTime) {
      this.#epochTime = Time.fromData({
        year: 1970,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        isDate: false,
        timezone: "Z"
      });
    }
    return this.#epochTime;
  }

  static _cmp_attr(a, b, attr) {
    if (a[attr] > b[attr]) return 1;
    if (a[attr] < b[attr]) return -1;
    return 0;
  }

  /**
   * The days that have passed in the year after a given month. The array has
   * two members, one being an array of passed days for non-leap years, the
   * other analog for leap years.
   * @example
   * var isLeapYear = ICAL.Time.isLeapYear(year);
   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];
   * @type {Array.<Array.<Number>>}
   */
  static daysInYearPassedMonth = [
    [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],
    [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]
  ];

  static SUNDAY = 1;
  static MONDAY = 2;
  static TUESDAY = 3;
  static WEDNESDAY = 4;
  static THURSDAY = 5;
  static FRIDAY = 6;
  static SATURDAY = 7;

  /**
   * The default weekday for the WKST part.
   * @constant
   * @default ICAL.Time.MONDAY
   */
  static DEFAULT_WEEK_START = 2; // MONDAY

  /**
   * Creates a new ICAL.Time instance.
   *
   * @param {timeInit} data           Time initialization
   * @param {Timezone} zone           timezone this position occurs in
   */
  constructor(data, zone) {
    this.wrappedJSObject = this;

    /**
     * @type {timeInit}
     * @private
     */
    this._time = Object.create(null);

    /* time defaults */
    this._time.year = 0;
    this._time.month = 1;
    this._time.day = 1;
    this._time.hour = 0;
    this._time.minute = 0;
    this._time.second = 0;
    this._time.isDate = false;

    this.fromData(data, zone);
  }

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "icaltime"
   */
  icalclass = "icaltime";
  _cachedUnixTime = null;

  /**
   * The type name, to be used in the jCal object. This value may change and
   * is strictly defined by the {@link ICAL.Time#isDate isDate} member.
   * @type {String}
   * @default "date-time"
   */
  get icaltype() {
    return this.isDate ? 'date' : 'date-time';
  }

  /**
   * The timezone for this time.
   * @type {Timezone}
   */
  zone = null;

  /**
   * Internal uses to indicate that a change has been made and the next read
   * operation must attempt to normalize the value (for example changing the
   * day to 33).
   *
   * @type {Boolean}
   * @private
   */
  _pendingNormalization = false;

  /**
   * The year of this date.
   * @type {Number}
   */
  get year() {
    return this._getTimeAttr('year');
  }

  set year(val) {
    this._setTimeAttr('year', val);
  }

  /**
   * The month of this date.
   * @type {Number}
   */
  get month() {
    return this._getTimeAttr('month');
  }

  set month(val) {
    this._setTimeAttr('month', val);
  }

  /**
   * The day of this date.
   * @type {Number}
   */
  get day() {
    return this._getTimeAttr('day');
  }

  set day(val) {
    this._setTimeAttr('day', val);
  }

  /**
   * The hour of this date-time.
   * @type {Number}
   */
  get hour() {
    return this._getTimeAttr('hour');
  }

  set hour(val) {
    this._setTimeAttr('hour', val);
  }

  /**
   * The minute of this date-time.
   * @type {Number}
   */
  get minute() {
    return this._getTimeAttr('minute');
  }

  set minute(val) {
    this._setTimeAttr('minute', val);
  }

  /**
   * The second of this date-time.
   * @type {Number}
   */
  get second() {
    return this._getTimeAttr('second');
  }

  set second(val) {
    this._setTimeAttr('second', val);
  }

  /**
   * If true, the instance represents a date (as opposed to a date-time)
   * @type {Boolean}
   */
  get isDate() {
    return this._getTimeAttr('isDate');
  }

  set isDate(val) {
    this._setTimeAttr('isDate', val);
  }

  /**
   * @private
   * @param {String} attr             Attribute to get (one of: year, month,
   *                                  day, hour, minute, second, isDate)
   * @return {Number|Boolean}         Current value for the attribute
   */
  _getTimeAttr(attr) {
    if (this._pendingNormalization) {
      this._normalize();
      this._pendingNormalization = false;
    }

    return this._time[attr];
  }

  /**
   * @private
   * @param {String} attr             Attribute to set (one of: year, month,
   *                                  day, hour, minute, second, isDate)
   * @param {Number|Boolean} val      New value for the attribute
   */
  _setTimeAttr(attr, val) {
    // Check if isDate will be set and if was not set to normalize date.
    // This avoids losing days when seconds, minutes and hours are zeroed
    // what normalize will do when time is a date.
    if (attr === "isDate" && val && !this._time.isDate) {
      this.adjust(0, 0, 0, 0);
    }
    this._cachedUnixTime = null;
    this._pendingNormalization = true;
    this._time[attr] = val;
  }

  /**
   * Returns a clone of the time object.
   *
   * @return {Time}              The cloned object
   */
  clone() {
    return new Time(this._time, this.zone);
  }

  /**
   * Reset the time instance to epoch time
   */
  reset() {
    this.fromData(Time.epochTime);
    this.zone = Timezone.utcTimezone;
  }

  /**
   * Reset the time instance to the given date/time values.
   *
   * @param {Number} year             The year to set
   * @param {Number} month            The month to set
   * @param {Number} day              The day to set
   * @param {Number} hour             The hour to set
   * @param {Number} minute           The minute to set
   * @param {Number} second           The second to set
   * @param {Timezone} timezone       The timezone to set
   */
  resetTo(year, month, day, hour, minute, second, timezone) {
    this.fromData({
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      second: second,
      zone: timezone
    });
  }

  /**
   * Set up the current instance from the Javascript date value.
   *
   * @param {?Date} aDate             The Javascript Date to read, or null to reset
   * @param {Boolean} [useUTC=false]  If true, the UTC values of the date will be used
   */
  fromJSDate(aDate, useUTC) {
    if (!aDate) {
      this.reset();
    } else {
      if (useUTC) {
        this.zone = Timezone.utcTimezone;
        this.year = aDate.getUTCFullYear();
        this.month = aDate.getUTCMonth() + 1;
        this.day = aDate.getUTCDate();
        this.hour = aDate.getUTCHours();
        this.minute = aDate.getUTCMinutes();
        this.second = aDate.getUTCSeconds();
      } else {
        this.zone = Timezone.localTimezone;
        this.year = aDate.getFullYear();
        this.month = aDate.getMonth() + 1;
        this.day = aDate.getDate();
        this.hour = aDate.getHours();
        this.minute = aDate.getMinutes();
        this.second = aDate.getSeconds();
      }
    }
    this._cachedUnixTime = null;
    return this;
  }

  /**
   * Sets up the current instance using members from the passed data object.
   *
   * @param {timeInit} aData          Time initialization
   * @param {Timezone=} aZone         Timezone this position occurs in
   */
  fromData(aData, aZone) {
    if (aData) {
      for (let [key, value] of Object.entries(aData)) {
          // ical type cannot be set
          if (key === 'icaltype') continue;
        this[key] = value;
      }
    }

    if (aZone) {
      this.zone = aZone;
    }

    if (aData && !("isDate" in aData)) {
      this.isDate = !("hour" in aData);
    } else if (aData && ("isDate" in aData)) {
      this.isDate = aData.isDate;
    }

    if (aData && "timezone" in aData) {
      let zone = TimezoneService.get(
        aData.timezone
      );

      this.zone = zone || Timezone.localTimezone;
    }

    if (aData && "zone" in aData) {
      this.zone = aData.zone;
    }

    if (!this.zone) {
      this.zone = Timezone.localTimezone;
    }

    this._cachedUnixTime = null;
    return this;
  }

  /**
   * Calculate the day of week.
   * @param {weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {weekDay}
   */
  dayOfWeek(aWeekStart) {
    let firstDow = aWeekStart || Time.SUNDAY;
    let dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;
    if (dowCacheKey in Time._dowCache) {
      return Time._dowCache[dowCacheKey];
    }

    // Using Zeller's algorithm
    let q = this.day;
    let m = this.month + (this.month < 3 ? 12 : 0);
    let Y = this.year - (this.month < 3 ? 1 : 0);

    let h = (q + Y + trunc(((m + 1) * 26) / 10) + trunc(Y / 4));
    { // eslint-disable-line no-constant-condition
      h += trunc(Y / 100) * 6 + trunc(Y / 400);
    }

    // Normalize to 1 = wkst
    h = ((h + 7 - firstDow) % 7) + 1;
    Time._dowCache[dowCacheKey] = h;
    return h;
  }

  /**
   * Calculate the day of year.
   * @return {Number}
   */
  dayOfYear() {
    let is_leap = (Time.isLeapYear(this.year) ? 1 : 0);
    let diypm = Time.daysInYearPassedMonth;
    return diypm[is_leap][this.month - 1] + this.day;
  }

  /**
   * Returns a copy of the current date/time, rewound to the start of the
   * week. The resulting ICAL.Time instance is of icaltype date, even if this
   * is a date-time.
   *
   * @param {weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {Time}      The start of the week (cloned)
   */
  startOfWeek(aWeekStart) {
    let firstDow = aWeekStart || Time.SUNDAY;
    let result = this.clone();
    result.day -= ((this.dayOfWeek() + 7 - firstDow) % 7);
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * Returns a copy of the current date/time, shifted to the end of the week.
   * The resulting ICAL.Time instance is of icaltype date, even if this is a
   * date-time.
   *
   * @param {weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {Time}      The end of the week (cloned)
   */
  endOfWeek(aWeekStart) {
    let firstDow = aWeekStart || Time.SUNDAY;
    let result = this.clone();
    result.day += (7 - this.dayOfWeek() + firstDow - Time.SUNDAY) % 7;
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * Returns a copy of the current date/time, rewound to the start of the
   * month. The resulting ICAL.Time instance is of icaltype date, even if
   * this is a date-time.
   *
   * @return {Time}      The start of the month (cloned)
   */
  startOfMonth() {
    let result = this.clone();
    result.day = 1;
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * Returns a copy of the current date/time, shifted to the end of the
   * month.  The resulting ICAL.Time instance is of icaltype date, even if
   * this is a date-time.
   *
   * @return {Time}      The end of the month (cloned)
   */
  endOfMonth() {
    let result = this.clone();
    result.day = Time.daysInMonth(result.month, result.year);
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * Returns a copy of the current date/time, rewound to the start of the
   * year. The resulting ICAL.Time instance is of icaltype date, even if
   * this is a date-time.
   *
   * @return {Time}      The start of the year (cloned)
   */
  startOfYear() {
    let result = this.clone();
    result.day = 1;
    result.month = 1;
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * Returns a copy of the current date/time, shifted to the end of the
   * year.  The resulting ICAL.Time instance is of icaltype date, even if
   * this is a date-time.
   *
   * @return {Time}      The end of the year (cloned)
   */
  endOfYear() {
    let result = this.clone();
    result.day = 31;
    result.month = 12;
    result.isDate = true;
    result.hour = 0;
    result.minute = 0;
    result.second = 0;
    return result;
  }

  /**
   * First calculates the start of the week, then returns the day of year for
   * this date. If the day falls into the previous year, the day is zero or negative.
   *
   * @param {weekDay=} aFirstDayOfWeek
   *        The week start weekday, defaults to SUNDAY
   * @return {Number}     The calculated day of year
   */
  startDoyWeek(aFirstDayOfWeek) {
    let firstDow = aFirstDayOfWeek || Time.SUNDAY;
    let delta = this.dayOfWeek() - firstDow;
    if (delta < 0) delta += 7;
    return this.dayOfYear() - delta;
  }

  /**
   * Get the dominical letter for the current year. Letters range from A - G
   * for common years, and AG to GF for leap years.
   *
   * @param {Number} yr           The year to retrieve the letter for
   * @return {String}             The dominical letter.
   */
  getDominicalLetter() {
    return Time.getDominicalLetter(this.year);
  }

  /**
   * Finds the nthWeekDay relative to the current month (not day).  The
   * returned value is a day relative the month that this month belongs to so
   * 1 would indicate the first of the month and 40 would indicate a day in
   * the following month.
   *
   * @param {Number} aDayOfWeek   Day of the week see the day name constants
   * @param {Number} aPos         Nth occurrence of a given week day values
   *        of 1 and 0 both indicate the first weekday of that type. aPos may
   *        be either positive or negative
   *
   * @return {Number} numeric value indicating a day relative
   *                   to the current month of this time object
   */
  nthWeekDay(aDayOfWeek, aPos) {
    let daysInMonth = Time.daysInMonth(this.month, this.year);
    let weekday;
    let pos = aPos;

    let start = 0;

    let otherDay = this.clone();

    if (pos >= 0) {
      otherDay.day = 1;

      // because 0 means no position has been given
      // 1 and 0 indicate the same day.
      if (pos != 0) {
        // remove the extra numeric value
        pos--;
      }

      // set current start offset to current day.
      start = otherDay.day;

      // find the current day of week
      let startDow = otherDay.dayOfWeek();

      // calculate the difference between current
      // day of the week and desired day of the week
      let offset = aDayOfWeek - startDow;


      // if the offset goes into the past
      // week we add 7 so it goes into the next
      // week. We only want to go forward in time here.
      if (offset < 0)
        // this is really important otherwise we would
        // end up with dates from in the past.
        offset += 7;

      // add offset to start so start is the same
      // day of the week as the desired day of week.
      start += offset;

      // because we are going to add (and multiply)
      // the numeric value of the day we subtract it
      // from the start position so not to add it twice.
      start -= aDayOfWeek;

      // set week day
      weekday = aDayOfWeek;
    } else {

      // then we set it to the last day in the current month
      otherDay.day = daysInMonth;

      // find the ends weekday
      let endDow = otherDay.dayOfWeek();

      pos++;

      weekday = (endDow - aDayOfWeek);

      if (weekday < 0) {
        weekday += 7;
      }

      weekday = daysInMonth - weekday;
    }

    weekday += pos * 7;

    return start + weekday;
  }

  /**
   * Checks if current time is the nth weekday, relative to the current
   * month.  Will always return false when rule resolves outside of current
   * month.
   *
   * @param {weekDay} aDayOfWeek                 Day of week to check
   * @param {Number} aPos                        Relative position
   * @return {Boolean}                           True, if it is the nth weekday
   */
  isNthWeekDay(aDayOfWeek, aPos) {
    let dow = this.dayOfWeek();

    if (aPos === 0 && dow === aDayOfWeek) {
      return true;
    }

    // get pos
    let day = this.nthWeekDay(aDayOfWeek, aPos);

    if (day === this.day) {
      return true;
    }

    return false;
  }

  /**
   * Calculates the ISO 8601 week number. The first week of a year is the
   * week that contains the first Thursday. The year can have 53 weeks, if
   * January 1st is a Friday.
   *
   * Note there are regions where the first week of the year is the one that
   * starts on January 1st, which may offset the week number. Also, if a
   * different week start is specified, this will also affect the week
   * number.
   *
   * @see Time.weekOneStarts
   * @param {weekDay} aWeekStart                  The weekday the week starts with
   * @return {Number}                             The ISO week number
   */
  weekNumber(aWeekStart) {
    let wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;
    if (wnCacheKey in Time._wnCache) {
      return Time._wnCache[wnCacheKey];
    }
    // This function courtesty of Julian Bucknall, published under the MIT license
    // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html
    // plus some fixes to be able to use different week starts.
    let week1;

    let dt = this.clone();
    dt.isDate = true;
    let isoyear = this.year;

    if (dt.month == 12 && dt.day > 25) {
      week1 = Time.weekOneStarts(isoyear + 1, aWeekStart);
      if (dt.compare(week1) < 0) {
        week1 = Time.weekOneStarts(isoyear, aWeekStart);
      } else {
        isoyear++;
      }
    } else {
      week1 = Time.weekOneStarts(isoyear, aWeekStart);
      if (dt.compare(week1) < 0) {
        week1 = Time.weekOneStarts(--isoyear, aWeekStart);
      }
    }

    let daysBetween = (dt.subtractDate(week1).toSeconds() / 86400);
    let answer = trunc(daysBetween / 7) + 1;
    Time._wnCache[wnCacheKey] = answer;
    return answer;
  }

  /**
   * Adds the duration to the current time. The instance is modified in
   * place.
   *
   * @param {Duration} aDuration         The duration to add
   */
  addDuration(aDuration) {
    let mult = (aDuration.isNegative ? -1 : 1);

    // because of the duration optimizations it is much
    // more efficient to grab all the values up front
    // then set them directly (which will avoid a normalization call).
    // So we don't actually normalize until we need it.
    let second = this.second;
    let minute = this.minute;
    let hour = this.hour;
    let day = this.day;

    second += mult * aDuration.seconds;
    minute += mult * aDuration.minutes;
    hour += mult * aDuration.hours;
    day += mult * aDuration.days;
    day += mult * 7 * aDuration.weeks;

    this.second = second;
    this.minute = minute;
    this.hour = hour;
    this.day = day;

    this._cachedUnixTime = null;
  }

  /**
   * Subtract the date details (_excluding_ timezone).  Useful for finding
   * the relative difference between two time objects excluding their
   * timezone differences.
   *
   * @param {Time} aDate     The date to subtract
   * @return {Duration}      The difference as a duration
   */
  subtractDate(aDate) {
    let unixTime = this.toUnixTime() + this.utcOffset();
    let other = aDate.toUnixTime() + aDate.utcOffset();
    return Duration.fromSeconds(unixTime - other);
  }

  /**
   * Subtract the date details, taking timezones into account.
   *
   * @param {Time} aDate  The date to subtract
   * @return {Duration}   The difference in duration
   */
  subtractDateTz(aDate) {
    let unixTime = this.toUnixTime();
    let other = aDate.toUnixTime();
    return Duration.fromSeconds(unixTime - other);
  }

  /**
   * Compares the ICAL.Time instance with another one, or a period.
   *
   * @param {Time|Period} aOther                  The instance to compare with
   * @return {Number}                             -1, 0 or 1 for less/equal/greater
   */
  compare(other) {
    if (other instanceof Period) {
      return -1 * other.compare(this);
    } else {
      let a = this.toUnixTime();
      let b = other.toUnixTime();

      if (a > b) return 1;
      if (b > a) return -1;
      return 0;
    }
  }

  /**
   * Compares only the date part of this instance with another one.
   *
   * @param {Time} other                  The instance to compare with
   * @param {Timezone} tz                 The timezone to compare in
   * @return {Number}                     -1, 0 or 1 for less/equal/greater
   */
  compareDateOnlyTz(other, tz) {
    let a = this.convertToZone(tz);
    let b = other.convertToZone(tz);
    let rc = 0;

    if ((rc = Time._cmp_attr(a, b, "year")) != 0) return rc;
    if ((rc = Time._cmp_attr(a, b, "month")) != 0) return rc;
    if ((rc = Time._cmp_attr(a, b, "day")) != 0) return rc;

    return rc;
  }

  /**
   * Convert the instance into another timezone. The returned ICAL.Time
   * instance is always a copy.
   *
   * @param {Timezone} zone      The zone to convert to
   * @return {Time}              The copy, converted to the zone
   */
  convertToZone(zone) {
    let copy = this.clone();
    let zone_equals = (this.zone.tzid == zone.tzid);

    if (!this.isDate && !zone_equals) {
      Timezone.convert_time(copy, this.zone, zone);
    }

    copy.zone = zone;
    return copy;
  }

  /**
   * Calculates the UTC offset of the current date/time in the timezone it is
   * in.
   *
   * @return {Number}     UTC offset in seconds
   */
  utcOffset() {
    if (this.zone == Timezone.localTimezone ||
        this.zone == Timezone.utcTimezone) {
      return 0;
    } else {
      return this.zone.utcOffset(this);
    }
  }

  /**
   * Returns an RFC 5545 compliant ical representation of this object.
   *
   * @return {String} ical date/date-time
   */
  toICALString() {
    let string = this.toString();

    if (string.length > 10) {
      return design.icalendar.value['date-time'].toICAL(string);
    } else {
      return design.icalendar.value.date.toICAL(string);
    }
  }

  /**
   * The string representation of this date/time, in jCal form
   * (including : and - separators).
   * @return {String}
   */
  toString() {
    let result = this.year + '-' +
                 pad2(this.month) + '-' +
                 pad2(this.day);

    if (!this.isDate) {
        result += 'T' + pad2(this.hour) + ':' +
                  pad2(this.minute) + ':' +
                  pad2(this.second);

      if (this.zone === Timezone.utcTimezone) {
        result += 'Z';
      }
    }

    return result;
  }

  /**
   * Converts the current instance to a Javascript date
   * @return {Date}
   */
  toJSDate() {
    if (this.zone == Timezone.localTimezone) {
      if (this.isDate) {
        return new Date(this.year, this.month - 1, this.day);
      } else {
        return new Date(this.year, this.month - 1, this.day,
                        this.hour, this.minute, this.second, 0);
      }
    } else {
      return new Date(this.toUnixTime() * 1000);
    }
  }

  _normalize() {
    if (this._time.isDate) {
      this._time.hour = 0;
      this._time.minute = 0;
      this._time.second = 0;
    }
    this.adjust(0, 0, 0, 0);

    return this;
  }

  /**
   * Adjust the date/time by the given offset
   *
   * @param {Number} aExtraDays       The extra amount of days
   * @param {Number} aExtraHours      The extra amount of hours
   * @param {Number} aExtraMinutes    The extra amount of minutes
   * @param {Number} aExtraSeconds    The extra amount of seconds
   * @param {Number=} aTime           The time to adjust, defaults to the
   *                                    current instance.
   */
  adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {

    let minutesOverflow, hoursOverflow,
        daysOverflow = 0, yearsOverflow = 0;

    let second, minute, hour, day;
    let daysInMonth;

    let time = aTime || this._time;

    if (!time.isDate) {
      second = time.second + aExtraSeconds;
      time.second = second % 60;
      minutesOverflow = trunc(second / 60);
      if (time.second < 0) {
        time.second += 60;
        minutesOverflow--;
      }

      minute = time.minute + aExtraMinutes + minutesOverflow;
      time.minute = minute % 60;
      hoursOverflow = trunc(minute / 60);
      if (time.minute < 0) {
        time.minute += 60;
        hoursOverflow--;
      }

      hour = time.hour + aExtraHours + hoursOverflow;

      time.hour = hour % 24;
      daysOverflow = trunc(hour / 24);
      if (time.hour < 0) {
        time.hour += 24;
        daysOverflow--;
      }
    }


    // Adjust month and year first, because we need to know what month the day
    // is in before adjusting it.
    if (time.month > 12) {
      yearsOverflow = trunc((time.month - 1) / 12);
    } else if (time.month < 1) {
      yearsOverflow = trunc(time.month / 12) - 1;
    }

    time.year += yearsOverflow;
    time.month -= 12 * yearsOverflow;

    // Now take care of the days (and adjust month if needed)
    day = time.day + aExtraDays + daysOverflow;

    if (day > 0) {
      for (;;) {
        daysInMonth = Time.daysInMonth(time.month, time.year);
        if (day <= daysInMonth) {
          break;
        }

        time.month++;
        if (time.month > 12) {
          time.year++;
          time.month = 1;
        }

        day -= daysInMonth;
      }
    } else {
      while (day <= 0) {
        if (time.month == 1) {
          time.year--;
          time.month = 12;
        } else {
          time.month--;
        }

        day += Time.daysInMonth(time.month, time.year);
      }
    }

    time.day = day;

    this._cachedUnixTime = null;
    return this;
  }

  /**
   * Sets up the current instance from unix time, the number of seconds since
   * January 1st, 1970.
   *
   * @param {Number} seconds      The seconds to set up with
   */
  fromUnixTime(seconds) {
    this.zone = Timezone.utcTimezone;
    // We could use `fromJSDate` here, but this is about twice as fast.
    // We could also clone `epochTime` and use `adjust` for a more
    // ical.js-centric approach, but this is about 100 times as fast.
    let date = new Date(seconds * 1000);
    this.year = date.getUTCFullYear();
    this.month = date.getUTCMonth() + 1;
    this.day = date.getUTCDate();
    if (this._time.isDate) {
      this.hour = 0;
      this.minute = 0;
      this.second = 0;
    } else {
      this.hour = date.getUTCHours();
      this.minute = date.getUTCMinutes();
      this.second = date.getUTCSeconds();
    }

    this._cachedUnixTime = null;
  }

  /**
   * Converts the current instance to seconds since January 1st 1970.
   *
   * @return {Number}         Seconds since 1970
   */
  toUnixTime() {
    if (this._cachedUnixTime !== null) {
      return this._cachedUnixTime;
    }
    let offset = this.utcOffset();

    // we use the offset trick to ensure
    // that we are getting the actual UTC time
    let ms = Date.UTC(
      this.year,
      this.month - 1,
      this.day,
      this.hour,
      this.minute,
      this.second - offset
    );

    // seconds
    this._cachedUnixTime = ms / 1000;
    return this._cachedUnixTime;
  }

  /**
   * Converts time to into Object which can be serialized then re-created
   * using the constructor.
   *
   * @example
   * // toJSON will automatically be called
   * var json = JSON.stringify(mytime);
   *
   * var deserialized = JSON.parse(json);
   *
   * var time = new ICAL.Time(deserialized);
   *
   * @return {Object}
   */
  toJSON() {
    let copy = [
      'year',
      'month',
      'day',
      'hour',
      'minute',
      'second',
      'isDate'
    ];

    let result = Object.create(null);

    let i = 0;
    let len = copy.length;
    let prop;

    for (; i < len; i++) {
      prop = copy[i];
      result[prop] = this[prop];
    }

    if (this.zone) {
      result.timezone = this.zone.tzid;
    }

    return result;
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 *
 * @ignore
 * @typedef {import("./types.js").parserState} parserState
 * Imports the 'parserState' type from the "types.js" module
 * @typedef {import("./types.js").designSet} designSet
 * Imports the 'designSet' type from the "types.js" module
 */

const CHAR = /[^ \t]/;
const VALUE_DELIMITER = ':';
const PARAM_DELIMITER = ';';
const PARAM_NAME_DELIMITER = '=';
const DEFAULT_VALUE_TYPE$1 = 'unknown';
const DEFAULT_PARAM_TYPE = 'text';
const RFC6868_REPLACE_MAP$1 = { "^'": '"', "^n": "\n", "^^": "^" };

/**
 * Parses iCalendar or vCard data into a raw jCal object. Consult
 * documentation on the {@tutorial layers|layers of parsing} for more
 * details.
 *
 * @function ICAL.parse
 * @memberof ICAL
 * @variation function
 * @todo Fix the API to be more clear on the return type
 * @param {String} input      The string data to parse
 * @return {Object|Object[]}  A single jCal object, or an array thereof
 */
function parse(input) {
  let state = {};
  let root = state.component = [];

  state.stack = [root];

  parse._eachLine(input, function(err, line) {
    parse._handleContentLine(line, state);
  });


  // when there are still items on the stack
  // throw a fatal error, a component was not closed
  // correctly in that case.
  if (state.stack.length > 1) {
    throw new ParserError(
      'invalid ical body. component began but did not end'
    );
  }

  state = null;

  return (root.length == 1 ? root[0] : root);
}

/**
 * Parse an iCalendar property value into the jCal for a single property
 *
 * @function ICAL.parse.property
 * @param {String} str
 *   The iCalendar property string to parse
 * @param {designSet=} designSet
 *   The design data to use for this property
 * @return {Object}
 *   The jCal Object containing the property
 */
parse.property = function(str, designSet) {
  let state = {
    component: [[], []],
    designSet: designSet || design.defaultSet
  };
  parse._handleContentLine(str, state);
  return state.component[1][0];
};

/**
 * Convenience method to parse a component. You can use ICAL.parse() directly
 * instead.
 *
 * @function ICAL.parse.component
 * @see ICAL.parse(function)
 * @param {String} str    The iCalendar component string to parse
 * @return {Object}       The jCal Object containing the component
 */
parse.component = function(str) {
  return parse(str);
};


/**
 * An error that occurred during parsing.
 *
 * @param {String} message        The error message
 * @memberof ICAL.parse
 * @extends {Error}
 */
class ParserError extends Error {
  name = this.constructor.name;
}

// classes & constants
parse.ParserError = ParserError;


/**
 * Handles a single line of iCalendar/vCard, updating the state.
 *
 * @private
 * @function ICAL.parse._handleContentLine
 * @param {String} line          The content line to process
 * @param {parserState} state    The current state of the line parsing
 */
parse._handleContentLine = function(line, state) {
  // break up the parts of the line
  let valuePos = line.indexOf(VALUE_DELIMITER);
  let paramPos = line.indexOf(PARAM_DELIMITER);

  let lastParamIndex;
  let lastValuePos;

  // name of property or begin/end
  let name;
  let value;
  // params is only overridden if paramPos !== -1.
  // we can't do params = params || {} later on
  // because it sacrifices ops.
  let params = {};

  /**
   * Different property cases
   *
   *
   * 1. RRULE:FREQ=foo
   *    // FREQ= is not a param but the value
   *
   * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;
   *    // ROLE= is a param because : has not happened yet
   */
    // when the parameter delimiter is after the
    // value delimiter then it is not a parameter.

  if ((paramPos !== -1 && valuePos !== -1)) {
    // when the parameter delimiter is after the
    // value delimiter then it is not a parameter.
    if (paramPos > valuePos) {
      paramPos = -1;
    }
  }

  let parsedParams;
  if (paramPos !== -1) {
    name = line.slice(0, Math.max(0, paramPos)).toLowerCase();
    parsedParams = parse._parseParameters(line.slice(Math.max(0, paramPos)), 0, state.designSet);
    if (parsedParams[2] == -1) {
      throw new ParserError("Invalid parameters in '" + line + "'");
    }
    params = parsedParams[0];
    // Handle parameter values with multiple entries
    let parsedParamLength;
    if (typeof parsedParams[1] === 'string') {
      parsedParamLength = parsedParams[1].length;
    } else {
      parsedParamLength = parsedParams[1].reduce((accumulator, currentValue) => {
        return accumulator + currentValue.length;
      }, 0);
    }
    lastParamIndex = parsedParamLength + parsedParams[2] + paramPos;
    if ((lastValuePos =
      line.slice(Math.max(0, lastParamIndex)).indexOf(VALUE_DELIMITER)) !== -1) {
      value = line.slice(Math.max(0, lastParamIndex + lastValuePos + 1));
    } else {
      throw new ParserError("Missing parameter value in '" + line + "'");
    }
  } else if (valuePos !== -1) {
    // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)
    name = line.slice(0, Math.max(0, valuePos)).toLowerCase();
    value = line.slice(Math.max(0, valuePos + 1));

    if (name === 'begin') {
      let newComponent = [value.toLowerCase(), [], []];
      if (state.stack.length === 1) {
        state.component.push(newComponent);
      } else {
        state.component[2].push(newComponent);
      }
      state.stack.push(state.component);
      state.component = newComponent;
      if (!state.designSet) {
        state.designSet = design.getDesignSet(state.component[0]);
      }
      return;
    } else if (name === 'end') {
      state.component = state.stack.pop();
      return;
    }
    // If it is not begin/end, then this is a property with an empty value,
    // which should be considered valid.
  } else {
    /**
     * Invalid line.
     * The rational to throw an error is we will
     * never be certain that the rest of the file
     * is sane and it is unlikely that we can serialize
     * the result correctly either.
     */
    throw new ParserError(
      'invalid line (no token ";" or ":") "' + line + '"'
    );
  }

  let valueType;
  let multiValue = false;
  let structuredValue = false;
  let propertyDetails;
  let splitName;
  let ungroupedName;

  // fetch the ungrouped part of the name
  if (state.designSet.propertyGroups && name.indexOf('.') !== -1) {
    splitName = name.split('.');
    params.group = splitName[0];
    ungroupedName = splitName[1];
  } else {
    ungroupedName = name;
  }

  if (ungroupedName in state.designSet.property) {
    propertyDetails = state.designSet.property[ungroupedName];

    if ('multiValue' in propertyDetails) {
      multiValue = propertyDetails.multiValue;
    }

    if ('structuredValue' in propertyDetails) {
      structuredValue = propertyDetails.structuredValue;
    }

    if (value && 'detectType' in propertyDetails) {
      valueType = propertyDetails.detectType(value);
    }
  }

  // attempt to determine value
  if (!valueType) {
    if (!('value' in params)) {
      if (propertyDetails) {
        valueType = propertyDetails.defaultType;
      } else {
        valueType = DEFAULT_VALUE_TYPE$1;
      }
    } else {
      // possible to avoid this?
      valueType = params.value.toLowerCase();
    }
  }

  delete params.value;

  /**
   * Note on `var result` juggling:
   *
   * I observed that building the array in pieces has adverse
   * effects on performance, so where possible we inline the creation.
   * It is a little ugly but resulted in ~2000 additional ops/sec.
   */

  let result;
  if (multiValue && structuredValue) {
    value = parse._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);
    result = [ungroupedName, params, valueType, value];
  } else if (multiValue) {
    result = [ungroupedName, params, valueType];
    parse._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);
  } else if (structuredValue) {
    value = parse._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);
    result = [ungroupedName, params, valueType, value];
  } else {
    value = parse._parseValue(value, valueType, state.designSet, false);
    result = [ungroupedName, params, valueType, value];
  }
  // rfc6350 requires that in vCard 4.0 the first component is the VERSION
  // component with as value 4.0, note that 3.0 does not have this requirement.
  if (state.component[0] === 'vcard' && state.component[1].length === 0 &&
          !(name === 'version' && value === '4.0')) {
    state.designSet = design.getDesignSet("vcard3");
  }
  state.component[1].push(result);
};

/**
 * Parse a value from the raw value into the jCard/jCal value.
 *
 * @private
 * @function ICAL.parse._parseValue
 * @param {String} value          Original value
 * @param {String} type           Type of value
 * @param {Object} designSet      The design data to use for this value
 * @return {Object} varies on type
 */
parse._parseValue = function(value, type, designSet, structuredValue) {
  if (type in designSet.value && 'fromICAL' in designSet.value[type]) {
    return designSet.value[type].fromICAL(value, structuredValue);
  }
  return value;
};

/**
 * Parse parameters from a string to object.
 *
 * @function ICAL.parse._parseParameters
 * @private
 * @param {String} line               A single unfolded line
 * @param {Number} start              Position to start looking for properties
 * @param {Object} designSet          The design data to use for this property
 * @return {Array}                    Array containing key/valye pairs of parsed parameters, the
 *                                      parsed value, and the position of the last parameter found
 */
parse._parseParameters = function(line, start, designSet) {
  let lastParam = start;
  let pos = 0;
  let delim = PARAM_NAME_DELIMITER;
  let result = {};
  let name, lcname;
  let value, valuePos = -1;
  let type, multiValue, mvdelim;

  // find the next '=' sign
  // use lastParam and pos to find name
  // check if " is used if so get value from "->"
  // then increment pos to find next ;

  while ((pos !== false) &&
         (pos = line.indexOf(delim, pos + 1)) !== -1) {

    name = line.slice(lastParam + 1, pos);
    if (name.length == 0) {
      throw new ParserError("Empty parameter name in '" + line + "'");
    }
    lcname = name.toLowerCase();
    mvdelim = false;
    multiValue = false;

    if (lcname in designSet.param && designSet.param[lcname].valueType) {
      type = designSet.param[lcname].valueType;
    } else {
      type = DEFAULT_PARAM_TYPE;
    }

    if (lcname in designSet.param) {
      multiValue = designSet.param[lcname].multiValue;
      if (designSet.param[lcname].multiValueSeparateDQuote) {
        mvdelim = parse._rfc6868Escape('"' + multiValue + '"');
      }
    }

    let nextChar = line[pos + 1];
    if (nextChar === '"') {
      valuePos = pos + 2;
      pos = line.indexOf('"', valuePos);
      if (multiValue && pos != -1) {
          let extendedValue = true;
          while (extendedValue) {
            if (line[pos + 1] == multiValue && line[pos + 2] == '"') {
              pos = line.indexOf('"', pos + 3);
            } else {
              extendedValue = false;
            }
          }
        }
      if (pos === -1) {
        throw new ParserError(
          'invalid line (no matching double quote) "' + line + '"'
        );
      }
      value = line.slice(valuePos, pos);
      lastParam = line.indexOf(PARAM_DELIMITER, pos);
      let propValuePos = line.indexOf(VALUE_DELIMITER, pos);
      // if either no next parameter or delimeter in property value, let's stop here
      if (lastParam === -1 || (propValuePos !== -1 && lastParam > propValuePos)) {
        pos = false;
      }
    } else {
      valuePos = pos + 1;

      // move to next ";"
      let nextPos = line.indexOf(PARAM_DELIMITER, valuePos);
      let propValuePos = line.indexOf(VALUE_DELIMITER, valuePos);
      if (propValuePos !== -1 && nextPos > propValuePos) {
        // this is a delimiter in the property value, let's stop here
        nextPos = propValuePos;
        pos = false;
      } else if (nextPos === -1) {
        // no ";"
        if (propValuePos === -1) {
          nextPos = line.length;
        } else {
          nextPos = propValuePos;
        }
        pos = false;
      } else {
        lastParam = nextPos;
        pos = nextPos;
      }

      value = line.slice(valuePos, nextPos);
    }

    const length_before = value.length;
    value = parse._rfc6868Escape(value);
    valuePos += length_before - value.length;
    if (multiValue) {
      let delimiter = mvdelim || multiValue;
      value = parse._parseMultiValue(value, delimiter, type, [], null, designSet);
    } else {
      value = parse._parseValue(value, type, designSet);
    }

    if (multiValue && (lcname in result)) {
      if (Array.isArray(result[lcname])) {
        result[lcname].push(value);
      } else {
        result[lcname] = [
          result[lcname],
          value
        ];
      }
    } else {
      result[lcname] = value;
    }
  }
  return [result, value, valuePos];
};

/**
 * Internal helper for rfc6868. Exposing this on ICAL.parse so that
 * hackers can disable the rfc6868 parsing if the really need to.
 *
 * @function ICAL.parse._rfc6868Escape
 * @param {String} val        The value to escape
 * @return {String}           The escaped value
 */
parse._rfc6868Escape = function(val) {
  return val.replace(/\^['n^]/g, function(x) {
    return RFC6868_REPLACE_MAP$1[x];
  });
};

/**
 * Parse a multi value string. This function is used either for parsing
 * actual multi-value property's values, or for handling parameter values. It
 * can be used for both multi-value properties and structured value properties.
 *
 * @private
 * @function ICAL.parse._parseMultiValue
 * @param {String} buffer           The buffer containing the full value
 * @param {String} delim            The multi-value delimiter
 * @param {String} type             The value type to be parsed
 * @param {Array.<?>} result        The array to append results to, varies on value type
 * @param {String} innerMulti       The inner delimiter to split each value with
 * @param {designSet} designSet     The design data for this value
 * @return {?|Array.<?>}            Either an array of results, or the first result
 */
parse._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {
  let pos = 0;
  let lastPos = 0;
  let value;
  if (delim.length === 0) {
    return buffer;
  }

  // split each piece
  while ((pos = unescapedIndexOf(buffer, delim, lastPos)) !== -1) {
    value = buffer.slice(lastPos, pos);
    if (innerMulti) {
      value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
    } else {
      value = parse._parseValue(value, type, designSet, structuredValue);
    }
    result.push(value);
    lastPos = pos + delim.length;
  }

  // on the last piece take the rest of string
  value = buffer.slice(lastPos);
  if (innerMulti) {
    value = parse._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
  } else {
    value = parse._parseValue(value, type, designSet, structuredValue);
  }
  result.push(value);

  return result.length == 1 ? result[0] : result;
};

/**
 * Process a complete buffer of iCalendar/vCard data line by line, correctly
 * unfolding content. Each line will be processed with the given callback
 *
 * @private
 * @function ICAL.parse._eachLine
 * @param {String} buffer                         The buffer to process
 * @param {function(?String, String)} callback    The callback for each line
 */
parse._eachLine = function(buffer, callback) {
  let len = buffer.length;
  let lastPos = buffer.search(CHAR);
  let pos = lastPos;
  let line;
  let firstChar;

  let newlineOffset;

  do {
    pos = buffer.indexOf('\n', lastPos) + 1;

    if (pos > 1 && buffer[pos - 2] === '\r') {
      newlineOffset = 2;
    } else {
      newlineOffset = 1;
    }

    if (pos === 0) {
      pos = len;
      newlineOffset = 0;
    }

    firstChar = buffer[lastPos];

    if (firstChar === ' ' || firstChar === '\t') {
      // add to line
      line += buffer.slice(lastPos + 1, pos - newlineOffset);
    } else {
      if (line)
        callback(null, line);
      // push line
      line = buffer.slice(lastPos, pos - newlineOffset);
    }

    lastPos = pos;
  } while (pos !== len);

  // extra ending line
  line = line.trim();

  if (line.length)
    callback(null, line);
};

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


const OPTIONS = ["tzid", "location", "tznames", "latitude", "longitude"];

/**
 * Timezone representation.
 *
 * @example
 * var vcalendar;
 * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');
 * var tzid = timezoneComp.getFirstPropertyValue('tzid');
 *
 * var timezone = new ICAL.Timezone({
 *   component: timezoneComp,
 *   tzid
 * });
 *
 * @memberof ICAL
 */
class Timezone {
  static _compare_change_fn(a, b) {
    if (a.year < b.year) return -1;
    else if (a.year > b.year) return 1;

    if (a.month < b.month) return -1;
    else if (a.month > b.month) return 1;

    if (a.day < b.day) return -1;
    else if (a.day > b.day) return 1;

    if (a.hour < b.hour) return -1;
    else if (a.hour > b.hour) return 1;

    if (a.minute < b.minute) return -1;
    else if (a.minute > b.minute) return 1;

    if (a.second < b.second) return -1;
    else if (a.second > b.second) return 1;

    return 0;
  }

  /**
   * Convert the date/time from one zone to the next.
   *
   * @param {Time} tt                  The time to convert
   * @param {Timezone} from_zone       The source zone to convert from
   * @param {Timezone} to_zone         The target zone to convert to
   * @return {Time}                    The converted date/time object
   */
  static convert_time(tt, from_zone, to_zone) {
    if (tt.isDate ||
        from_zone.tzid == to_zone.tzid ||
        from_zone == Timezone.localTimezone ||
        to_zone == Timezone.localTimezone) {
      tt.zone = to_zone;
      return tt;
    }

    let utcOffset = from_zone.utcOffset(tt);
    tt.adjust(0, 0, 0, - utcOffset);

    utcOffset = to_zone.utcOffset(tt);
    tt.adjust(0, 0, 0, utcOffset);

    return null;
  }

  /**
   * Creates a new ICAL.Timezone instance from the passed data object.
   *
   * @param {Component|Object} aData options for class
   * @param {String|Component} aData.component
   *        If aData is a simple object, then this member can be set to either a
   *        string containing the component data, or an already parsed
   *        ICAL.Component
   * @param {String} aData.tzid      The timezone identifier
   * @param {String} aData.location  The timezone locationw
   * @param {String} aData.tznames   An alternative string representation of the
   *                                  timezone
   * @param {Number} aData.latitude  The latitude of the timezone
   * @param {Number} aData.longitude The longitude of the timezone
   */
  static fromData(aData) {
    let tt = new Timezone();
    return tt.fromData(aData);
  }

  /**
   * The instance describing the UTC timezone
   * @type {Timezone}
   * @constant
   * @instance
   */
  static #utcTimezone = null;
  static get utcTimezone() {
    if (!this.#utcTimezone) {
      this.#utcTimezone = Timezone.fromData({
        tzid: "UTC"
      });
    }
    return this.#utcTimezone;
  }

  /**
   * The instance describing the local timezone
   * @type {Timezone}
   * @constant
   * @instance
   */
  static #localTimezone = null;
  static get localTimezone() {
    if (!this.#localTimezone) {
      this.#localTimezone = Timezone.fromData({
        tzid: "floating"
      });
    }
    return this.#localTimezone;
  }

  /**
   * Adjust a timezone change object.
   * @private
   * @param {Object} change     The timezone change object
   * @param {Number} days       The extra amount of days
   * @param {Number} hours      The extra amount of hours
   * @param {Number} minutes    The extra amount of minutes
   * @param {Number} seconds    The extra amount of seconds
   */
  static adjust_change(change, days, hours, minutes, seconds) {
    return Time.prototype.adjust.call(
      change,
      days,
      hours,
      minutes,
      seconds,
      change
    );
  }

  static _minimumExpansionYear = -1;
  static EXTRA_COVERAGE = 5;

  /**
   * Creates a new ICAL.Timezone instance, by passing in a tzid and component.
   *
   * @param {Component|Object} data options for class
   * @param {String|Component} data.component
   *        If data is a simple object, then this member can be set to either a
   *        string containing the component data, or an already parsed
   *        ICAL.Component
   * @param {String} data.tzid      The timezone identifier
   * @param {String} data.location  The timezone locationw
   * @param {String} data.tznames   An alternative string representation of the
   *                                  timezone
   * @param {Number} data.latitude  The latitude of the timezone
   * @param {Number} data.longitude The longitude of the timezone
   */
  constructor(data) {
    this.wrappedJSObject = this;
    this.fromData(data);
  }


  /**
   * Timezone identifier
   * @type {String}
   */
  tzid = "";

  /**
   * Timezone location
   * @type {String}
   */
  location = "";

  /**
   * Alternative timezone name, for the string representation
   * @type {String}
   */
  tznames = "";

  /**
   * The primary latitude for the timezone.
   * @type {Number}
   */
  latitude = 0.0;

  /**
   * The primary longitude for the timezone.
   * @type {Number}
   */
  longitude = 0.0;

  /**
   * The vtimezone component for this timezone.
   * @type {Component}
   */
  component = null;

  /**
   * The year this timezone has been expanded to. All timezone transition
   * dates until this year are known and can be used for calculation
   *
   * @private
   * @type {Number}
   */
  expandedUntilYear = 0;

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "icaltimezone"
   */
  icalclass = "icaltimezone";

  /**
   * Sets up the current instance using members from the passed data object.
   *
   * @param {Component|Object} aData options for class
   * @param {String|Component} aData.component
   *        If aData is a simple object, then this member can be set to either a
   *        string containing the component data, or an already parsed
   *        ICAL.Component
   * @param {String} aData.tzid      The timezone identifier
   * @param {String} aData.location  The timezone locationw
   * @param {String} aData.tznames   An alternative string representation of the
   *                                  timezone
   * @param {Number} aData.latitude  The latitude of the timezone
   * @param {Number} aData.longitude The longitude of the timezone
   */
  fromData(aData) {
    this.expandedUntilYear = 0;
    this.changes = [];

    if (aData instanceof Component) {
      // Either a component is passed directly
      this.component = aData;
    } else {
      // Otherwise the component may be in the data object
      if (aData && "component" in aData) {
        if (typeof aData.component == "string") {
          // If a string was passed, parse it as a component
          let jCal = parse(aData.component);
          this.component = new Component(jCal);
        } else if (aData.component instanceof Component) {
          // If it was a component already, then just set it
          this.component = aData.component;
        } else {
          // Otherwise just null out the component
          this.component = null;
        }
      }

      // Copy remaining passed properties
      for (let prop of OPTIONS) {
        if (aData && prop in aData) {
          this[prop] = aData[prop];
        }
      }
    }

    // If we have a component but no TZID, attempt to get it from the
    // component's properties.
    if (this.component instanceof Component && !this.tzid) {
      this.tzid = this.component.getFirstPropertyValue('tzid');
    }

    return this;
  }

  /**
   * Finds the utcOffset the given time would occur in this timezone.
   *
   * @param {Time} tt         The time to check for
   * @return {Number}         utc offset in seconds
   */
  utcOffset(tt) {
    if (this == Timezone.utcTimezone || this == Timezone.localTimezone) {
      return 0;
    }

    this._ensureCoverage(tt.year);

    if (!this.changes.length) {
      return 0;
    }

    let tt_change = {
      year: tt.year,
      month: tt.month,
      day: tt.day,
      hour: tt.hour,
      minute: tt.minute,
      second: tt.second
    };

    let change_num = this._findNearbyChange(tt_change);
    let change_num_to_use = -1;
    let step = 1;

    // TODO: replace with bin search?
    for (;;) {
      let change = clone(this.changes[change_num], true);
      if (change.utcOffset < change.prevUtcOffset) {
        Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);
      } else {
        Timezone.adjust_change(change, 0, 0, 0,
                                        change.prevUtcOffset);
      }

      let cmp = Timezone._compare_change_fn(tt_change, change);

      if (cmp >= 0) {
        change_num_to_use = change_num;
      } else {
        step = -1;
      }

      if (step == -1 && change_num_to_use != -1) {
        break;
      }

      change_num += step;

      if (change_num < 0) {
        return 0;
      }

      if (change_num >= this.changes.length) {
        break;
      }
    }

    let zone_change = this.changes[change_num_to_use];
    let utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;

    if (utcOffset_change < 0 && change_num_to_use > 0) {
      let tmp_change = clone(zone_change, true);
      Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);

      if (Timezone._compare_change_fn(tt_change, tmp_change) < 0) {
        let prev_zone_change = this.changes[change_num_to_use - 1];

        let want_daylight = false; // TODO

        if (zone_change.is_daylight != want_daylight &&
            prev_zone_change.is_daylight == want_daylight) {
          zone_change = prev_zone_change;
        }
      }
    }

    // TODO return is_daylight?
    return zone_change.utcOffset;
  }

  _findNearbyChange(change) {
    // find the closest match
    let idx = binsearchInsert(
      this.changes,
      change,
      Timezone._compare_change_fn
    );

    if (idx >= this.changes.length) {
      return this.changes.length - 1;
    }

    return idx;
  }

  _ensureCoverage(aYear) {
    if (Timezone._minimumExpansionYear == -1) {
      let today = Time.now();
      Timezone._minimumExpansionYear = today.year;
    }

    let changesEndYear = aYear;
    if (changesEndYear < Timezone._minimumExpansionYear) {
      changesEndYear = Timezone._minimumExpansionYear;
    }

    changesEndYear += Timezone.EXTRA_COVERAGE;

    if (!this.changes.length || this.expandedUntilYear < aYear) {
      let subcomps = this.component.getAllSubcomponents();
      let compLen = subcomps.length;
      let compIdx = 0;

      for (; compIdx < compLen; compIdx++) {
        this._expandComponent(
          subcomps[compIdx], changesEndYear, this.changes
        );
      }

      this.changes.sort(Timezone._compare_change_fn);
      this.expandedUntilYear = changesEndYear;
    }
  }

  _expandComponent(aComponent, aYear, changes) {
    if (!aComponent.hasProperty("dtstart") ||
        !aComponent.hasProperty("tzoffsetto") ||
        !aComponent.hasProperty("tzoffsetfrom")) {
      return null;
    }

    let dtstart = aComponent.getFirstProperty("dtstart").getFirstValue();
    let change;

    function convert_tzoffset(offset) {
      return offset.factor * (offset.hours * 3600 + offset.minutes * 60);
    }

    function init_changes() {
      let changebase = {};
      changebase.is_daylight = (aComponent.name == "daylight");
      changebase.utcOffset = convert_tzoffset(
        aComponent.getFirstProperty("tzoffsetto").getFirstValue()
      );

      changebase.prevUtcOffset = convert_tzoffset(
        aComponent.getFirstProperty("tzoffsetfrom").getFirstValue()
      );

      return changebase;
    }

    if (!aComponent.hasProperty("rrule") && !aComponent.hasProperty("rdate")) {
      change = init_changes();
      change.year = dtstart.year;
      change.month = dtstart.month;
      change.day = dtstart.day;
      change.hour = dtstart.hour;
      change.minute = dtstart.minute;
      change.second = dtstart.second;

      Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
      changes.push(change);
    } else {
      let props = aComponent.getAllProperties("rdate");
      for (let rdate of props) {
        let time = rdate.getFirstValue();
        change = init_changes();

        change.year = time.year;
        change.month = time.month;
        change.day = time.day;

        if (time.isDate) {
          change.hour = dtstart.hour;
          change.minute = dtstart.minute;
          change.second = dtstart.second;

          if (dtstart.zone != Timezone.utcTimezone) {
            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
          }
        } else {
          change.hour = time.hour;
          change.minute = time.minute;
          change.second = time.second;

          if (time.zone != Timezone.utcTimezone) {
            Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
          }
        }

        changes.push(change);
      }

      let rrule = aComponent.getFirstProperty("rrule");

      if (rrule) {
        rrule = rrule.getFirstValue();
        change = init_changes();

        if (rrule.until && rrule.until.zone == Timezone.utcTimezone) {
          rrule.until.adjust(0, 0, 0, change.prevUtcOffset);
          rrule.until.zone = Timezone.localTimezone;
        }

        let iterator = rrule.iterator(dtstart);

        let occ;
        while ((occ = iterator.next())) {
          change = init_changes();
          if (occ.year > aYear || !occ) {
            break;
          }

          change.year = occ.year;
          change.month = occ.month;
          change.day = occ.day;
          change.hour = occ.hour;
          change.minute = occ.minute;
          change.second = occ.second;
          change.isDate = occ.isDate;

          Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
          changes.push(change);
        }
      }
    }

    return changes;
  }

  /**
   * The string representation of this timezone.
   * @return {String}
   */
  toString() {
    return (this.tznames ? this.tznames : this.tzid);
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


let zones = null;

/**
 * @classdesc
 * Singleton class to contain timezones.  Right now it is all manual registry in
 * the future we may use this class to download timezone information or handle
 * loading pre-expanded timezones.
 *
 * @exports module:ICAL.TimezoneService
 * @memberof ICAL
 */
const TimezoneService = {
  get count() {
    if (zones === null) {
      return 0;
    }

    return Object.keys(zones).length;
  },

  reset: function() {
    zones = Object.create(null);
    let utc = Timezone.utcTimezone;

    zones.Z = utc;
    zones.UTC = utc;
    zones.GMT = utc;
  },
  _hard_reset: function() {
    zones = null;
  },

  /**
   * Checks if timezone id has been registered.
   *
   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
   * @return {Boolean}        False, when not present
   */
  has: function(tzid) {
    if (zones === null) {
      return false;
    }

    return !!zones[tzid];
  },

  /**
   * Returns a timezone by its tzid if present.
   *
   * @param {String} tzid               Timezone identifier (e.g. America/Los_Angeles)
   * @return {Timezone | undefined}     The timezone, or undefined if not found
   */
  get: function(tzid) {
    if (zones === null) {
      this.reset();
    }

    return zones[tzid];
  },

  /**
   * Registers a timezone object or component.
   *
   * @param {Component|Timezone} timezone
   *        The initialized zone or vtimezone.
   *
   * @param {String=} name
   *        The name of the timezone. Defaults to the component's TZID if not
   *        passed.
   */
  register: function(timezone, name) {
    if (zones === null) {
      this.reset();
    }

    // This avoids a breaking change by the change of argument order
    // TODO remove in v3
    if (typeof timezone === "string" && name instanceof Timezone) {
      [timezone, name] = [name, timezone];
    }

    if (!name) {
      if (timezone instanceof Timezone) {
        name = timezone.tzid;
      } else {
        if (timezone.name === 'vtimezone') {
          timezone = new Timezone(timezone);
          name = timezone.tzid;
        }
      }
    }

    if (!name) {
      throw new TypeError("Neither a timezone nor a name was passed");
    }

    if (timezone instanceof Timezone) {
      zones[name] = timezone;
    } else {
      throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');
    }
  },

  /**
   * Removes a timezone by its tzid from the list.
   *
   * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
   * @return {?Timezone}      The removed timezone, or null if not registered
   */
  remove: function(tzid) {
    if (zones === null) {
      return null;
    }

    return (delete zones[tzid]);
  }
};

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * Helper functions used in various places within ical.js
 * @module ICAL.helpers
 */

/**
 * Compiles a list of all referenced TZIDs in all subcomponents and
 * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs
 * are referenced by a component, but a VTIMEZONE does not exist,
 * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.
 *
 * @param {Component} vcal     The top-level VCALENDAR component.
 * @return {Component}         The ICAL.Component that was passed in.
 */
function updateTimezones(vcal) {
  let allsubs, properties, vtimezones, reqTzid, i;

  if (!vcal || vcal.name !== "vcalendar") {
    //not a top-level vcalendar component
    return vcal;
  }

  //Store vtimezone subcomponents in an object reference by tzid.
  //Store properties from everything else in another array
  allsubs = vcal.getAllSubcomponents();
  properties = [];
  vtimezones = {};
  for (i = 0; i < allsubs.length; i++) {
    if (allsubs[i].name === "vtimezone") {
      let tzid = allsubs[i].getFirstProperty("tzid").getFirstValue();
      vtimezones[tzid] = allsubs[i];
    } else {
      properties = properties.concat(allsubs[i].getAllProperties());
    }
  }

  //create an object with one entry for each required tz
  reqTzid = {};
  for (i = 0; i < properties.length; i++) {
    let tzid = properties[i].getParameter("tzid");
    if (tzid) {
      reqTzid[tzid] = true;
    }
  }

  //delete any vtimezones that are not on the reqTzid list.
  for (let [tzid, comp] of Object.entries(vtimezones)) {
    if (!reqTzid[tzid]) {
      vcal.removeSubcomponent(comp);
    }
  }

  //create any missing, but registered timezones
  for (let tzid of Object.keys(reqTzid)) {
    if (!vtimezones[tzid] && TimezoneService.has(tzid)) {
      vcal.addSubcomponent(TimezoneService.get(tzid).component);
    }
  }

  return vcal;
}

/**
 * Checks if the given type is of the number type and also NaN.
 *
 * @param {Number} number     The number to check
 * @return {Boolean}          True, if the number is strictly NaN
 */
function isStrictlyNaN(number) {
  return typeof(number) === 'number' && isNaN(number);
}

/**
 * Parses a string value that is expected to be an integer, when the valid is
 * not an integer throws a decoration error.
 *
 * @param {String} string     Raw string input
 * @return {Number}           Parsed integer
 */
function strictParseInt(string) {
  let result = parseInt(string, 10);

  if (isStrictlyNaN(result)) {
    throw new Error(
      'Could not extract integer from "' + string + '"'
    );
  }

  return result;
}

/**
 * Creates or returns a class instance of a given type with the initialization
 * data if the data is not already an instance of the given type.
 *
 * @example
 * var time = new ICAL.Time(...);
 * var result = ICAL.helpers.formatClassType(time, ICAL.Time);
 *
 * (result instanceof ICAL.Time)
 * // => true
 *
 * result = ICAL.helpers.formatClassType({}, ICAL.Time);
 * (result isntanceof ICAL.Time)
 * // => true
 *
 *
 * @param {Object} data       object initialization data
 * @param {Object} type       object type (like ICAL.Time)
 * @return {?}                An instance of the found type.
 */
function formatClassType(data, type) {
  if (typeof(data) === 'undefined') {
    return undefined;
  }

  if (data instanceof type) {
    return data;
  }
  return new type(data);
}

/**
 * Identical to indexOf but will only match values when they are not preceded
 * by a backslash character.
 *
 * @param {String} buffer         String to search
 * @param {String} search         Value to look for
 * @param {Number} pos            Start position
 * @return {Number}               The position, or -1 if not found
 */
function unescapedIndexOf(buffer, search, pos) {
  while ((pos = buffer.indexOf(search, pos)) !== -1) {
    if (pos > 0 && buffer[pos - 1] === '\\') {
      pos += 1;
    } else {
      return pos;
    }
  }
  return -1;
}

/**
 * Find the index for insertion using binary search.
 *
 * @param {Array} list            The list to search
 * @param {?} seekVal             The value to insert
 * @param {function(?,?)} cmpfunc The comparison func, that can
 *                                  compare two seekVals
 * @return {Number}               The insert position
 */
function binsearchInsert(list, seekVal, cmpfunc) {
  if (!list.length)
    return 0;

  let low = 0, high = list.length - 1,
      mid, cmpval;

  while (low <= high) {
    mid = low + Math.floor((high - low) / 2);
    cmpval = cmpfunc(seekVal, list[mid]);

    if (cmpval < 0)
      high = mid - 1;
    else if (cmpval > 0)
      low = mid + 1;
    else
      break;
  }

  if (cmpval < 0)
    return mid; // insertion is displacing, so use mid outright.
  else if (cmpval > 0)
    return mid + 1;
  else
    return mid;
}

/**
 * Clone the passed object or primitive. By default a shallow clone will be
 * executed.
 *
 * @param {*} aSrc            The thing to clone
 * @param {Boolean=} aDeep    If true, a deep clone will be performed
 * @return {*}                The copy of the thing
 */
function clone(aSrc, aDeep) {
  if (!aSrc || typeof aSrc != "object") {
    return aSrc;
  } else if (aSrc instanceof Date) {
    return new Date(aSrc.getTime());
  } else if ("clone" in aSrc) {
    return aSrc.clone();
  } else if (Array.isArray(aSrc)) {
    let arr = [];
    for (let i = 0; i < aSrc.length; i++) {
      arr.push(aDeep ? clone(aSrc[i], true) : aSrc[i]);
    }
    return arr;
  } else {
    let obj = {};
    for (let [name, value] of Object.entries(aSrc)) {
      if (aDeep) {
        obj[name] = clone(value, true);
      } else {
        obj[name] = value;
      }
    }
    return obj;
  }
}

/**
 * Performs iCalendar line folding. A line ending character is inserted and
 * the next line begins with a whitespace.
 *
 * @example
 * SUMMARY:This line will be fold
 *  ed right in the middle of a word.
 *
 * @param {String} aLine      The line to fold
 * @return {String}           The folded line
 */
function foldline(aLine) {
  let result = "";
  let line = aLine || "", pos = 0, line_length = 0;
  //pos counts position in line for the UTF-16 presentation
  //line_length counts the bytes for the UTF-8 presentation
  while (line.length) {
    let cp = line.codePointAt(pos);
    if (cp < 128) ++line_length;
    else if (cp < 2048) line_length += 2;//needs 2 UTF-8 bytes
    else if (cp < 65536) line_length += 3;
    else line_length += 4; //cp is less than 1114112
    if (line_length < ICALmodule.foldLength + 1)
      pos += cp > 65535 ? 2 : 1;
    else {
      result += ICALmodule.newLineChar + " " + line.slice(0, Math.max(0, pos));
      line = line.slice(Math.max(0, pos));
      pos = line_length = 0;
    }
  }
  return result.slice(ICALmodule.newLineChar.length + 1);
}

/**
 * Pads the given string or number with zeros so it will have at least two
 * characters.
 *
 * @param {String|Number} data    The string or number to pad
 * @return {String}               The number padded as a string
 */
function pad2(data) {
  if (typeof(data) !== 'string') {
    // handle fractions.
    if (typeof(data) === 'number') {
      data = parseInt(data);
    }
    data = String(data);
  }

  let len = data.length;

  switch (len) {
    case 0:
      return '00';
    case 1:
      return '0' + data;
    default:
      return data;
  }
}

/**
 * Truncates the given number, correctly handling negative numbers.
 *
 * @param {Number} number     The number to truncate
 * @return {Number}           The truncated number
 */
function trunc(number) {
  return (number < 0 ? Math.ceil(number) : Math.floor(number));
}

/**
 * Poor-man's cross-browser object extension. Doesn't support all the
 * features, but enough for our usage. Note that the target's properties are
 * not overwritten with the source properties.
 *
 * @example
 * var child = ICAL.helpers.extend(parent, {
 *   "bar": 123
 * });
 *
 * @param {Object} source     The object to extend
 * @param {Object} target     The object to extend with
 * @return {Object}           Returns the target.
 */
function extend(source, target) {
  for (let key in source) {
    let descr = Object.getOwnPropertyDescriptor(source, key);
    if (descr && !Object.getOwnPropertyDescriptor(target, key)) {
      Object.defineProperty(target, key, descr);
    }
  }
  return target;
}

var helpers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  binsearchInsert: binsearchInsert,
  clone: clone,
  extend: extend,
  foldline: foldline,
  formatClassType: formatClassType,
  isStrictlyNaN: isStrictlyNaN,
  pad2: pad2,
  strictParseInt: strictParseInt,
  trunc: trunc,
  unescapedIndexOf: unescapedIndexOf,
  updateTimezones: updateTimezones
});

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This class represents the "utc-offset" value type, with various calculation and manipulation
 * methods.
 *
 * @memberof ICAL
 */
class UtcOffset {
  /**
   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.
   *
   * @param {String} aString    The string to parse
   * @return {Duration}         The created utc-offset instance
   */
  static fromString(aString) {
    // -05:00
    let options = {};
    //TODO: support seconds per rfc5545 ?
    options.factor = (aString[0] === '+') ? 1 : -1;
    options.hours = strictParseInt(aString.slice(1, 3));
    options.minutes = strictParseInt(aString.slice(4, 6));

    return new UtcOffset(options);
  }

  /**
   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds
   * value.
   *
   * @param {Number} aSeconds       The number of seconds to convert
   */
  static fromSeconds(aSeconds) {
    let instance = new UtcOffset();
    instance.fromSeconds(aSeconds);
    return instance;
  }

  /**
   * Creates a new ICAL.UtcOffset instance.
   *
   * @param {Object} aData          An object with members of the utc offset
   * @param {Number=} aData.hours   The hours for the utc offset
   * @param {Number=} aData.minutes The minutes in the utc offset
   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
   */
  constructor(aData) {
    this.fromData(aData);
  }

  /**
   * The hours in the utc-offset
   * @type {Number}
   */
  hours = 0;

  /**
   * The minutes in the utc-offset
   * @type {Number}
   */
  minutes = 0;

  /**
   * The sign of the utc offset, 1 for positive offset, -1 for negative
   * offsets.
   * @type {Number}
   */
  factor = 1;

  /**
   * The type name, to be used in the jCal object.
   * @constant
   * @type {String}
   * @default "utc-offset"
   */
  icaltype = "utc-offset";

  /**
   * Returns a clone of the utc offset object.
   *
   * @return {UtcOffset}     The cloned object
   */
  clone() {
    return UtcOffset.fromSeconds(this.toSeconds());
  }

  /**
   * Sets up the current instance using members from the passed data object.
   *
   * @param {Object} aData          An object with members of the utc offset
   * @param {Number=} aData.hours   The hours for the utc offset
   * @param {Number=} aData.minutes The minutes in the utc offset
   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
   */
  fromData(aData) {
    if (aData) {
      for (let [key, value] of Object.entries(aData)) {
        this[key] = value;
      }
    }
    this._normalize();
  }

  /**
   * Sets up the current instance from the given seconds value. The seconds
   * value is truncated to the minute. Offsets are wrapped when the world
   * ends, the hour after UTC+14:00 is UTC-12:00.
   *
   * @param {Number} aSeconds         The seconds to convert into an offset
   */
  fromSeconds(aSeconds) {
    let secs = Math.abs(aSeconds);

    this.factor = aSeconds < 0 ? -1 : 1;
    this.hours = trunc(secs / 3600);

    secs -= (this.hours * 3600);
    this.minutes = trunc(secs / 60);
    return this;
  }

  /**
   * Convert the current offset to a value in seconds
   *
   * @return {Number}                 The offset in seconds
   */
  toSeconds() {
    return this.factor * (60 * this.minutes + 3600 * this.hours);
  }

  /**
   * Compare this utc offset with another one.
   *
   * @param {UtcOffset} other             The other offset to compare with
   * @return {Number}                     -1, 0 or 1 for less/equal/greater
   */
  compare(other) {
    let a = this.toSeconds();
    let b = other.toSeconds();
    return (a > b) - (b > a);
  }

  _normalize() {
    // Range: 97200 seconds (with 1 hour inbetween)
    let secs = this.toSeconds();
    let factor = this.factor;
    while (secs < -43200) { // = UTC-12:00
      secs += 97200;
    }
    while (secs > 50400) { // = UTC+14:00
      secs -= 97200;
    }

    this.fromSeconds(secs);

    // Avoid changing the factor when on zero seconds
    if (secs == 0) {
      this.factor = factor;
    }
  }

  /**
   * The iCalendar string representation of this utc-offset.
   * @return {String}
   */
  toICALString() {
    return design.icalendar.value['utc-offset'].toICAL(this.toString());
  }

  /**
   * The string representation of this utc-offset.
   * @return {String}
   */
  toString() {
    return (this.factor == 1 ? "+" : "-") + pad2(this.hours) + ':' + pad2(this.minutes);
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * Describes a vCard time, which has slight differences to the ICAL.Time.
 * Properties can be null if not specified, for example for dates with
 * reduced accuracy or truncation.
 *
 * Note that currently not all methods are correctly re-implemented for
 * VCardTime. For example, comparison will have undefined results when some
 * members are null.
 *
 * Also, normalization is not yet implemented for this class!
 *
 * @memberof ICAL
 * @extends {Time}
 */
class VCardTime extends Time {
  /**
   * Returns a new ICAL.VCardTime instance from a date and/or time string.
   *
   * @param {String} aValue     The string to create from
   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time
   * @return {VCardTime}        The date/time instance
   */
  static fromDateAndOrTimeString(aValue, aIcalType) {
    function part(v, s, e) {
      return v ? strictParseInt(v.slice(s, s + e)) : null;
    }
    let parts = aValue.split('T');
    let dt = parts[0], tmz = parts[1];
    let splitzone = tmz ? design.vcard.value.time._splitZone(tmz) : [];
    let zone = splitzone[0], tm = splitzone[1];

    let dtlen = dt ? dt.length : 0;
    let tmlen = tm ? tm.length : 0;

    let hasDashDate = dt && dt[0] == '-' && dt[1] == '-';
    let hasDashTime = tm && tm[0] == '-';

    let o = {
      year: hasDashDate ? null : part(dt, 0, 4),
      month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,
      day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,

      hour: hasDashTime ? null : part(tm, 0, 2),
      minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,
      second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null
    };

    if (zone == 'Z') {
      zone = Timezone.utcTimezone;
    } else if (zone && zone[3] == ':') {
      zone = UtcOffset.fromString(zone);
    } else {
      zone = null;
    }

    return new VCardTime(o, zone, aIcalType);
  }


  /**
   * Creates a new ICAL.VCardTime instance.
   *
   * @param {Object} data                           The data for the time instance
   * @param {Number=} data.year                     The year for this date
   * @param {Number=} data.month                    The month for this date
   * @param {Number=} data.day                      The day for this date
   * @param {Number=} data.hour                     The hour for this date
   * @param {Number=} data.minute                   The minute for this date
   * @param {Number=} data.second                   The second for this date
   * @param {Timezone|UtcOffset} zone               The timezone to use
   * @param {String} icaltype                       The type for this date/time object
   */
  constructor(data, zone, icaltype) {
    super(data, zone);
    this.icaltype = icaltype || "date-and-or-time";
  }

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "vcardtime"
   */
  icalclass = "vcardtime";

  /**
   * The type name, to be used in the jCal object.
   * @type {String}
   * @default "date-and-or-time"
   */
  icaltype = "date-and-or-time";

  /**
   * Returns a clone of the vcard date/time object.
   *
   * @return {VCardTime}     The cloned object
   */
  clone() {
    return new VCardTime(this._time, this.zone, this.icaltype);
  }

  _normalize() {
    return this;
  }

  /**
   * @inheritdoc
   */
  utcOffset() {
    if (this.zone instanceof UtcOffset) {
      return this.zone.toSeconds();
    } else {
      return Time.prototype.utcOffset.apply(this, arguments);
    }
  }

  /**
   * Returns an RFC 6350 compliant representation of this object.
   *
   * @return {String}         vcard date/time string
   */
  toICALString() {
    return design.vcard.value[this.icaltype].toICAL(this.toString());
  }

  /**
   * The string representation of this date/time, in jCard form
   * (including : and - separators).
   * @return {String}
   */
  toString() {
    let y = this.year, m = this.month, d = this.day;
    let h = this.hour, mm = this.minute, s = this.second;

    let hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;
    let hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;

    let datepart = (hasYear ? pad2(y) + (hasMonth || hasDay ? '-' : '') : (hasMonth || hasDay ? '--' : '')) +
                   (hasMonth ? pad2(m) : '') +
                   (hasDay ? '-' + pad2(d) : '');
    let timepart = (hasHour ? pad2(h) : '-') + (hasHour && hasMinute ? ':' : '') +
                   (hasMinute ? pad2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') +
                   (hasMinute && hasSecond ? ':' : '') +
                   (hasSecond ? pad2(s) : '');

    let zone;
    if (this.zone === Timezone.utcTimezone) {
      zone = 'Z';
    } else if (this.zone instanceof UtcOffset) {
      zone = this.zone.toString();
    } else if (this.zone === Timezone.localTimezone) {
      zone = '';
    } else if (this.zone instanceof Timezone) {
      let offset = UtcOffset.fromSeconds(this.zone.utcOffset(this));
      zone = offset.toString();
    } else {
      zone = '';
    }

    switch (this.icaltype) {
      case "time":
        return timepart + zone;
      case "date-and-or-time":
      case "date-time":
        return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);
      case "date":
        return datepart;
    }
    return null;
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 *
 * @ignore
 * @typedef {import("./types.js").weekDay} weekDay
 * Imports the 'weekDay' type from the "types.js" module
 */

/**
 * An iterator for a single recurrence rule. This class usually doesn't have to be instanciated
 * directly, the convenience method {@link ICAL.Recur#iterator} can be used.
 *
 * @memberof ICAL
 */
class RecurIterator {
  static _indexMap = {
    "BYSECOND": 0,
    "BYMINUTE": 1,
    "BYHOUR": 2,
    "BYDAY": 3,
    "BYMONTHDAY": 4,
    "BYYEARDAY": 5,
    "BYWEEKNO": 6,
    "BYMONTH": 7,
    "BYSETPOS": 8
  };

  static _expandMap = {
    "SECONDLY": [1, 1, 1, 1, 1, 1, 1, 1],
    "MINUTELY": [2, 1, 1, 1, 1, 1, 1, 1],
    "HOURLY": [2, 2, 1, 1, 1, 1, 1, 1],
    "DAILY": [2, 2, 2, 1, 1, 1, 1, 1],
    "WEEKLY": [2, 2, 2, 2, 3, 3, 1, 1],
    "MONTHLY": [2, 2, 2, 2, 2, 3, 3, 1],
    "YEARLY": [2, 2, 2, 2, 2, 2, 2, 2]
  };

  static UNKNOWN = 0;
  static CONTRACT = 1;
  static EXPAND = 2;
  static ILLEGAL = 3;

  /**
   * Creates a new ICAL.RecurIterator instance. The options object may contain additional members
   * when resuming iteration from a previous run.
   *
   * @param {Object} options                The iterator options
   * @param {Recur} options.rule            The rule to iterate.
   * @param {Time} options.dtstart          The start date of the event.
   * @param {Boolean=} options.initialized  When true, assume that options are
   *        from a previously constructed iterator. Initialization will not be
   *        repeated.
   */
  constructor(options) {
    this.fromData(options);
  }

  /**
   * True when iteration is finished.
   * @type {Boolean}
   */
  completed = false;

  /**
   * The rule that is being iterated
   * @type {Recur}
   */
  rule = null;

  /**
   * The start date of the event being iterated.
   * @type {Time}
   */
  dtstart = null;

  /**
   * The last occurrence that was returned from the
   * {@link RecurIterator#next} method.
   * @type {Time}
   */
  last = null;

  /**
   * The sequence number from the occurrence
   * @type {Number}
   */
  occurrence_number = 0;

  /**
   * The indices used for the {@link ICAL.RecurIterator#by_data} object.
   * @type {Object}
   * @private
   */
  by_indices = null;

  /**
   * If true, the iterator has already been initialized
   * @type {Boolean}
   * @private
   */
  initialized = false;

  /**
   * The initializd by-data.
   * @type {Object}
   * @private
   */
  by_data = null;

  /**
   * The expanded yeardays
   * @type {Array}
   * @private
   */
  days = null;

  /**
   * The index in the {@link ICAL.RecurIterator#days} array.
   * @type {Number}
   * @private
   */
  days_index = 0;

  /**
   * Initialize the recurrence iterator from the passed data object. This
   * method is usually not called directly, you can initialize the iterator
   * through the constructor.
   *
   * @param {Object} options                The iterator options
   * @param {Recur} options.rule            The rule to iterate.
   * @param {Time} options.dtstart          The start date of the event.
   * @param {Boolean=} options.initialized  When true, assume that options are
   *        from a previously constructed iterator. Initialization will not be
   *        repeated.
   */
  fromData(options) {
    this.rule = formatClassType(options.rule, Recur);

    if (!this.rule) {
      throw new Error('iterator requires a (ICAL.Recur) rule');
    }

    this.dtstart = formatClassType(options.dtstart, Time);

    if (!this.dtstart) {
      throw new Error('iterator requires a (ICAL.Time) dtstart');
    }

    if (options.by_data) {
      this.by_data = options.by_data;
    } else {
      this.by_data = clone(this.rule.parts, true);
    }

    if (options.occurrence_number)
      this.occurrence_number = options.occurrence_number;

    this.days = options.days || [];
    if (options.last) {
      this.last = formatClassType(options.last, Time);
    }

    this.by_indices = options.by_indices;

    if (!this.by_indices) {
      this.by_indices = {
        "BYSECOND": 0,
        "BYMINUTE": 0,
        "BYHOUR": 0,
        "BYDAY": 0,
        "BYMONTH": 0,
        "BYWEEKNO": 0,
        "BYMONTHDAY": 0
      };
    }

    this.initialized = options.initialized || false;

    if (!this.initialized) {
      try {
        this.init();
      } catch (e) {
        if (e instanceof InvalidRecurrenceRuleError) {
          // Init may error if there are no possible recurrence instances from
          // the rule, but we don't want to bubble this error up. Instead, we
          // create an empty iterator.
          this.completed = true;
        } else {
          // Propagate other errors to consumers.
          throw e;
        }
      }
    }
  }

  /**
   * Initialize the iterator
   * @private
   */
  init() {
    this.initialized = true;
    this.last = this.dtstart.clone();
    let parts = this.by_data;

    if ("BYDAY" in parts) {
      // libical does this earlier when the rule is loaded, but we postpone to
      // now so we can preserve the original order.
      this.sort_byday_rules(parts.BYDAY);
    }

    // The BYYEARDAY may only appear with BYDAY
    if ("BYYEARDAY" in parts) {
      if ("BYMONTH" in parts || "BYWEEKNO" in parts ||
          "BYMONTHDAY" in parts) {
        throw new Error("Invalid BYYEARDAY rule");
      }
    }

    // BYWEEKNO and BYMONTHDAY rule parts may not both appear
    if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
      throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
    }

    // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor
    // BYWEEKNO may appear.
    if (this.rule.freq == "MONTHLY" &&
        ("BYYEARDAY" in parts || "BYWEEKNO" in parts)) {
      throw new Error("For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear");
    }

    // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor
    // BYYEARDAY may appear.
    if (this.rule.freq == "WEEKLY" &&
        ("BYYEARDAY" in parts || "BYMONTHDAY" in parts)) {
      throw new Error("For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear");
    }

    // BYYEARDAY may only appear in YEARLY rules
    if (this.rule.freq != "YEARLY" && "BYYEARDAY" in parts) {
      throw new Error("BYYEARDAY may only appear in YEARLY rules");
    }

    this.last.second = this.setup_defaults("BYSECOND", "SECONDLY", this.dtstart.second);
    this.last.minute = this.setup_defaults("BYMINUTE", "MINUTELY", this.dtstart.minute);
    this.last.hour = this.setup_defaults("BYHOUR", "HOURLY", this.dtstart.hour);
    this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
    this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);

    if (this.rule.freq == "WEEKLY") {
      if ("BYDAY" in parts) {
        let [, dow] = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);
        let wkdy = dow - this.last.dayOfWeek(this.rule.wkst);
        if ((this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0) || wkdy < 0) {
          // Initial time is after first day of BYDAY data
          this.last.day += wkdy;
        }
      } else {
        let dayName = Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());
        parts.BYDAY = [dayName];
      }
    }

    if (this.rule.freq == "YEARLY") {
      // Some yearly recurrence rules may be specific enough to not actually
      // occur on a yearly basis, e.g. the 29th day of February or the fifth
      // Monday of a given month. The standard isn't clear on the intended
      // behavior in these cases, but `libical` at least will iterate until it
      // finds a matching year.
      // CAREFUL: Some rules may specify an occurrence that can never happen,
      // e.g. the first Monday of April so long as it falls on the 15th
      // through the 21st. Detecting these is non-trivial, so ensure that we
      // stop iterating at some point.
      const untilYear = this.rule.until ? this.rule.until.year : 20000;
      while (this.last.year <= untilYear) {
        this.expand_year_days(this.last.year);
        if (this.days.length > 0) {
          break;
        }
        this.increment_year(this.rule.interval);
      }

      if (this.days.length == 0) {
        throw new InvalidRecurrenceRuleError();
      }

      // If there's no occurrence in this year, try the following years. This
      // would only happen looking for day 366 or -366.
      if (!this._nextByYearDay() && !this.next_year() && !this.next_year() && !this.next_year()) {
        // This should not be possible, but just in case it is, stop.
        throw new InvalidRecurrenceRuleError();
      }
    }

    if (this.rule.freq == "MONTHLY") {
      if (this.has_by_data("BYDAY")) {
        let tempLast = null;
        let initLast = this.last.clone();
        let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);

        // Check every weekday in BYDAY with relative dow and pos.
        for (let bydow of this.by_data.BYDAY) {
          this.last = initLast.clone();
          let [pos, dow] = this.ruleDayOfWeek(bydow);
          let dayOfMonth = this.last.nthWeekDay(dow, pos);

          // If |pos| >= 6, the byday is invalid for a monthly rule.
          if (pos >= 6 || pos <= -6) {
            throw new Error("Malformed values in BYDAY part");
          }

          // If a Byday with pos=+/-5 is not in the current month it
          // must be searched in the next months.
          if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
            // Skip if we have already found a "last" in this month.
            if (tempLast && tempLast.month == initLast.month) {
              continue;
            }
            while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
              this.increment_month();
              daysInMonth = Time.daysInMonth(this.last.month, this.last.year);
              dayOfMonth = this.last.nthWeekDay(dow, pos);
            }
          }

          this.last.day = dayOfMonth;
          if (!tempLast || this.last.compare(tempLast) < 0) {
            tempLast = this.last.clone();
          }
        }
        this.last = tempLast.clone();

        //XXX: This feels like a hack, but we need to initialize
        //     the BYMONTHDAY case correctly and byDayAndMonthDay handles
        //     this case. It accepts a special flag which will avoid incrementing
        //     the initial value without the flag days that match the start time
        //     would be missed.
        if (this.has_by_data('BYMONTHDAY')) {
          this._byDayAndMonthDay(true);
        }

        if (this.last.day > daysInMonth || this.last.day == 0) {
          throw new Error("Malformed values in BYDAY part");
        }
      } else if (this.has_by_data("BYMONTHDAY")) {
        // Change the day value so that normalisation won't change the month.
        this.last.day = 1;

        // Get a sorted list of days in the starting month that match the rule.
        let normalized = this.normalizeByMonthDayRules(
          this.last.year,
          this.last.month,
          this.rule.parts.BYMONTHDAY
        ).filter(d => d >= this.last.day);

        if (normalized.length) {
          // There's at least one valid day, use it.
          this.last.day = normalized[0];
          this.by_data.BYMONTHDAY = normalized;
        } else {
          // There's no occurrence in this month, find the next valid month.
          // The longest possible sequence of skipped months is February-April-June,
          // so we might need to call next_month up to three times.
          if (!this.next_month() && !this.next_month() && !this.next_month()) {
            throw new InvalidRecurrenceRuleError();
          }
        }
      }
    }
  }

  /**
   * Retrieve the next occurrence from the iterator.
   * @return {Time}
   */
  next(again = false) {
    let before = (this.last ? this.last.clone() : null);

    if ((this.rule.count && this.occurrence_number >= this.rule.count) ||
        (this.rule.until && this.last.compare(this.rule.until) > 0)) {
      this.completed = true;
    }

    if (this.completed) {
      return null;
    }

    if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {
      // First of all, give the instance that was initialized
      this.occurrence_number++;
      return this.last;
    }

    let valid;
    let invalid_count = 0;
    do {
      valid = 1;

      switch (this.rule.freq) {
      case "SECONDLY":
        this.next_second();
        break;
      case "MINUTELY":
        this.next_minute();
        break;
      case "HOURLY":
        this.next_hour();
        break;
      case "DAILY":
        this.next_day();
        break;
      case "WEEKLY":
        this.next_week();
        break;
      case "MONTHLY":
        valid = this.next_month();
        if (valid) {
          invalid_count = 0;
        } else if (++invalid_count == 336) {
          // We've been through all 91 month variations and not found a recurrence. Stop.
          // (12 months and 29-day February √ó 7 starting days.)
          this.completed = true;
          return null;
        }
        break;
      case "YEARLY":
        valid = this.next_year();
        if (valid) {
          invalid_count = 0;
        } else if (++invalid_count == 28) {
          // We've been through all 14 year variations and not found a recurrence. Stop.
          // (365-day and 366-day years √ó 7 starting days.)
          this.completed = true;
          return null;
        }
        break;

      default:
        return null;
      }
    } while (!this.check_contracting_rules() ||
             this.last.compare(this.dtstart) < 0 ||
             !valid);

    if (this.last.compare(before) == 0) {
      if (again) {
        throw new Error("Same occurrence found twice, protecting you from death by recursion");
      }
      this.next(true);
    }

    if (this.rule.until && this.last.compare(this.rule.until) > 0) {
      this.completed = true;
      return null;
    } else {
      this.occurrence_number++;
      return this.last;
    }
  }

  next_second() {
    return this.next_generic("BYSECOND", "SECONDLY", "second", "minute");
  }

  increment_second(inc) {
    return this.increment_generic(inc, "second", 60, "minute");
  }

  next_minute() {
    return this.next_generic("BYMINUTE", "MINUTELY",
                             "minute", "hour", "next_second");
  }

  increment_minute(inc) {
    return this.increment_generic(inc, "minute", 60, "hour");
  }

  next_hour() {
    return this.next_generic("BYHOUR", "HOURLY", "hour",
                             "monthday", "next_minute");
  }

  increment_hour(inc) {
    this.increment_generic(inc, "hour", 24, "monthday");
  }

  next_day() {
    let this_freq = (this.rule.freq == "DAILY");

    if (this.next_hour() == 0) {
      return 0;
    }

    if (this_freq) {
      this.increment_monthday(this.rule.interval);
    } else {
      this.increment_monthday(1);
    }

    return 0;
  }

  next_week() {
    let end_of_data = 0;

    if (this.next_weekday_by_week() == 0) {
      return end_of_data;
    }

    if (this.has_by_data("BYWEEKNO")) {
      this.by_indices.BYWEEKNO++;

      if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {
        this.by_indices.BYWEEKNO = 0;
        end_of_data = 1;
      }

      // HACK should be first month of the year
      this.last.month = 1;
      this.last.day = 1;

      let week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];

      this.last.day += 7 * week_no;

      if (end_of_data) {
        this.increment_year(1);
      }
    } else {
      // Jump to the next week
      this.increment_monthday(7 * this.rule.interval);
    }

    return end_of_data;
  }

  /**
   * Normalize each by day rule for a given year/month.
   * Takes into account ordering and negative rules
   *
   * @private
   * @param {Number} year         Current year.
   * @param {Number} month        Current month.
   * @param {Array}  rules        Array of rules.
   *
   * @return {Array} sorted and normalized rules.
   *                 Negative rules will be expanded to their
   *                 correct positive values for easier processing.
   */
  normalizeByMonthDayRules(year, month, rules) {
    let daysInMonth = Time.daysInMonth(month, year);

    // XXX: This is probably bad for performance to allocate
    //      a new array for each month we scan, if possible
    //      we should try to optimize this...
    let newRules = [];

    let ruleIdx = 0;
    let len = rules.length;
    let rule;

    for (; ruleIdx < len; ruleIdx++) {
      rule = parseInt(rules[ruleIdx], 10);
      if (isNaN(rule)) {
        throw new Error('Invalid BYMONTHDAY value');
      }

      // if this rule falls outside of given
      // month discard it.
      if (Math.abs(rule) > daysInMonth) {
        continue;
      }

      // negative case
      if (rule < 0) {
        // we add (not subtract it is a negative number)
        // one from the rule because 1 === last day of month
        rule = daysInMonth + (rule + 1);
      } else if (rule === 0) {
        // skip zero: it is invalid.
        continue;
      }

      // only add unique items...
      if (newRules.indexOf(rule) === -1) {
        newRules.push(rule);
      }

    }

    // unique and sort
    return newRules.sort(function(a, b) { return a - b; });
  }

  /**
   * NOTES:
   * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)
   * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when
   * both conditions match a given date (this.last.day) iteration stops.
   *
   * @private
   * @param {Boolean=} isInit     When given true will not increment the
   *                                current day (this.last).
   */
  _byDayAndMonthDay(isInit) {
    let byMonthDay; // setup in initMonth
    let byDay = this.by_data.BYDAY;

    let date;
    let dateIdx = 0;
    let dateLen; // setup in initMonth
    let dayLen = byDay.length;

    // we are not valid by default
    let dataIsValid = 0;

    let daysInMonth;
    let self = this;
    // we need a copy of this, because a DateTime gets normalized
    // automatically if the day is out of range. At some points we
    // set the last day to 0 to start counting.
    let lastDay = this.last.day;

    function initMonth() {
      daysInMonth = Time.daysInMonth(
        self.last.month, self.last.year
      );

      byMonthDay = self.normalizeByMonthDayRules(
        self.last.year,
        self.last.month,
        self.by_data.BYMONTHDAY
      );

      dateLen = byMonthDay.length;

      // For the case of more than one occurrence in one month
      // we have to be sure to start searching after the last
      // found date or at the last BYMONTHDAY, unless we are
      // initializing the iterator because in this case we have
      // to consider the last found date too.
      while (byMonthDay[dateIdx] <= lastDay &&
             !(isInit && byMonthDay[dateIdx] == lastDay) &&
             dateIdx < dateLen - 1) {
        dateIdx++;
      }
    }

    function nextMonth() {
      // since the day is incremented at the start
      // of the loop below, we need to start at 0
      lastDay = 0;
      self.increment_month();
      dateIdx = 0;
      initMonth();
    }

    initMonth();

    // should come after initMonth
    if (isInit) {
      lastDay -= 1;
    }

    // Use a counter to avoid an infinite loop with malformed rules.
    // Stop checking after 4 years so we consider also a leap year.
    let monthsCounter = 48;

    while (!dataIsValid && monthsCounter) {
      monthsCounter--;
      // increment the current date. This is really
      // important otherwise we may fall into the infinite
      // loop trap. The initial date takes care of the case
      // where the current date is the date we are looking
      // for.
      date = lastDay + 1;

      if (date > daysInMonth) {
        nextMonth();
        continue;
      }

      // find next date
      let next = byMonthDay[dateIdx++];

      // this logic is dependent on the BYMONTHDAYS
      // being in order (which is done by #normalizeByMonthDayRules)
      if (next >= date) {
        // if the next month day is in the future jump to it.
        lastDay = next;
      } else {
        // in this case the 'next' monthday has past
        // we must move to the month.
        nextMonth();
        continue;
      }

      // Now we can loop through the day rules to see
      // if one matches the current month date.
      for (let dayIdx = 0; dayIdx < dayLen; dayIdx++) {
        let parts = this.ruleDayOfWeek(byDay[dayIdx]);
        let pos = parts[0];
        let dow = parts[1];

        this.last.day = lastDay;
        if (this.last.isNthWeekDay(dow, pos)) {
          // when we find the valid one we can mark
          // the conditions as met and break the loop.
          // (Because we have this condition above
          //  it will also break the parent loop).
          dataIsValid = 1;
          break;
        }
      }

      // It is completely possible that the combination
      // cannot be matched in the current month.
      // When we reach the end of possible combinations
      // in the current month we iterate to the next one.
      // since dateIdx is incremented right after getting
      // "next", we don't need dateLen -1 here.
      if (!dataIsValid && dateIdx === dateLen) {
        nextMonth();
        continue;
      }
    }

    if (monthsCounter <= 0) {
      // Checked 4 years without finding a Byday that matches
      // a Bymonthday. Maybe the rule is not correct.
      throw new Error("Malformed values in BYDAY combined with BYMONTHDAY parts");
    }


    return dataIsValid;
  }

  next_month() {
    let data_valid = 1;

    if (this.next_hour() == 0) {
      return data_valid;
    }

    if (this.has_by_data("BYDAY") && this.has_by_data("BYMONTHDAY")) {
      data_valid = this._byDayAndMonthDay();
    } else if (this.has_by_data("BYDAY")) {
      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);
      let setpos = 0;
      let setpos_total = 0;

      if (this.has_by_data("BYSETPOS")) {
        let last_day = this.last.day;
        for (let day = 1; day <= daysInMonth; day++) {
          this.last.day = day;
          if (this.is_day_in_byday(this.last)) {
            setpos_total++;
            if (day <= last_day) {
              setpos++;
            }
          }
        }
        this.last.day = last_day;
      }

      data_valid = 0;
      let day;
      for (day = this.last.day + 1; day <= daysInMonth; day++) {
        this.last.day = day;

        if (this.is_day_in_byday(this.last)) {
          if (!this.has_by_data("BYSETPOS") ||
              this.check_set_position(++setpos) ||
              this.check_set_position(setpos - setpos_total - 1)) {

            data_valid = 1;
            break;
          }
        }
      }

      if (day > daysInMonth) {
        this.last.day = 1;
        this.increment_month();

        if (this.is_day_in_byday(this.last)) {
          if (!this.has_by_data("BYSETPOS") || this.check_set_position(1)) {
            data_valid = 1;
          }
        } else {
          data_valid = 0;
        }
      }
    } else if (this.has_by_data("BYMONTHDAY")) {
      this.by_indices.BYMONTHDAY++;

      if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
        this.by_indices.BYMONTHDAY = 0;
        this.increment_month();
        if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
          return 0;
        }
      }

      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);
      let day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];

      if (day < 0) {
        day = daysInMonth + day + 1;
      }

      if (day > daysInMonth) {
        this.last.day = 1;
        data_valid = this.is_day_in_byday(this.last);
      } else {
        this.last.day = day;
      }
    } else {
      this.increment_month();
      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);
      if (this.by_data.BYMONTHDAY[0] > daysInMonth) {
        data_valid = 0;
      } else {
        this.last.day = this.by_data.BYMONTHDAY[0];
      }
    }

    return data_valid;
  }

  next_weekday_by_week() {
    let end_of_data = 0;

    if (this.next_hour() == 0) {
      return end_of_data;
    }

    if (!this.has_by_data("BYDAY")) {
      return 1;
    }

    for (;;) {
      let tt = new Time();
      this.by_indices.BYDAY++;

      if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {
        this.by_indices.BYDAY = 0;
        end_of_data = 1;
      }

      let coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];
      let parts = this.ruleDayOfWeek(coded_day);
      let dow = parts[1];

      dow -= this.rule.wkst;

      if (dow < 0) {
        dow += 7;
      }

      tt.year = this.last.year;
      tt.month = this.last.month;
      tt.day = this.last.day;

      let startOfWeek = tt.startDoyWeek(this.rule.wkst);

      if (dow + startOfWeek < 1) {
        // The selected date is in the previous year
        if (!end_of_data) {
          continue;
        }
      }

      let next = Time.fromDayOfYear(startOfWeek + dow, this.last.year);

      /**
       * The normalization horrors below are due to
       * the fact that when the year/month/day changes
       * it can effect the other operations that come after.
       */
      this.last.year = next.year;
      this.last.month = next.month;
      this.last.day = next.day;

      return end_of_data;
    }
  }

  next_year() {
    if (this.next_hour() == 0) {
      return 0;
    }

    if (this.days.length == 0 || ++this.days_index == this.days.length) {
      this.days_index = 0;
      this.increment_year(this.rule.interval);
      if (this.has_by_data("BYMONTHDAY")) {
        this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(
          this.last.year,
          this.last.month,
          this.rule.parts.BYMONTHDAY
        );
      }
      this.expand_year_days(this.last.year);
      if (this.days.length == 0) {
        return 0;
      }
    }

    return this._nextByYearDay();
  }

  _nextByYearDay() {
    let doy = this.days[this.days_index];
    let year = this.last.year;

    if (Math.abs(doy) == 366 && !Time.isLeapYear(this.last.year)) {
      return 0;
    }

    if (doy < 1) {
        // Time.fromDayOfYear(doy, year) indexes relative to the
        // start of the given year. That is different from the
        // semantics of BYYEARDAY where negative indexes are an
        // offset from the end of the given year.
        doy += 1;
        year += 1;
    }
    let next = Time.fromDayOfYear(doy, year);
    this.last.day = next.day;
    this.last.month = next.month;

    return 1;
  }

  /**
   * @param dow (eg: '1TU', '-1MO')
   * @param {weekDay=} aWeekStart The week start weekday
   * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart
   */
  ruleDayOfWeek(dow, aWeekStart) {
    let matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
    if (matches) {
      let pos = parseInt(matches[1] || 0, 10);
      dow = Recur.icalDayToNumericDay(matches[2], aWeekStart);
      return [pos, dow];
    } else {
      return [0, 0];
    }
  }

  next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {
    let has_by_rule = (aRuleType in this.by_data);
    let this_freq = (this.rule.freq == aInterval);
    let end_of_data = 0;

    if (aPreviousIncr && this[aPreviousIncr]() == 0) {
      return end_of_data;
    }

    if (has_by_rule) {
      this.by_indices[aRuleType]++;
      let dta = this.by_data[aRuleType];

      if (this.by_indices[aRuleType] == dta.length) {
        this.by_indices[aRuleType] = 0;
        end_of_data = 1;
      }
      this.last[aDateAttr] = dta[this.by_indices[aRuleType]];
    } else if (this_freq) {
      this["increment_" + aDateAttr](this.rule.interval);
    }

    if (has_by_rule && end_of_data && this_freq) {
      this["increment_" + aFollowingAttr](1);
    }

    return end_of_data;
  }

  increment_monthday(inc) {
    for (let i = 0; i < inc; i++) {
      let daysInMonth = Time.daysInMonth(this.last.month, this.last.year);
      this.last.day++;

      if (this.last.day > daysInMonth) {
        this.last.day -= daysInMonth;
        this.increment_month();
      }
    }
  }

  increment_month() {
    this.last.day = 1;
    if (this.has_by_data("BYMONTH")) {
      this.by_indices.BYMONTH++;

      if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {
        this.by_indices.BYMONTH = 0;
        this.increment_year(1);
      }

      this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];
    } else {
      if (this.rule.freq == "MONTHLY") {
        this.last.month += this.rule.interval;
      } else {
        this.last.month++;
      }

      this.last.month--;
      let years = trunc(this.last.month / 12);
      this.last.month %= 12;
      this.last.month++;

      if (years != 0) {
        this.increment_year(years);
      }
    }

    if (this.has_by_data("BYMONTHDAY")) {
      this.by_data.BYMONTHDAY = this.normalizeByMonthDayRules(
        this.last.year,
        this.last.month,
        this.rule.parts.BYMONTHDAY
      );
    }
  }

  increment_year(inc) {
    // Don't jump into the next month if this.last is Feb 29.
    this.last.day = 1;
    this.last.year += inc;
  }

  increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {
    this.last[aDateAttr] += inc;
    let nextunit = trunc(this.last[aDateAttr] / aFactor);
    this.last[aDateAttr] %= aFactor;
    if (nextunit != 0) {
      this["increment_" + aNextIncrement](nextunit);
    }
  }

  has_by_data(aRuleType) {
    return (aRuleType in this.rule.parts);
  }

  expand_year_days(aYear) {
    let t = new Time();
    this.days = [];

    // We need our own copy with a few keys set
    let parts = {};
    let rules = ["BYDAY", "BYWEEKNO", "BYMONTHDAY", "BYMONTH", "BYYEARDAY"];
    for (let part of rules) {
      if (part in this.rule.parts) {
        parts[part] = this.rule.parts[part];
      }
    }

    if ("BYMONTH" in parts && "BYWEEKNO" in parts) {
      let valid = 1;
      let validWeeks = {};
      t.year = aYear;
      t.isDate = true;

      for (let monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {
        let month = this.by_data.BYMONTH[monthIdx];
        t.month = month;
        t.day = 1;
        let first_week = t.weekNumber(this.rule.wkst);
        t.day = Time.daysInMonth(month, aYear);
        let last_week = t.weekNumber(this.rule.wkst);
        for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {
          validWeeks[monthIdx] = 1;
        }
      }

      for (let weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {
        let weekno = this.by_data.BYWEEKNO[weekIdx];
        if (weekno < 52) {
          valid &= validWeeks[weekIdx];
        } else {
          valid = 0;
        }
      }

      if (valid) {
        delete parts.BYMONTH;
      } else {
        delete parts.BYWEEKNO;
      }
    }

    let partCount = Object.keys(parts).length;

    if (partCount == 0) {
      let t1 = this.dtstart.clone();
      t1.year = this.last.year;
      this.days.push(t1.dayOfYear());
    } else if (partCount == 1 && "BYMONTH" in parts) {
      for (let month of this.by_data.BYMONTH) {
        let t2 = this.dtstart.clone();
        t2.year = aYear;
        t2.month = month;
        t2.isDate = true;
        this.days.push(t2.dayOfYear());
      }
    } else if (partCount == 1 && "BYMONTHDAY" in parts) {
      for (let monthday of this.by_data.BYMONTHDAY) {
        let t3 = this.dtstart.clone();
        if (monthday < 0) {
          let daysInMonth = Time.daysInMonth(t3.month, aYear);
          monthday = monthday + daysInMonth + 1;
        }
        t3.day = monthday;
        t3.year = aYear;
        t3.isDate = true;
        this.days.push(t3.dayOfYear());
      }
    } else if (partCount == 2 &&
               "BYMONTHDAY" in parts &&
               "BYMONTH" in parts) {
      for (let month of this.by_data.BYMONTH) {
        let daysInMonth = Time.daysInMonth(month, aYear);
        for (let monthday of this.by_data.BYMONTHDAY) {
          if (monthday < 0) {
            monthday = monthday + daysInMonth + 1;
          }
          t.day = monthday;
          t.month = month;
          t.year = aYear;
          t.isDate = true;

          this.days.push(t.dayOfYear());
        }
      }
    } else if (partCount == 1 && "BYWEEKNO" in parts) ; else if (partCount == 2 &&
               "BYWEEKNO" in parts &&
               "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYDAY" in parts) {
      this.days = this.days.concat(this.expand_by_day(aYear));
    } else if (partCount == 2 && "BYDAY" in parts && "BYMONTH" in parts) {
      for (let month of this.by_data.BYMONTH) {
        let daysInMonth = Time.daysInMonth(month, aYear);

        t.year = aYear;
        t.month = month;
        t.day = 1;
        t.isDate = true;

        let first_dow = t.dayOfWeek();
        let doy_offset = t.dayOfYear() - 1;

        t.day = daysInMonth;
        let last_dow = t.dayOfWeek();

        if (this.has_by_data("BYSETPOS")) {
          let by_month_day = [];
          for (let day = 1; day <= daysInMonth; day++) {
            t.day = day;
            if (this.is_day_in_byday(t)) {
              by_month_day.push(day);
            }
          }

          for (let spIndex = 0; spIndex < by_month_day.length; spIndex++) {
            if (this.check_set_position(spIndex + 1) ||
                this.check_set_position(spIndex - by_month_day.length)) {
              this.days.push(doy_offset + by_month_day[spIndex]);
            }
          }
        } else {
          for (let coded_day of this.by_data.BYDAY) {
            let bydayParts = this.ruleDayOfWeek(coded_day);
            let pos = bydayParts[0];
            let dow = bydayParts[1];
            let month_day;

            let first_matching_day = ((dow + 7 - first_dow) % 7) + 1;
            let last_matching_day = daysInMonth - ((last_dow + 7 - dow) % 7);

            if (pos == 0) {
              for (let day = first_matching_day; day <= daysInMonth; day += 7) {
                this.days.push(doy_offset + day);
              }
            } else if (pos > 0) {
              month_day = first_matching_day + (pos - 1) * 7;

              if (month_day <= daysInMonth) {
                this.days.push(doy_offset + month_day);
              }
            } else {
              month_day = last_matching_day + (pos + 1) * 7;

              if (month_day > 0) {
                this.days.push(doy_offset + month_day);
              }
            }
          }
        }
      }
      // Return dates in order of occurrence (1,2,3,...) instead
      // of by groups of weekdays (1,8,15,...,2,9,16,...).
      this.days.sort(function(a, b) { return a - b; }); // Comparator function allows to sort numbers.
    } else if (partCount == 2 && "BYDAY" in parts && "BYMONTHDAY" in parts) {
      let expandedDays = this.expand_by_day(aYear);

      for (let day of expandedDays) {
        let tt = Time.fromDayOfYear(day, aYear);
        if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
          this.days.push(day);
        }
      }
    } else if (partCount == 3 &&
               "BYDAY" in parts &&
               "BYMONTHDAY" in parts &&
               "BYMONTH" in parts) {
      let expandedDays = this.expand_by_day(aYear);

      for (let day of expandedDays) {
        let tt = Time.fromDayOfYear(day, aYear);

        if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 &&
            this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
          this.days.push(day);
        }
      }
    } else if (partCount == 2 && "BYDAY" in parts && "BYWEEKNO" in parts) {
      let expandedDays = this.expand_by_day(aYear);

      for (let day of expandedDays) {
        let tt = Time.fromDayOfYear(day, aYear);
        let weekno = tt.weekNumber(this.rule.wkst);

        if (this.by_data.BYWEEKNO.indexOf(weekno)) {
          this.days.push(day);
        }
      }
    } else if (partCount == 3 &&
               "BYDAY" in parts &&
               "BYWEEKNO" in parts &&
               "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYYEARDAY" in parts) {
      this.days = this.days.concat(this.by_data.BYYEARDAY);
    } else if (partCount == 2 && "BYYEARDAY" in parts && "BYDAY" in parts) {
      let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;
      let expandedDays = new Set(this.expand_by_day(aYear));

      for (let doy of this.by_data.BYYEARDAY) {
        if (doy < 0) {
          doy += daysInYear + 1;
        }

        if (expandedDays.has(doy)) {
          this.days.push(doy);
        }
      }
    } else {
      this.days = [];
    }

    let daysInYear = Time.isLeapYear(aYear) ? 366 : 365;
    this.days.sort((a, b) => {
      if (a < 0) a += daysInYear + 1;
      if (b < 0) b += daysInYear + 1;
      return a - b;
    });

    return 0;
  }

  expand_by_day(aYear) {

    let days_list = [];
    let tmp = this.last.clone();

    tmp.year = aYear;
    tmp.month = 1;
    tmp.day = 1;
    tmp.isDate = true;

    let start_dow = tmp.dayOfWeek();

    tmp.month = 12;
    tmp.day = 31;
    tmp.isDate = true;

    let end_dow = tmp.dayOfWeek();
    let end_year_day = tmp.dayOfYear();

    for (let day of this.by_data.BYDAY) {
      let parts = this.ruleDayOfWeek(day);
      let pos = parts[0];
      let dow = parts[1];

      if (pos == 0) {
        let tmp_start_doy = ((dow + 7 - start_dow) % 7) + 1;

        for (let doy = tmp_start_doy; doy <= end_year_day; doy += 7) {
          days_list.push(doy);
        }

      } else if (pos > 0) {
        let first;
        if (dow >= start_dow) {
          first = dow - start_dow + 1;
        } else {
          first = dow - start_dow + 8;
        }

        days_list.push(first + (pos - 1) * 7);
      } else {
        let last;
        pos = -pos;

        if (dow <= end_dow) {
          last = end_year_day - end_dow + dow;
        } else {
          last = end_year_day - end_dow + dow - 7;
        }

        days_list.push(last - (pos - 1) * 7);
      }
    }
    return days_list;
  }

  is_day_in_byday(tt) {
    if (this.by_data.BYDAY) {
      for (let day of this.by_data.BYDAY) {
        let parts = this.ruleDayOfWeek(day);
        let pos = parts[0];
        let dow = parts[1];
        let this_dow = tt.dayOfWeek();

        if ((pos == 0 && dow == this_dow) ||
            (tt.nthWeekDay(dow, pos) == tt.day)) {
          return 1;
        }
      }
    }

    return 0;
  }

  /**
   * Checks if given value is in BYSETPOS.
   *
   * @private
   * @param {Numeric} aPos position to check for.
   * @return {Boolean} false unless BYSETPOS rules exist
   *                   and the given value is present in rules.
   */
  check_set_position(aPos) {
    if (this.has_by_data('BYSETPOS')) {
      let idx = this.by_data.BYSETPOS.indexOf(aPos);
      // negative numbers are not false-y
      return idx !== -1;
    }
    return false;
  }

  sort_byday_rules(aRules) {
    for (let i = 0; i < aRules.length; i++) {
      for (let j = 0; j < i; j++) {
        let one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];
        let two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];

        if (one > two) {
          let tmp = aRules[i];
          aRules[i] = aRules[j];
          aRules[j] = tmp;
        }
      }
    }
  }

  check_contract_restriction(aRuleType, v) {
    let indexMapValue = RecurIterator._indexMap[aRuleType];
    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];
    let pass = false;

    if (aRuleType in this.by_data &&
        ruleMapValue == RecurIterator.CONTRACT) {

      let ruleType = this.by_data[aRuleType];

      for (let bydata of ruleType) {
        if (bydata == v) {
          pass = true;
          break;
        }
      }
    } else {
      // Not a contracting byrule or has no data, test passes
      pass = true;
    }
    return pass;
  }

  check_contracting_rules() {
    let dow = this.last.dayOfWeek();
    let weekNo = this.last.weekNumber(this.rule.wkst);
    let doy = this.last.dayOfYear();

    return (this.check_contract_restriction("BYSECOND", this.last.second) &&
            this.check_contract_restriction("BYMINUTE", this.last.minute) &&
            this.check_contract_restriction("BYHOUR", this.last.hour) &&
            this.check_contract_restriction("BYDAY", Recur.numericDayToIcalDay(dow)) &&
            this.check_contract_restriction("BYWEEKNO", weekNo) &&
            this.check_contract_restriction("BYMONTHDAY", this.last.day) &&
            this.check_contract_restriction("BYMONTH", this.last.month) &&
            this.check_contract_restriction("BYYEARDAY", doy));
  }

  setup_defaults(aRuleType, req, deftime) {
    let indexMapValue = RecurIterator._indexMap[aRuleType];
    let ruleMapValue = RecurIterator._expandMap[this.rule.freq][indexMapValue];

    if (ruleMapValue != RecurIterator.CONTRACT) {
      if (!(aRuleType in this.by_data)) {
        this.by_data[aRuleType] = [deftime];
      }
      if (this.rule.freq != req) {
        return this.by_data[aRuleType][0];
      }
    }
    return deftime;
  }

  /**
   * Convert iterator into a serialize-able object.  Will preserve current
   * iteration sequence to ensure the seamless continuation of the recurrence
   * rule.
   * @return {Object}
   */
  toJSON() {
    let result = Object.create(null);

    result.initialized = this.initialized;
    result.rule = this.rule.toJSON();
    result.dtstart = this.dtstart.toJSON();
    result.by_data = this.by_data;
    result.days = this.days;
    result.last = this.last.toJSON();
    result.by_indices = this.by_indices;
    result.occurrence_number = this.occurrence_number;

    return result;
  }
}

/**
 * An error indicating that a recurrence rule is invalid and produces no
 * occurrences.
 *
 * @extends {Error}
 * @class
 */
class InvalidRecurrenceRuleError extends Error {
  constructor() {
    super("Recurrence rule has no valid occurrences");
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 *
 * @ignore
 * @typedef {import("./types.js").weekDay} weekDay
 * Imports the 'weekDay' type from the "types.js" module
 * @typedef {import("./types.js").frequencyValues} frequencyValues
 * Imports the 'frequencyValues' type from the "types.js" module
 */

const VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;
const VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;
const DOW_MAP = {
  SU: Time.SUNDAY,
  MO: Time.MONDAY,
  TU: Time.TUESDAY,
  WE: Time.WEDNESDAY,
  TH: Time.THURSDAY,
  FR: Time.FRIDAY,
  SA: Time.SATURDAY
};

const REVERSE_DOW_MAP = Object.fromEntries(Object.entries(DOW_MAP).map(entry => entry.reverse()));

const ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY',
                      'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];

/**
 * This class represents the "recur" value type, used for example by RRULE. It provides methods to
 * calculate occurrences among others.
 *
 * @memberof ICAL
 */
class Recur {
  /**
   * Creates a new {@link ICAL.Recur} instance from the passed string.
   *
   * @param {String} string         The string to parse
   * @return {Recur}                The created recurrence instance
   */
  static fromString(string) {
    let data = this._stringToData(string, false);
    return new Recur(data);
  }

  /**
   * Creates a new {@link ICAL.Recur} instance using members from the passed
   * data object.
   *
   * @param {Object} aData                              An object with members of the recurrence
   * @param {frequencyValues=} aData.freq               The frequency value
   * @param {Number=} aData.interval                    The INTERVAL value
   * @param {weekDay=} aData.wkst                       The week start value
   * @param {Time=} aData.until                         The end of the recurrence set
   * @param {Number=} aData.count                       The number of occurrences
   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part
   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part
   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part
   * @param {Array.<String>=} aData.byday               The BYDAY values
   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part
   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part
   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part
   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part
   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part
   */
  static fromData(aData) {
    return new Recur(aData);
  }

  /**
   * Converts a recurrence string to a data object, suitable for the fromData
   * method.
   *
   * @private
   * @param {String} string     The string to parse
   * @param {Boolean} fmtIcal   If true, the string is considered to be an
   *                              iCalendar string
   * @return {Recur}            The recurrence instance
   */
  static _stringToData(string, fmtIcal) {
    let dict = Object.create(null);

    // split is slower in FF but fast enough.
    // v8 however this is faster then manual split?
    let values = string.split(';');
    let len = values.length;

    for (let i = 0; i < len; i++) {
      let parts = values[i].split('=');
      let ucname = parts[0].toUpperCase();
      let lcname = parts[0].toLowerCase();
      let name = (fmtIcal ? lcname : ucname);
      let value = parts[1];

      if (ucname in partDesign) {
        let partArr = value.split(',');
        let partSet = new Set();

        for (let part of partArr) {
          partSet.add(partDesign[ucname](part));
        }
        partArr = [...partSet];

        dict[name] = (partArr.length == 1 ? partArr[0] : partArr);
      } else if (ucname in optionDesign) {
        optionDesign[ucname](value, dict, fmtIcal);
      } else {
        // Don't swallow unknown values. Just set them as they are.
        dict[lcname] = value;
      }
    }

    return dict;
  }

  /**
   * Convert an ical representation of a day (SU, MO, etc..)
   * into a numeric value of that day.
   *
   * @param {String} string     The iCalendar day name
   * @param {weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {Number}           Numeric value of given day
   */
  static icalDayToNumericDay(string, aWeekStart) {
    //XXX: this is here so we can deal
    //     with possibly invalid string values.
    let firstDow = aWeekStart || Time.SUNDAY;
    return ((DOW_MAP[string] - firstDow + 7) % 7) + 1;
  }

  /**
   * Convert a numeric day value into its ical representation (SU, MO, etc..)
   *
   * @param {Number} num        Numeric value of given day
   * @param {weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {String}           The ICAL day value, e.g SU,MO,...
   */
  static numericDayToIcalDay(num, aWeekStart) {
    //XXX: this is here so we can deal with possibly invalid number values.
    //     Also, this allows consistent mapping between day numbers and day
    //     names for external users.
    let firstDow = aWeekStart || Time.SUNDAY;
    let dow = (num + firstDow - Time.SUNDAY);
    if (dow > 7) {
      dow -= 7;
    }
    return REVERSE_DOW_MAP[dow];
  }

  /**
   * Create a new instance of the Recur class.
   *
   * @param {Object} data                               An object with members of the recurrence
   * @param {frequencyValues=} data.freq                The frequency value
   * @param {Number=} data.interval                     The INTERVAL value
   * @param {weekDay=} data.wkst                        The week start value
   * @param {Time=} data.until                          The end of the recurrence set
   * @param {Number=} data.count                        The number of occurrences
   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
   * @param {Array.<String>=} data.byday                The BYDAY values
   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
   */
  constructor(data) {
    this.wrappedJSObject = this;
    this.parts = {};

    if (data && typeof(data) === 'object') {
      this.fromData(data);
    }
  }

  /**
   * An object holding the BY-parts of the recurrence rule
   * @memberof ICAL.Recur
   * @typedef {Object} byParts
   * @property {Array.<Number>=} BYSECOND            The seconds for the BYSECOND part
   * @property {Array.<Number>=} BYMINUTE            The minutes for the BYMINUTE part
   * @property {Array.<Number>=} BYHOUR              The hours for the BYHOUR part
   * @property {Array.<String>=} BYDAY               The BYDAY values
   * @property {Array.<Number>=} BYMONTHDAY          The days for the BYMONTHDAY part
   * @property {Array.<Number>=} BYYEARDAY           The days for the BYYEARDAY part
   * @property {Array.<Number>=} BYWEEKNO            The weeks for the BYWEEKNO part
   * @property {Array.<Number>=} BYMONTH             The month for the BYMONTH part
   * @property {Array.<Number>=} BYSETPOS            The positionals for the BYSETPOS part
   */

  /**
   * An object holding the BY-parts of the recurrence rule
   * @type {byParts}
   */
  parts = null;

  /**
   * The interval value for the recurrence rule.
   * @type {Number}
   */
  interval = 1;

  /**
   * The week start day
   *
   * @type {weekDay}
   * @default ICAL.Time.MONDAY
   */
  wkst = Time.MONDAY;

  /**
   * The end of the recurrence
   * @type {?Time}
   */
  until = null;

  /**
   * The maximum number of occurrences
   * @type {?Number}
   */
  count = null;

  /**
   * The frequency value.
   * @type {frequencyValues}
   */
  freq = null;

  /**
   * The class identifier.
   * @constant
   * @type {String}
   * @default "icalrecur"
   */
  icalclass = "icalrecur";

  /**
   * The type name, to be used in the jCal object.
   * @constant
   * @type {String}
   * @default "recur"
   */
  icaltype = "recur";

  /**
   * Create a new iterator for this recurrence rule. The passed start date
   * must be the start date of the event, not the start of the range to
   * search in.
   *
   * @example
   * let recur = comp.getFirstPropertyValue('rrule');
   * let dtstart = comp.getFirstPropertyValue('dtstart');
   * let iter = recur.iterator(dtstart);
   * for (let next = iter.next(); next; next = iter.next()) {
   *   if (next.compare(rangeStart) < 0) {
   *     continue;
   *   }
   *   console.log(next.toString());
   * }
   *
   * @param {Time} aStart        The item's start date
   * @return {RecurIterator}     The recurrence iterator
   */
  iterator(aStart) {
    return new RecurIterator({
      rule: this,
      dtstart: aStart
    });
  }

  /**
   * Returns a clone of the recurrence object.
   *
   * @return {Recur}      The cloned object
   */
  clone() {
    return new Recur(this.toJSON());
  }

  /**
   * Checks if the current rule is finite, i.e. has a count or until part.
   *
   * @return {Boolean}        True, if the rule is finite
   */
  isFinite() {
    return !!(this.count || this.until);
  }

  /**
   * Checks if the current rule has a count part, and not limited by an until
   * part.
   *
   * @return {Boolean}        True, if the rule is by count
   */
  isByCount() {
    return !!(this.count && !this.until);
  }

  /**
   * Adds a component (part) to the recurrence rule. This is not a component
   * in the sense of {@link ICAL.Component}, but a part of the recurrence
   * rule, i.e. BYMONTH.
   *
   * @param {String} aType            The name of the component part
   * @param {Array|String} aValue     The component value
   */
  addComponent(aType, aValue) {
    let ucname = aType.toUpperCase();
    if (ucname in this.parts) {
      this.parts[ucname].push(aValue);
    } else {
      this.parts[ucname] = [aValue];
    }
  }

  /**
   * Sets the component value for the given by-part.
   *
   * @param {String} aType        The component part name
   * @param {Array} aValues       The component values
   */
  setComponent(aType, aValues) {
    this.parts[aType.toUpperCase()] = aValues.slice();
  }

  /**
   * Gets (a copy) of the requested component value.
   *
   * @param {String} aType        The component part name
   * @return {Array}              The component part value
   */
  getComponent(aType) {
    let ucname = aType.toUpperCase();
    return (ucname in this.parts ? this.parts[ucname].slice() : []);
  }

  /**
   * Retrieves the next occurrence after the given recurrence id. See the
   * guide on {@tutorial terminology} for more details.
   *
   * NOTE: Currently, this method iterates all occurrences from the start
   * date. It should not be called in a loop for performance reasons. If you
   * would like to get more than one occurrence, you can iterate the
   * occurrences manually, see the example on the
   * {@link ICAL.Recur#iterator iterator} method.
   *
   * @param {Time} aStartTime        The start of the event series
   * @param {Time} aRecurrenceId     The date of the last occurrence
   * @return {Time}                  The next occurrence after
   */
  getNextOccurrence(aStartTime, aRecurrenceId) {
    let iter = this.iterator(aStartTime);
    let next;

    do {
      next = iter.next();
    } while (next && next.compare(aRecurrenceId) <= 0);

    if (next && aRecurrenceId.zone) {
      next.zone = aRecurrenceId.zone;
    }

    return next;
  }

  /**
   * Sets up the current instance using members from the passed data object.
   *
   * @param {Object} data                               An object with members of the recurrence
   * @param {frequencyValues=} data.freq                The frequency value
   * @param {Number=} data.interval                     The INTERVAL value
   * @param {weekDay=} data.wkst                        The week start value
   * @param {Time=} data.until                          The end of the recurrence set
   * @param {Number=} data.count                        The number of occurrences
   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
   * @param {Array.<String>=} data.byday                The BYDAY values
   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
   */
  fromData(data) {
    for (let key in data) {
      let uckey = key.toUpperCase();

      if (uckey in partDesign) {
        if (Array.isArray(data[key])) {
          this.parts[uckey] = data[key];
        } else {
          this.parts[uckey] = [data[key]];
        }
      } else {
        this[key] = data[key];
      }
    }

    if (this.interval && typeof this.interval != "number") {
      optionDesign.INTERVAL(this.interval, this);
    }

    if (this.wkst && typeof this.wkst != "number") {
      this.wkst = Recur.icalDayToNumericDay(this.wkst);
    }

    if (this.until && !(this.until instanceof Time)) {
      this.until = Time.fromString(this.until);
    }
  }

  /**
   * The jCal representation of this recurrence type.
   * @return {Object}
   */
  toJSON() {
    let res = Object.create(null);
    res.freq = this.freq;

    if (this.count) {
      res.count = this.count;
    }

    if (this.interval > 1) {
      res.interval = this.interval;
    }

    for (let [k, kparts] of Object.entries(this.parts)) {
      if (Array.isArray(kparts) && kparts.length == 1) {
        res[k.toLowerCase()] = kparts[0];
      } else {
        res[k.toLowerCase()] = clone(kparts);
      }
    }

    if (this.until) {
      res.until = this.until.toString();
    }
    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {
      res.wkst = Recur.numericDayToIcalDay(this.wkst);
    }
    return res;
  }

  /**
   * The string representation of this recurrence rule.
   * @return {String}
   */
  toString() {
    // TODO retain order
    let str = "FREQ=" + this.freq;
    if (this.count) {
      str += ";COUNT=" + this.count;
    }
    if (this.interval > 1) {
      str += ";INTERVAL=" + this.interval;
    }
    for (let [k, v] of Object.entries(this.parts)) {
      str += ";" + k + "=" + v;
    }
    if (this.until) {
      str += ';UNTIL=' + this.until.toICALString();
    }
    if ('wkst' in this && this.wkst !== Time.DEFAULT_WEEK_START) {
      str += ';WKST=' + Recur.numericDayToIcalDay(this.wkst);
    }
    return str;
  }
}

function parseNumericValue(type, min, max, value) {
  let result = value;

  if (value[0] === '+') {
    result = value.slice(1);
  }

  result = strictParseInt(result);

  if (min !== undefined && value < min) {
    throw new Error(
      type + ': invalid value "' + value + '" must be > ' + min
    );
  }

  if (max !== undefined && value > max) {
    throw new Error(
      type + ': invalid value "' + value + '" must be < ' + min
    );
  }

  return result;
}

const optionDesign = {
  FREQ: function(value, dict, fmtIcal) {
    // yes this is actually equal or faster then regex.
    // upside here is we can enumerate the valid values.
    if (ALLOWED_FREQ.indexOf(value) !== -1) {
      dict.freq = value;
    } else {
      throw new Error(
        'invalid frequency "' + value + '" expected: "' +
        ALLOWED_FREQ.join(', ') + '"'
      );
    }
  },

  COUNT: function(value, dict, fmtIcal) {
    dict.count = strictParseInt(value);
  },

  INTERVAL: function(value, dict, fmtIcal) {
    dict.interval = strictParseInt(value);
    if (dict.interval < 1) {
      // 0 or negative values are not allowed, some engines seem to generate
      // it though. Assume 1 instead.
      dict.interval = 1;
    }
  },

  UNTIL: function(value, dict, fmtIcal) {
    if (value.length > 10) {
      dict.until = design.icalendar.value['date-time'].fromICAL(value);
    } else {
      dict.until = design.icalendar.value.date.fromICAL(value);
    }
    if (!fmtIcal) {
      dict.until = Time.fromString(dict.until);
    }
  },

  WKST: function(value, dict, fmtIcal) {
    if (VALID_DAY_NAMES.test(value)) {
      dict.wkst = Recur.icalDayToNumericDay(value);
    } else {
      throw new Error('invalid WKST value "' + value + '"');
    }
  }
};

const partDesign = {
  BYSECOND: parseNumericValue.bind(undefined, 'BYSECOND', 0, 60),
  BYMINUTE: parseNumericValue.bind(undefined, 'BYMINUTE', 0, 59),
  BYHOUR: parseNumericValue.bind(undefined, 'BYHOUR', 0, 23),
  BYDAY: function(value) {
    if (VALID_BYDAY_PART.test(value)) {
      return value;
    } else {
      throw new Error('invalid BYDAY value "' + value + '"');
    }
  },
  BYMONTHDAY: parseNumericValue.bind(undefined, 'BYMONTHDAY', -31, 31),
  BYYEARDAY: parseNumericValue.bind(undefined, 'BYYEARDAY', -366, 366),
  BYWEEKNO: parseNumericValue.bind(undefined, 'BYWEEKNO', -53, 53),
  BYMONTH: parseNumericValue.bind(undefined, 'BYMONTH', 1, 12),
  BYSETPOS: parseNumericValue.bind(undefined, 'BYSETPOS', -366, 366)
};

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 * @ignore
 * @typedef {import("./types.js").designSet} designSet
 * Imports the 'designSet' type from the "types.js" module
 */

/** @module ICAL.design */

const FROM_ICAL_NEWLINE = /\\\\|\\;|\\,|\\[Nn]/g;
const TO_ICAL_NEWLINE = /\\|;|,|\n/g;
const FROM_VCARD_NEWLINE = /\\\\|\\,|\\[Nn]/g;
const TO_VCARD_NEWLINE = /\\|,|\n/g;

function createTextType(fromNewline, toNewline) {
  let result = {
    matches: /.*/,

    fromICAL: function(aValue, structuredEscape) {
      return replaceNewline(aValue, fromNewline, structuredEscape);
    },

    toICAL: function(aValue, structuredEscape) {
      let regEx = toNewline;
      if (structuredEscape)
         regEx = new RegExp(regEx.source + '|' + structuredEscape, regEx.flags);
      return aValue.replace(regEx, function(str) {
        switch (str) {
        case "\\":
          return "\\\\";
        case ";":
          return "\\;";
        case ",":
          return "\\,";
        case "\n":
          return "\\n";
        /* c8 ignore next 2 */
        default:
          return str;
        }
      });
    }
  };
  return result;
}

// default types used multiple times
const DEFAULT_TYPE_TEXT = { defaultType: "text" };
const DEFAULT_TYPE_TEXT_MULTI = { defaultType: "text", multiValue: "," };
const DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: "text", structuredValue: ";" };
const DEFAULT_TYPE_INTEGER = { defaultType: "integer" };
const DEFAULT_TYPE_DATETIME_DATE = { defaultType: "date-time", allowedTypes: ["date-time", "date"] };
const DEFAULT_TYPE_DATETIME = { defaultType: "date-time" };
const DEFAULT_TYPE_URI = { defaultType: "uri" };
const DEFAULT_TYPE_UTCOFFSET = { defaultType: "utc-offset" };
const DEFAULT_TYPE_RECUR = { defaultType: "recur" };
const DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: "date-and-or-time", allowedTypes: ["date-time", "date", "text"] };

function replaceNewlineReplace(string) {
  switch (string) {
    case "\\\\":
      return "\\";
    case "\\;":
      return ";";
    case "\\,":
      return ",";
    case "\\n":
    case "\\N":
      return "\n";
    /* c8 ignore next 2 */
    default:
      return string;
  }
}

function replaceNewline(value, newline, structuredEscape) {
  // avoid regex when possible.
  if (value.indexOf('\\') === -1) {
    return value;
  }
  if (structuredEscape)
     newline = new RegExp(newline.source + '|\\\\' + structuredEscape, newline.flags);
  return value.replace(newline, replaceNewlineReplace);
}

let commonProperties = {
  "categories": DEFAULT_TYPE_TEXT_MULTI,
  "url": DEFAULT_TYPE_URI,
  "version": DEFAULT_TYPE_TEXT,
  "uid": DEFAULT_TYPE_TEXT
};

let commonValues = {
  "boolean": {
    values: ["TRUE", "FALSE"],

    fromICAL: function(aValue) {
      switch (aValue) {
        case 'TRUE':
          return true;
        case 'FALSE':
          return false;
        default:
          //TODO: parser warning
          return false;
      }
    },

    toICAL: function(aValue) {
      if (aValue) {
        return 'TRUE';
      }
      return 'FALSE';
    }

  },
  float: {
    matches: /^[+-]?\d+\.\d+$/,

    fromICAL: function(aValue) {
      let parsed = parseFloat(aValue);
      if (isStrictlyNaN(parsed)) {
        // TODO: parser warning
        return 0.0;
      }
      return parsed;
    },

    toICAL: function(aValue) {
      return String(aValue);
    }
  },
  integer: {
    fromICAL: function(aValue) {
      let parsed = parseInt(aValue);
      if (isStrictlyNaN(parsed)) {
        return 0;
      }
      return parsed;
    },

    toICAL: function(aValue) {
      return String(aValue);
    }
  },
  "utc-offset": {
    toICAL: function(aValue) {
      if (aValue.length < 7) {
        // no seconds
        // -0500
        return aValue.slice(0, 3) +
               aValue.slice(4, 6);
      } else {
        // seconds
        // -050000
        return aValue.slice(0, 3) +
               aValue.slice(4, 6) +
               aValue.slice(7, 9);
      }
    },

    fromICAL: function(aValue) {
      if (aValue.length < 6) {
        // no seconds
        // -05:00
        return aValue.slice(0, 3) + ':' +
               aValue.slice(3, 5);
      } else {
        // seconds
        // -05:00:00
        return aValue.slice(0, 3) + ':' +
               aValue.slice(3, 5) + ':' +
               aValue.slice(5, 7);
      }
    },

    decorate: function(aValue) {
      return UtcOffset.fromString(aValue);
    },

    undecorate: function(aValue) {
      return aValue.toString();
    }
  }
};

let icalParams = {
  // Although the syntax is DQUOTE uri DQUOTE, I don't think we should
  // enforce anything aside from it being a valid content line.
  //
  // At least some params require - if multi values are used - DQUOTEs
  // for each of its values - e.g. delegated-from="uri1","uri2"
  // To indicate this, I introduced the new k/v pair
  // multiValueSeparateDQuote: true
  //
  // "ALTREP": { ... },

  // CN just wants a param-value
  // "CN": { ... }

  "cutype": {
    values: ["INDIVIDUAL", "GROUP", "RESOURCE", "ROOM", "UNKNOWN"],
    allowXName: true,
    allowIanaToken: true
  },

  "delegated-from": {
    valueType: "cal-address",
    multiValue: ",",
    multiValueSeparateDQuote: true
  },
  "delegated-to": {
    valueType: "cal-address",
    multiValue: ",",
    multiValueSeparateDQuote: true
  },
  // "DIR": { ... }, // See ALTREP
  "encoding": {
    values: ["8BIT", "BASE64"]
  },
  // "FMTTYPE": { ... }, // See ALTREP
  "fbtype": {
    values: ["FREE", "BUSY", "BUSY-UNAVAILABLE", "BUSY-TENTATIVE"],
    allowXName: true,
    allowIanaToken: true
  },
  // "LANGUAGE": { ... }, // See ALTREP
  "member": {
    valueType: "cal-address",
    multiValue: ",",
    multiValueSeparateDQuote: true
  },
  "partstat": {
    // TODO These values are actually different per-component
    values: ["NEEDS-ACTION", "ACCEPTED", "DECLINED", "TENTATIVE",
             "DELEGATED", "COMPLETED", "IN-PROCESS"],
    allowXName: true,
    allowIanaToken: true
  },
  "range": {
    values: ["THISANDFUTURE"]
  },
  "related": {
    values: ["START", "END"]
  },
  "reltype": {
    values: ["PARENT", "CHILD", "SIBLING"],
    allowXName: true,
    allowIanaToken: true
  },
  "role": {
    values: ["REQ-PARTICIPANT", "CHAIR",
             "OPT-PARTICIPANT", "NON-PARTICIPANT"],
    allowXName: true,
    allowIanaToken: true
  },
  "rsvp": {
    values: ["TRUE", "FALSE"]
  },
  "sent-by": {
    valueType: "cal-address"
  },
  "tzid": {
    matches: /^\//
  },
  "value": {
    // since the value here is a 'type' lowercase is used.
    values: ["binary", "boolean", "cal-address", "date", "date-time",
             "duration", "float", "integer", "period", "recur", "text",
             "time", "uri", "utc-offset"],
    allowXName: true,
    allowIanaToken: true
  }
};

// When adding a value here, be sure to add it to the parameter types!
const icalValues = extend(commonValues, {
  text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),

  uri: {
    // TODO
    /* ... */
  },

  "binary": {
    decorate: function(aString) {
      return Binary.fromString(aString);
    },

    undecorate: function(aBinary) {
      return aBinary.toString();
    }
  },
  "cal-address": {
    // needs to be an uri
  },
  "date": {
    decorate: function(aValue, aProp) {
      {
        return Time.fromDateString(aValue, aProp);
      }
    },

    /**
     * undecorates a time object.
     */
    undecorate: function(aValue) {
      return aValue.toString();
    },

    fromICAL: function(aValue) {
      // from: 20120901
      // to: 2012-09-01
      {
        return aValue.slice(0, 4) + '-' +
               aValue.slice(4, 6) + '-' +
               aValue.slice(6, 8);
      }
    },

    toICAL: function(aValue) {
      // from: 2012-09-01
      // to: 20120901
      let len = aValue.length;

      if (len == 10) {
        return aValue.slice(0, 4) +
               aValue.slice(5, 7) +
               aValue.slice(8, 10);
      } else if (len >= 19) {
        return icalValues["date-time"].toICAL(aValue);
      } else {
        //TODO: serialize warning?
        return aValue;
      }

    }
  },
  "date-time": {
    fromICAL: function(aValue) {
      // from: 20120901T130000
      // to: 2012-09-01T13:00:00
      {
        let result = aValue.slice(0, 4) + '-' +
                     aValue.slice(4, 6) + '-' +
                     aValue.slice(6, 8) + 'T' +
                     aValue.slice(9, 11) + ':' +
                     aValue.slice(11, 13) + ':' +
                     aValue.slice(13, 15);

        if (aValue[15] && aValue[15] === 'Z') {
          result += 'Z';
        }

        return result;
      }
    },

    toICAL: function(aValue) {
      // from: 2012-09-01T13:00:00
      // to: 20120901T130000
      let len = aValue.length;

      if (len >= 19) {
        let result = aValue.slice(0, 4) +
                     aValue.slice(5, 7) +
                     // grab the (DDTHH) segment
                     aValue.slice(8, 13) +
                     // MM
                     aValue.slice(14, 16) +
                     // SS
                     aValue.slice(17, 19);

        if (aValue[19] && aValue[19] === 'Z') {
          result += 'Z';
        }
        return result;
      } else {
        // TODO: error
        return aValue;
      }
    },

    decorate: function(aValue, aProp) {
      {
        return Time.fromDateTimeString(aValue, aProp);
      }
    },

    undecorate: function(aValue) {
      return aValue.toString();
    }
  },
  duration: {
    decorate: function(aValue) {
      return Duration.fromString(aValue);
    },
    undecorate: function(aValue) {
      return aValue.toString();
    }
  },
  period: {
    fromICAL: function(string) {
      let parts = string.split('/');
      parts[0] = icalValues['date-time'].fromICAL(parts[0]);

      if (!Duration.isValueString(parts[1])) {
        parts[1] = icalValues['date-time'].fromICAL(parts[1]);
      }

      return parts;
    },

    toICAL: function(parts) {
      parts = parts.slice();
      {
        parts[0] = icalValues['date-time'].toICAL(parts[0]);
      }

      if (!Duration.isValueString(parts[1])) {
        {
          parts[1] = icalValues['date-time'].toICAL(parts[1]);
        }
      }

      return parts.join("/");
    },

    decorate: function(aValue, aProp) {
      return Period.fromJSON(aValue, aProp, false);
    },

    undecorate: function(aValue) {
      return aValue.toJSON();
    }
  },
  recur: {
    fromICAL: function(string) {
      return Recur._stringToData(string, true);
    },

    toICAL: function(data) {
      let str = "";
      for (let [k, val] of Object.entries(data)) {
        if (k == "until") {
          if (val.length > 10) {
            val = icalValues['date-time'].toICAL(val);
          } else {
            val = icalValues.date.toICAL(val);
          }
        } else if (k == "wkst") {
          if (typeof val === 'number') {
            val = Recur.numericDayToIcalDay(val);
          }
        } else if (Array.isArray(val)) {
          val = val.join(",");
        }
        str += k.toUpperCase() + "=" + val + ";";
      }
      return str.slice(0, Math.max(0, str.length - 1));
    },

    decorate: function decorate(aValue) {
      return Recur.fromData(aValue);
    },

    undecorate: function(aRecur) {
      return aRecur.toJSON();
    }
  },

  time: {
    fromICAL: function(aValue) {
      // from: MMHHSS(Z)?
      // to: HH:MM:SS(Z)?
      if (aValue.length < 6) {
        // TODO: parser exception?
        return aValue;
      }

      // HH::MM::SSZ?
      let result = aValue.slice(0, 2) + ':' +
                   aValue.slice(2, 4) + ':' +
                   aValue.slice(4, 6);

      if (aValue[6] === 'Z') {
        result += 'Z';
      }

      return result;
    },

    toICAL: function(aValue) {
      // from: HH:MM:SS(Z)?
      // to: MMHHSS(Z)?
      if (aValue.length < 8) {
        //TODO: error
        return aValue;
      }

      let result = aValue.slice(0, 2) +
                   aValue.slice(3, 5) +
                   aValue.slice(6, 8);

      if (aValue[8] === 'Z') {
        result += 'Z';
      }

      return result;
    }
  }
});

let icalProperties = extend(commonProperties, {

  "action": DEFAULT_TYPE_TEXT,
  "attach": { defaultType: "uri" },
  "attendee": { defaultType: "cal-address" },
  "calscale": DEFAULT_TYPE_TEXT,
  "class": DEFAULT_TYPE_TEXT,
  "comment": DEFAULT_TYPE_TEXT,
  "completed": DEFAULT_TYPE_DATETIME,
  "contact": DEFAULT_TYPE_TEXT,
  "created": DEFAULT_TYPE_DATETIME,
  "description": DEFAULT_TYPE_TEXT,
  "dtend": DEFAULT_TYPE_DATETIME_DATE,
  "dtstamp": DEFAULT_TYPE_DATETIME,
  "dtstart": DEFAULT_TYPE_DATETIME_DATE,
  "due": DEFAULT_TYPE_DATETIME_DATE,
  "duration": { defaultType: "duration" },
  "exdate": {
    defaultType: "date-time",
    allowedTypes: ["date-time", "date"],
    multiValue: ','
  },
  "exrule": DEFAULT_TYPE_RECUR,
  "freebusy": { defaultType: "period", multiValue: "," },
  "geo": { defaultType: "float", structuredValue: ";" },
  "last-modified": DEFAULT_TYPE_DATETIME,
  "location": DEFAULT_TYPE_TEXT,
  "method": DEFAULT_TYPE_TEXT,
  "organizer": { defaultType: "cal-address" },
  "percent-complete": DEFAULT_TYPE_INTEGER,
  "priority": DEFAULT_TYPE_INTEGER,
  "prodid": DEFAULT_TYPE_TEXT,
  "related-to": DEFAULT_TYPE_TEXT,
  "repeat": DEFAULT_TYPE_INTEGER,
  "rdate": {
    defaultType: "date-time",
    allowedTypes: ["date-time", "date", "period"],
    multiValue: ',',
    detectType: function(string) {
      if (string.indexOf('/') !== -1) {
        return 'period';
      }
      return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    }
  },
  "recurrence-id": DEFAULT_TYPE_DATETIME_DATE,
  "resources": DEFAULT_TYPE_TEXT_MULTI,
  "request-status": DEFAULT_TYPE_TEXT_STRUCTURED,
  "rrule": DEFAULT_TYPE_RECUR,
  "sequence": DEFAULT_TYPE_INTEGER,
  "status": DEFAULT_TYPE_TEXT,
  "summary": DEFAULT_TYPE_TEXT,
  "transp": DEFAULT_TYPE_TEXT,
  "trigger": { defaultType: "duration", allowedTypes: ["duration", "date-time"] },
  "tzoffsetfrom": DEFAULT_TYPE_UTCOFFSET,
  "tzoffsetto": DEFAULT_TYPE_UTCOFFSET,
  "tzurl": DEFAULT_TYPE_URI,
  "tzid": DEFAULT_TYPE_TEXT,
  "tzname": DEFAULT_TYPE_TEXT
});

// When adding a value here, be sure to add it to the parameter types!
const vcardValues = extend(commonValues, {
  text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
  uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),

  date: {
    decorate: function(aValue) {
      return VCardTime.fromDateAndOrTimeString(aValue, "date");
    },
    undecorate: function(aValue) {
      return aValue.toString();
    },
    fromICAL: function(aValue) {
      if (aValue.length == 8) {
        return icalValues.date.fromICAL(aValue);
      } else if (aValue[0] == '-' && aValue.length == 6) {
        return aValue.slice(0, 4) + '-' + aValue.slice(4);
      } else {
        return aValue;
      }
    },
    toICAL: function(aValue) {
      if (aValue.length == 10) {
        return icalValues.date.toICAL(aValue);
      } else if (aValue[0] == '-' && aValue.length == 7) {
        return aValue.slice(0, 4) + aValue.slice(5);
      } else {
        return aValue;
      }
    }
  },

  time: {
    decorate: function(aValue) {
      return VCardTime.fromDateAndOrTimeString("T" + aValue, "time");
    },
    undecorate: function(aValue) {
      return aValue.toString();
    },
    fromICAL: function(aValue) {
      let splitzone = vcardValues.time._splitZone(aValue, true);
      let zone = splitzone[0], value = splitzone[1];

      //console.log("SPLIT: ",splitzone);

      if (value.length == 6) {
        value = value.slice(0, 2) + ':' +
                value.slice(2, 4) + ':' +
                value.slice(4, 6);
      } else if (value.length == 4 && value[0] != '-') {
        value = value.slice(0, 2) + ':' + value.slice(2, 4);
      } else if (value.length == 5) {
        value = value.slice(0, 3) + ':' + value.slice(3, 5);
      }

      if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {
        zone = zone.slice(0, 3) + ':' + zone.slice(3);
      }

      return value + zone;
    },

    toICAL: function(aValue) {
      let splitzone = vcardValues.time._splitZone(aValue);
      let zone = splitzone[0], value = splitzone[1];

      if (value.length == 8) {
        value = value.slice(0, 2) +
                value.slice(3, 5) +
                value.slice(6, 8);
      } else if (value.length == 5 && value[0] != '-') {
        value = value.slice(0, 2) + value.slice(3, 5);
      } else if (value.length == 6) {
        value = value.slice(0, 3) + value.slice(4, 6);
      }

      if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {
        zone = zone.slice(0, 3) + zone.slice(4);
      }

      return value + zone;
    },

    _splitZone: function(aValue, isFromIcal) {
      let lastChar = aValue.length - 1;
      let signChar = aValue.length - (isFromIcal ? 5 : 6);
      let sign = aValue[signChar];
      let zone, value;

      if (aValue[lastChar] == 'Z') {
        zone = aValue[lastChar];
        value = aValue.slice(0, Math.max(0, lastChar));
      } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {
        zone = aValue.slice(signChar);
        value = aValue.slice(0, Math.max(0, signChar));
      } else {
        zone = "";
        value = aValue;
      }

      return [zone, value];
    }
  },

  "date-time": {
    decorate: function(aValue) {
      return VCardTime.fromDateAndOrTimeString(aValue, "date-time");
    },

    undecorate: function(aValue) {
      return aValue.toString();
    },

    fromICAL: function(aValue) {
      return vcardValues['date-and-or-time'].fromICAL(aValue);
    },

    toICAL: function(aValue) {
      return vcardValues['date-and-or-time'].toICAL(aValue);
    }
  },

  "date-and-or-time": {
    decorate: function(aValue) {
      return VCardTime.fromDateAndOrTimeString(aValue, "date-and-or-time");
    },

    undecorate: function(aValue) {
      return aValue.toString();
    },

    fromICAL: function(aValue) {
      let parts = aValue.split('T');
      return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') +
             (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');
    },

    toICAL: function(aValue) {
      let parts = aValue.split('T');
      return vcardValues.date.toICAL(parts[0]) +
             (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');

    }
  },
  timestamp: icalValues['date-time'],
  "language-tag": {
    matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here
  },
  "phone-number": {
    fromICAL: function(aValue) {
      return Array.from(aValue).filter(function(c) {
          return c === '\\' ? undefined : c;
        }).join('');
    },
    toICAL: function(aValue) {
      return Array.from(aValue).map(function(c) {
        return c === ',' || c === ";" ? '\\' + c : c;
      }).join('');
    }
  }
});

let vcardParams = {
  "type": {
    valueType: "text",
    multiValue: ","
  },
  "value": {
    // since the value here is a 'type' lowercase is used.
    values: ["text", "uri", "date", "time", "date-time", "date-and-or-time",
             "timestamp", "boolean", "integer", "float", "utc-offset",
             "language-tag"],
    allowXName: true,
    allowIanaToken: true
  }
};

let vcardProperties = extend(commonProperties, {
  "adr": { defaultType: "text", structuredValue: ";", multiValue: "," },
  "anniversary": DEFAULT_TYPE_DATE_ANDOR_TIME,
  "bday": DEFAULT_TYPE_DATE_ANDOR_TIME,
  "caladruri": DEFAULT_TYPE_URI,
  "caluri": DEFAULT_TYPE_URI,
  "clientpidmap": DEFAULT_TYPE_TEXT_STRUCTURED,
  "email": DEFAULT_TYPE_TEXT,
  "fburl": DEFAULT_TYPE_URI,
  "fn": DEFAULT_TYPE_TEXT,
  "gender": DEFAULT_TYPE_TEXT_STRUCTURED,
  "geo": DEFAULT_TYPE_URI,
  "impp": DEFAULT_TYPE_URI,
  "key": DEFAULT_TYPE_URI,
  "kind": DEFAULT_TYPE_TEXT,
  "lang": { defaultType: "language-tag" },
  "logo": DEFAULT_TYPE_URI,
  "member": DEFAULT_TYPE_URI,
  "n": { defaultType: "text", structuredValue: ";", multiValue: "," },
  "nickname": DEFAULT_TYPE_TEXT_MULTI,
  "note": DEFAULT_TYPE_TEXT,
  "org": { defaultType: "text", structuredValue: ";" },
  "photo": DEFAULT_TYPE_URI,
  "related": DEFAULT_TYPE_URI,
  "rev": { defaultType: "timestamp" },
  "role": DEFAULT_TYPE_TEXT,
  "sound": DEFAULT_TYPE_URI,
  "source": DEFAULT_TYPE_URI,
  "tel": { defaultType: "uri", allowedTypes: ["uri", "text"] },
  "title": DEFAULT_TYPE_TEXT,
  "tz": { defaultType: "text", allowedTypes: ["text", "utc-offset", "uri"] },
  "xml": DEFAULT_TYPE_TEXT
});

let vcard3Values = extend(commonValues, {
  binary: icalValues.binary,
  date: vcardValues.date,
  "date-time": vcardValues["date-time"],
  "phone-number": vcardValues["phone-number"],
  uri: icalValues.uri,
  text: vcardValues.text,
  time: icalValues.time,
  vcard: icalValues.text,
  "utc-offset": {
    toICAL: function(aValue) {
      return aValue.slice(0, 7);
    },

    fromICAL: function(aValue) {
      return aValue.slice(0, 7);
    },

    decorate: function(aValue) {
      return UtcOffset.fromString(aValue);
    },

    undecorate: function(aValue) {
      return aValue.toString();
    }
  }
});

let vcard3Params = {
  "type": {
    valueType: "text",
    multiValue: ","
  },
  "value": {
    // since the value here is a 'type' lowercase is used.
    values: ["text", "uri", "date", "date-time", "phone-number", "time",
             "boolean", "integer", "float", "utc-offset", "vcard", "binary"],
    allowXName: true,
    allowIanaToken: true
  }
};

let vcard3Properties = extend(commonProperties, {
  fn: DEFAULT_TYPE_TEXT,
  n: { defaultType: "text", structuredValue: ";", multiValue: "," },
  nickname: DEFAULT_TYPE_TEXT_MULTI,
  photo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
  bday: {
    defaultType: "date-time",
    allowedTypes: ["date-time", "date"],
    detectType: function(string) {
      return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    }
  },

  adr: { defaultType: "text", structuredValue: ";", multiValue: "," },
  label: DEFAULT_TYPE_TEXT,

  tel: { defaultType: "phone-number" },
  email: DEFAULT_TYPE_TEXT,
  mailer: DEFAULT_TYPE_TEXT,

  tz: { defaultType: "utc-offset", allowedTypes: ["utc-offset", "text"] },
  geo: { defaultType: "float", structuredValue: ";" },

  title: DEFAULT_TYPE_TEXT,
  role: DEFAULT_TYPE_TEXT,
  logo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
  agent: { defaultType: "vcard", allowedTypes: ["vcard", "text", "uri"] },
  org: DEFAULT_TYPE_TEXT_STRUCTURED,

  note: DEFAULT_TYPE_TEXT_MULTI,
  prodid: DEFAULT_TYPE_TEXT,
  rev: {
    defaultType: "date-time",
    allowedTypes: ["date-time", "date"],
    detectType: function(string) {
      return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    }
  },
  "sort-string": DEFAULT_TYPE_TEXT,
  sound: { defaultType: "binary", allowedTypes: ["binary", "uri"] },

  class: DEFAULT_TYPE_TEXT,
  key: { defaultType: "binary", allowedTypes: ["binary", "text"] }
});

/**
 * iCalendar design set
 * @type {designSet}
 */
let icalSet = {
  name: "ical",
  value: icalValues,
  param: icalParams,
  property: icalProperties,
  propertyGroups: false
};

/**
 * vCard 4.0 design set
 * @type {designSet}
 */
let vcardSet = {
  name: "vcard4",
  value: vcardValues,
  param: vcardParams,
  property: vcardProperties,
  propertyGroups: true
};

/**
 * vCard 3.0 design set
 * @type {designSet}
 */
let vcard3Set = {
  name: "vcard3",
  value: vcard3Values,
  param: vcard3Params,
  property: vcard3Properties,
  propertyGroups: true
};

/**
 * The design data, used by the parser to determine types for properties and
 * other metadata needed to produce correct jCard/jCal data.
 *
 * @alias ICAL.design
 * @exports module:ICAL.design
 */
const design = {
  /**
   * Can be set to false to make the parser more lenient.
   */
  strict: true,

  /**
   * The default set for new properties and components if none is specified.
   * @type {designSet}
   */
  defaultSet: icalSet,

  /**
   * The default type for unknown properties
   * @type {String}
   */
  defaultType: 'unknown',

  /**
   * Holds the design set for known top-level components
   *
   * @type {Object}
   * @property {designSet} vcard       vCard VCARD
   * @property {designSet} vevent      iCalendar VEVENT
   * @property {designSet} vtodo       iCalendar VTODO
   * @property {designSet} vjournal    iCalendar VJOURNAL
   * @property {designSet} valarm      iCalendar VALARM
   * @property {designSet} vtimezone   iCalendar VTIMEZONE
   * @property {designSet} daylight    iCalendar DAYLIGHT
   * @property {designSet} standard    iCalendar STANDARD
   *
   * @example
   * let propertyName = 'fn';
   * let componentDesign = ICAL.design.components.vcard;
   * let propertyDetails = componentDesign.property[propertyName];
   * if (propertyDetails.defaultType == 'text') {
   *   // Yep, sure is...
   * }
   */
  components: {
    vcard: vcardSet,
    vcard3: vcard3Set,
    vevent: icalSet,
    vtodo: icalSet,
    vjournal: icalSet,
    valarm: icalSet,
    vtimezone: icalSet,
    daylight: icalSet,
    standard: icalSet
  },


  /**
   * The design set for iCalendar (rfc5545/rfc7265) components.
   * @type {designSet}
   */
  icalendar: icalSet,

  /**
   * The design set for vCard (rfc6350/rfc7095) components.
   * @type {designSet}
   */
  vcard: vcardSet,

  /**
   * The design set for vCard (rfc2425/rfc2426/rfc7095) components.
   * @type {designSet}
   */
  vcard3: vcard3Set,

  /**
   * Gets the design set for the given component name.
   *
   * @param {String} componentName        The name of the component
   * @return {designSet}      The design set for the component
   */
  getDesignSet: function(componentName) {
    let isInDesign = componentName && componentName in design.components;
    return isInDesign ? design.components[componentName] : design.defaultSet;
  }
};

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 *
 * @ignore
 * @typedef {import("./types.js").designSet} designSet
 * Imports the 'designSet' type from the "types.js" module
 */

const LINE_ENDING = '\r\n';
const DEFAULT_VALUE_TYPE = 'unknown';
const RFC6868_REPLACE_MAP = { '"': "^'", "\n": "^n", "^": "^^" };

/**
 * Convert a full jCal/jCard array into a iCalendar/vCard string.
 *
 * @function ICAL.stringify
 * @variation function
 * @param {Array} jCal    The jCal/jCard document
 * @return {String}       The stringified iCalendar/vCard document
 */
function stringify(jCal) {
  if (typeof jCal[0] == "string") {
    // This is a single component
    jCal = [jCal];
  }

  let i = 0;
  let len = jCal.length;
  let result = '';

  for (; i < len; i++) {
    result += stringify.component(jCal[i]) + LINE_ENDING;
  }

  return result;
}

/**
 * Converts an jCal component array into a ICAL string.
 * Recursive will resolve sub-components.
 *
 * Exact component/property order is not saved all
 * properties will come before subcomponents.
 *
 * @function ICAL.stringify.component
 * @param {Array} component
 *        jCal/jCard fragment of a component
 * @param {designSet} designSet
 *        The design data to use for this component
 * @return {String}       The iCalendar/vCard string
 */
stringify.component = function(component, designSet) {
  let name = component[0].toUpperCase();
  let result = 'BEGIN:' + name + LINE_ENDING;

  let props = component[1];
  let propIdx = 0;
  let propLen = props.length;

  let designSetName = component[0];
  // rfc6350 requires that in vCard 4.0 the first component is the VERSION
  // component with as value 4.0, note that 3.0 does not have this requirement.
  if (designSetName === 'vcard' && component[1].length > 0 &&
          !(component[1][0][0] === "version" && component[1][0][3] === "4.0")) {
    designSetName = "vcard3";
  }
  designSet = designSet || design.getDesignSet(designSetName);

  for (; propIdx < propLen; propIdx++) {
    result += stringify.property(props[propIdx], designSet) + LINE_ENDING;
  }

  // Ignore subcomponents if none exist, e.g. in vCard.
  let comps = component[2] || [];
  let compIdx = 0;
  let compLen = comps.length;

  for (; compIdx < compLen; compIdx++) {
    result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;
  }

  result += 'END:' + name;
  return result;
};

/**
 * Converts a single jCal/jCard property to a iCalendar/vCard string.
 *
 * @function ICAL.stringify.property
 * @param {Array} property
 *        jCal/jCard property array
 * @param {designSet} designSet
 *        The design data to use for this property
 * @param {Boolean} noFold
 *        If true, the line is not folded
 * @return {String}       The iCalendar/vCard string
 */
stringify.property = function(property, designSet, noFold) {
  let name = property[0].toUpperCase();
  let jsName = property[0];
  let params = property[1];

  if (!designSet) {
    designSet = design.defaultSet;
  }

  let groupName = params.group;
  let line;
  if (designSet.propertyGroups && groupName) {
    line = groupName.toUpperCase() + "." + name;
  } else {
    line = name;
  }

  for (let [paramName, value] of Object.entries(params)) {
    if (designSet.propertyGroups && paramName == 'group') {
      continue;
    }

    let paramDesign = designSet.param[paramName];
    let multiValue = paramDesign && paramDesign.multiValue;
    if (multiValue && Array.isArray(value)) {
      value = value.map(function(val) {
        val = stringify._rfc6868Unescape(val);
        val = stringify.paramPropertyValue(val, paramDesign.multiValueSeparateDQuote);
        return val;
      });
      value = stringify.multiValue(value, multiValue, "unknown", null, designSet);
    } else {
      value = stringify._rfc6868Unescape(value);
      value = stringify.paramPropertyValue(value);
    }

    line += ';' + paramName.toUpperCase() + '=' + value;
  }

  if (property.length === 3) {
    // If there are no values, we must assume a blank value
    return line + ':';
  }

  let valueType = property[2];

  let propDetails;
  let multiValue = false;
  let structuredValue = false;
  let isDefault = false;

  if (jsName in designSet.property) {
    propDetails = designSet.property[jsName];

    if ('multiValue' in propDetails) {
      multiValue = propDetails.multiValue;
    }

    if (('structuredValue' in propDetails) && Array.isArray(property[3])) {
      structuredValue = propDetails.structuredValue;
    }

    if ('defaultType' in propDetails) {
      if (valueType === propDetails.defaultType) {
        isDefault = true;
      }
    } else {
      if (valueType === DEFAULT_VALUE_TYPE) {
        isDefault = true;
      }
    }
  } else {
    if (valueType === DEFAULT_VALUE_TYPE) {
      isDefault = true;
    }
  }

  // push the VALUE property if type is not the default
  // for the current property.
  if (!isDefault) {
    // value will never contain ;/:/, so we don't escape it here.
    line += ';VALUE=' + valueType.toUpperCase();
  }

  line += ':';

  if (multiValue && structuredValue) {
    line += stringify.multiValue(
      property[3], structuredValue, valueType, multiValue, designSet, structuredValue
    );
  } else if (multiValue) {
    line += stringify.multiValue(
      property.slice(3), multiValue, valueType, null, designSet, false
    );
  } else if (structuredValue) {
    line += stringify.multiValue(
      property[3], structuredValue, valueType, null, designSet, structuredValue
    );
  } else {
    line += stringify.value(property[3], valueType, designSet, false);
  }

  return noFold ? line : foldline(line);
};

/**
 * Handles escaping of property values that may contain:
 *
 *    COLON (:), SEMICOLON (;), or COMMA (,)
 *
 * If any of the above are present the result is wrapped
 * in double quotes.
 *
 * @function ICAL.stringify.paramPropertyValue
 * @param {String} value      Raw property value
 * @param {boolean} force     If value should be escaped even when unnecessary
 * @return {String}           Given or escaped value when needed
 */
stringify.paramPropertyValue = function(value, force) {
  if (!force &&
      (value.indexOf(',') === -1) &&
      (value.indexOf(':') === -1) &&
      (value.indexOf(';') === -1)) {

    return value;
  }

  return '"' + value + '"';
};

/**
 * Converts an array of ical values into a single
 * string based on a type and a delimiter value (like ",").
 *
 * @function ICAL.stringify.multiValue
 * @param {Array} values      List of values to convert
 * @param {String} delim      Used to join the values (",", ";", ":")
 * @param {String} type       Lowecase ical value type
 *        (like boolean, date-time, etc..)
 * @param {?String} innerMulti If set, each value will again be processed
 *        Used for structured values
 * @param {designSet} designSet
 *        The design data to use for this property
 *
 * @return {String}           iCalendar/vCard string for value
 */
stringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {
  let result = '';
  let len = values.length;
  let i = 0;

  for (; i < len; i++) {
    if (innerMulti && Array.isArray(values[i])) {
      result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);
    } else {
      result += stringify.value(values[i], type, designSet, structuredValue);
    }

    if (i !== (len - 1)) {
      result += delim;
    }
  }

  return result;
};

/**
 * Processes a single ical value runs the associated "toICAL" method from the
 * design value type if available to convert the value.
 *
 * @function ICAL.stringify.value
 * @param {String|Number} value       A formatted value
 * @param {String} type               Lowercase iCalendar/vCard value type
 *  (like boolean, date-time, etc..)
 * @return {String}                   iCalendar/vCard value for single value
 */
stringify.value = function(value, type, designSet, structuredValue) {
  if (type in designSet.value && 'toICAL' in designSet.value[type]) {
    return designSet.value[type].toICAL(value, structuredValue);
  }
  return value;
};

/**
 * Internal helper for rfc6868. Exposing this on ICAL.stringify so that
 * hackers can disable the rfc6868 parsing if the really need to.
 *
 * @param {String} val        The value to unescape
 * @return {String}           The escaped value
 */
stringify._rfc6868Unescape = function(val) {
  return val.replace(/[\n^"]/g, function(x) {
    return RFC6868_REPLACE_MAP[x];
  });
};

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */

const NAME_INDEX$1 = 0;
const PROP_INDEX = 1;
const TYPE_INDEX = 2;
const VALUE_INDEX = 3;

/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 * @ignore
 * @typedef {import("./types.js").designSet} designSet
 * Imports the 'designSet' type from the "types.js" module
 * @typedef {import("./types.js").Geo} Geo
 * Imports the 'Geo' type from the "types.js" module
 */

/**
 * Provides a layer on top of the raw jCal object for manipulating a single property, with its
 * parameters and value.
 *
 * @memberof ICAL
 */
class Property {
  /**
   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.
   *
   * @param {String} str            The iCalendar string to parse
   * @param {designSet=} designSet  The design data to use for this property
   * @return {Property}             The created iCalendar property
   */
  static fromString(str, designSet) {
    return new Property(parse.property(str, designSet));
  }

  /**
   * Creates a new ICAL.Property instance.
   *
   * It is important to note that mutations done in the wrapper directly mutate the jCal object used
   * to initialize.
   *
   * Can also be used to create new properties by passing the name of the property (as a String).
   *
   * @param {Array|String} jCal         Raw jCal representation OR the new name of the property
   * @param {Component=} parent         Parent component
   */
  constructor(jCal, parent) {
    this._parent = parent || null;

    if (typeof(jCal) === 'string') {
      // We are creating the property by name and need to detect the type
      this.jCal = [jCal, {}, design.defaultType];
      this.jCal[TYPE_INDEX] = this.getDefaultType();
    } else {
      this.jCal = jCal;
    }
    this._updateType();
  }

  /**
   * The value type for this property
   * @type {String}
   */
  get type() {
    return this.jCal[TYPE_INDEX];
  }

  /**
   * The name of this property, in lowercase.
   * @type {String}
   */
  get name() {
    return this.jCal[NAME_INDEX$1];
  }

  /**
   * The parent component for this property.
   * @type {Component}
   */
  get parent() {
    return this._parent;
  }

  set parent(p) {
    // Before setting the parent, check if the design set has changed. If it
    // has, we later need to update the type if it was unknown before.
    let designSetChanged = !this._parent || (p && p._designSet != this._parent._designSet);

    this._parent = p;

    if (this.type == design.defaultType && designSetChanged) {
      this.jCal[TYPE_INDEX] = this.getDefaultType();
      this._updateType();
    }
  }

  /**
   * The design set for this property, e.g. icalendar vs vcard
   *
   * @type {designSet}
   * @private
   */
  get _designSet() {
    return this.parent ? this.parent._designSet : design.defaultSet;
  }

  /**
   * Updates the type metadata from the current jCal type and design set.
   *
   * @private
   */
  _updateType() {
    let designSet = this._designSet;

    if (this.type in designSet.value) {
      if ('decorate' in designSet.value[this.type]) {
        this.isDecorated = true;
      } else {
        this.isDecorated = false;
      }

      if (this.name in designSet.property) {
        this.isMultiValue = ('multiValue' in designSet.property[this.name]);
        this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);
      }
    }
  }

  /**
   * Hydrate a single value. The act of hydrating means turning the raw jCal
   * value into a potentially wrapped object, for example {@link ICAL.Time}.
   *
   * @private
   * @param {Number} index        The index of the value to hydrate
   * @return {?Object}             The decorated value.
   */
  _hydrateValue(index) {
    if (this._values && this._values[index]) {
      return this._values[index];
    }

    // for the case where there is no value.
    if (this.jCal.length <= (VALUE_INDEX + index)) {
      return null;
    }

    if (this.isDecorated) {
      if (!this._values) {
        this._values = [];
      }
      return (this._values[index] = this._decorate(
        this.jCal[VALUE_INDEX + index]
      ));
    } else {
      return this.jCal[VALUE_INDEX + index];
    }
  }

  /**
   * Decorate a single value, returning its wrapped object. This is used by
   * the hydrate function to actually wrap the value.
   *
   * @private
   * @param {?} value         The value to decorate
   * @return {Object}         The decorated value
   */
  _decorate(value) {
    return this._designSet.value[this.type].decorate(value, this);
  }

  /**
   * Undecorate a single value, returning its raw jCal data.
   *
   * @private
   * @param {Object} value         The value to undecorate
   * @return {?}                   The undecorated value
   */
  _undecorate(value) {
    return this._designSet.value[this.type].undecorate(value, this);
  }

  /**
   * Sets the value at the given index while also hydrating it. The passed
   * value can either be a decorated or undecorated value.
   *
   * @private
   * @param {?} value             The value to set
   * @param {Number} index        The index to set it at
   */
  _setDecoratedValue(value, index) {
    if (!this._values) {
      this._values = [];
    }

    if (typeof(value) === 'object' && 'icaltype' in value) {
      // decorated value
      this.jCal[VALUE_INDEX + index] = this._undecorate(value);
      this._values[index] = value;
    } else {
      // undecorated value
      this.jCal[VALUE_INDEX + index] = value;
      this._values[index] = this._decorate(value);
    }
  }

  /**
   * Gets a parameter on the property.
   *
   * @param {String}        name   Parameter name (lowercase)
   * @return {Array|String}        Parameter value
   */
  getParameter(name) {
    if (name in this.jCal[PROP_INDEX]) {
      return this.jCal[PROP_INDEX][name];
    } else {
      return undefined;
    }
  }

  /**
   * Gets first parameter on the property.
   *
   * @param {String}        name   Parameter name (lowercase)
   * @return {String}        Parameter value
   */
  getFirstParameter(name) {
    let parameters = this.getParameter(name);

    if (Array.isArray(parameters)) {
      return parameters[0];
    }

    return parameters;
  }

  /**
   * Sets a parameter on the property.
   *
   * @param {String}       name     The parameter name
   * @param {Array|String} value    The parameter value
   */
  setParameter(name, value) {
    let lcname = name.toLowerCase();
    if (typeof value === "string" &&
        lcname in this._designSet.param &&
        'multiValue' in this._designSet.param[lcname]) {
        value = [value];
    }
    this.jCal[PROP_INDEX][name] = value;
  }

  /**
   * Removes a parameter
   *
   * @param {String} name     The parameter name
   */
  removeParameter(name) {
    delete this.jCal[PROP_INDEX][name];
  }

  /**
   * Get the default type based on this property's name.
   *
   * @return {String}     The default type for this property
   */
  getDefaultType() {
    let name = this.jCal[NAME_INDEX$1];
    let designSet = this._designSet;

    if (name in designSet.property) {
      let details = designSet.property[name];
      if ('defaultType' in details) {
        return details.defaultType;
      }
    }
    return design.defaultType;
  }

  /**
   * Sets type of property and clears out any existing values of the current
   * type.
   *
   * @param {String} type     New iCAL type (see design.*.values)
   */
  resetType(type) {
    this.removeAllValues();
    this.jCal[TYPE_INDEX] = type;
    this._updateType();
  }

  /**
   * Finds the first property value.
   *
   * @return {Binary | Duration | Period |
   * Recur | Time | UtcOffset | Geo | string | null}         First property value
   */
  getFirstValue() {
    return this._hydrateValue(0);
  }

  /**
   * Gets all values on the property.
   *
   * NOTE: this creates an array during each call.
   *
   * @return {Array}          List of values
   */
  getValues() {
    let len = this.jCal.length - VALUE_INDEX;

    if (len < 1) {
      // it is possible for a property to have no value.
      return [];
    }

    let i = 0;
    let result = [];

    for (; i < len; i++) {
      result[i] = this._hydrateValue(i);
    }

    return result;
  }

  /**
   * Removes all values from this property
   */
  removeAllValues() {
    if (this._values) {
      this._values.length = 0;
    }
    this.jCal.length = 3;
  }

  /**
   * Sets the values of the property.  Will overwrite the existing values.
   * This can only be used for multi-value properties.
   *
   * @param {Array} values    An array of values
   */
  setValues(values) {
    if (!this.isMultiValue) {
      throw new Error(
        this.name + ': does not not support mulitValue.\n' +
        'override isMultiValue'
      );
    }

    let len = values.length;
    let i = 0;
    this.removeAllValues();

    if (len > 0 &&
        typeof(values[0]) === 'object' &&
        'icaltype' in values[0]) {
      this.resetType(values[0].icaltype);
    }

    if (this.isDecorated) {
      for (; i < len; i++) {
        this._setDecoratedValue(values[i], i);
      }
    } else {
      for (; i < len; i++) {
        this.jCal[VALUE_INDEX + i] = values[i];
      }
    }
  }

  /**
   * Sets the current value of the property. If this is a multi-value
   * property, all other values will be removed.
   *
   * @param {String|Object} value     New property value.
   */
  setValue(value) {
    this.removeAllValues();
    if (typeof(value) === 'object' && 'icaltype' in value) {
      this.resetType(value.icaltype);
    }

    if (this.isDecorated) {
      this._setDecoratedValue(value, 0);
    } else {
      this.jCal[VALUE_INDEX] = value;
    }
  }

  /**
   * Returns the Object representation of this component. The returned object
   * is a live jCal object and should be cloned if modified.
   * @return {Object}
   */
  toJSON() {
    return this.jCal;
  }

  /**
   * The string representation of this component.
   * @return {String}
   */
  toICALString() {
    return stringify.property(
      this.jCal, this._designSet, true
    );
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 * @ignore
 * @typedef {import("./types.js").designSet} designSet
 * Imports the 'designSet' type from the "types.js" module
 * @typedef {import("./types.js").Geo} Geo
 * Imports the 'Geo' type from the "types.js" module
 */

const NAME_INDEX = 0;
const PROPERTY_INDEX = 1;
const COMPONENT_INDEX = 2;

const PROPERTY_NAME_INDEX = 0;
const PROPERTY_VALUE_INDEX = 3;

/**
 * Wraps a jCal component, adding convenience methods to add, remove and update subcomponents and
 * properties.
 *
 * @memberof ICAL
 */
class Component {
  /**
   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.
   *
   * @param {String} str        The iCalendar string to parse
   */
  static fromString(str) {
    return new Component(parse.component(str));
  }

  /**
   * Creates a new Component instance.
   *
   * @param {Array|String} jCal         Raw jCal component data OR name of new
   *                                      component
   * @param {Component=} parent     Parent component to associate
   */
  constructor(jCal, parent) {
    if (typeof(jCal) === 'string') {
      // jCal spec (name, properties, components)
      jCal = [jCal, [], []];
    }

    // mostly for legacy reasons.
    this.jCal = jCal;

    this.parent = parent || null;

    if (!this.parent && this.name === 'vcalendar') {
      this._timezoneCache = new Map();
    }
  }

  /**
   * Hydrated properties are inserted into the _properties array at the same
   * position as in the jCal array, so it is possible that the array contains
   * undefined values for unhydrdated properties. To avoid iterating the
   * array when checking if all properties have been hydrated, we save the
   * count here.
   *
   * @type {Number}
   * @private
   */
  _hydratedPropertyCount = 0;

  /**
   * The same count as for _hydratedPropertyCount, but for subcomponents
   *
   * @type {Number}
   * @private
   */
  _hydratedComponentCount = 0;

  /**
   * A cache of hydrated time zone objects which may be used by consumers, keyed
   * by time zone ID.
   *
   * @type {Map}
   * @private
   */
  _timezoneCache = null;

  /**
   * @private
   */
  _components = null;

  /**
   * @private
   */
  _properties = null;

  /**
   * The name of this component
   *
   * @type {String}
   */
  get name() {
    return this.jCal[NAME_INDEX];
  }

  /**
   * The design set for this component, e.g. icalendar vs vcard
   *
   * @type {designSet}
   * @private
   */
  get _designSet() {
    let parentDesign = this.parent && this.parent._designSet;
    if (!parentDesign && this.name == "vcard") {
      // We can't decide on vcard3 vs vcard4 just based on the component name, the version number is
      // in the version property. We also can't use hydrated properties here because it would lead
      // to recursion, but the spec says that the version property needs to be the very first one.
      let versionProp = this.jCal[PROPERTY_INDEX]?.[0];

      if (versionProp && versionProp[PROPERTY_NAME_INDEX] == "version" && versionProp[PROPERTY_VALUE_INDEX] == "3.0") {
        return design.getDesignSet("vcard3");
      }
    }

    return parentDesign || design.getDesignSet(this.name);
  }

  /**
   * @private
   */
  _hydrateComponent(index) {
    if (!this._components) {
      this._components = [];
      this._hydratedComponentCount = 0;
    }

    if (this._components[index]) {
      return this._components[index];
    }

    let comp = new Component(
      this.jCal[COMPONENT_INDEX][index],
      this
    );

    this._hydratedComponentCount++;
    return (this._components[index] = comp);
  }

  /**
   * @private
   */
  _hydrateProperty(index) {
    if (!this._properties) {
      this._properties = [];
      this._hydratedPropertyCount = 0;
    }

    if (this._properties[index]) {
      return this._properties[index];
    }

    let prop = new Property(
      this.jCal[PROPERTY_INDEX][index],
      this
    );

    this._hydratedPropertyCount++;
    return (this._properties[index] = prop);
  }

  /**
   * Finds first sub component, optionally filtered by name.
   *
   * @param {String=} name        Optional name to filter by
   * @return {?Component}     The found subcomponent
   */
  getFirstSubcomponent(name) {
    if (name) {
      let i = 0;
      let comps = this.jCal[COMPONENT_INDEX];
      let len = comps.length;

      for (; i < len; i++) {
        if (comps[i][NAME_INDEX] === name) {
          let result = this._hydrateComponent(i);
          return result;
        }
      }
    } else {
      if (this.jCal[COMPONENT_INDEX].length) {
        return this._hydrateComponent(0);
      }
    }

    // ensure we return a value (strict mode)
    return null;
  }

  /**
   * Finds all sub components, optionally filtering by name.
   *
   * @param {String=} name            Optional name to filter by
   * @return {Component[]}       The found sub components
   */
  getAllSubcomponents(name) {
    let jCalLen = this.jCal[COMPONENT_INDEX].length;
    let i = 0;

    if (name) {
      let comps = this.jCal[COMPONENT_INDEX];
      let result = [];

      for (; i < jCalLen; i++) {
        if (name === comps[i][NAME_INDEX]) {
          result.push(
            this._hydrateComponent(i)
          );
        }
      }
      return result;
    } else {
      if (!this._components ||
          (this._hydratedComponentCount !== jCalLen)) {
        for (; i < jCalLen; i++) {
          this._hydrateComponent(i);
        }
      }

      return this._components || [];
    }
  }

  /**
   * Returns true when a named property exists.
   *
   * @param {String} name     The property name
   * @return {Boolean}        True, when property is found
   */
  hasProperty(name) {
    let props = this.jCal[PROPERTY_INDEX];
    let len = props.length;

    let i = 0;
    for (; i < len; i++) {
      // 0 is property name
      if (props[i][NAME_INDEX] === name) {
        return true;
      }
    }

    return false;
  }

  /**
   * Finds the first property, optionally with the given name.
   *
   * @param {String=} name        Lowercase property name
   * @return {?Property}     The found property
   */
  getFirstProperty(name) {
    if (name) {
      let i = 0;
      let props = this.jCal[PROPERTY_INDEX];
      let len = props.length;

      for (; i < len; i++) {
        if (props[i][NAME_INDEX] === name) {
          let result = this._hydrateProperty(i);
          return result;
        }
      }
    } else {
      if (this.jCal[PROPERTY_INDEX].length) {
        return this._hydrateProperty(0);
      }
    }

    return null;
  }

  /**
   * Returns first property's value, if available.
   *
   * @param {String=} name                    Lowercase property name
   * @return {Binary | Duration | Period |
   * Recur | Time | UtcOffset | Geo | string | null}         The found property value.
   */
  getFirstPropertyValue(name) {
    let prop = this.getFirstProperty(name);
    if (prop) {
      return prop.getFirstValue();
    }

    return null;
  }

  /**
   * Get all properties in the component, optionally filtered by name.
   *
   * @param {String=} name        Lowercase property name
   * @return {Property[]}    List of properties
   */
  getAllProperties(name) {
    let jCalLen = this.jCal[PROPERTY_INDEX].length;
    let i = 0;

    if (name) {
      let props = this.jCal[PROPERTY_INDEX];
      let result = [];

      for (; i < jCalLen; i++) {
        if (name === props[i][NAME_INDEX]) {
          result.push(
            this._hydrateProperty(i)
          );
        }
      }
      return result;
    } else {
      if (!this._properties ||
          (this._hydratedPropertyCount !== jCalLen)) {
        for (; i < jCalLen; i++) {
          this._hydrateProperty(i);
        }
      }

      return this._properties || [];
    }
  }

  /**
   * @private
   */
  _removeObjectByIndex(jCalIndex, cache, index) {
    cache = cache || [];
    // remove cached version
    if (cache[index]) {
      let obj = cache[index];
      if ("parent" in obj) {
          obj.parent = null;
      }
    }

    cache.splice(index, 1);

    // remove it from the jCal
    this.jCal[jCalIndex].splice(index, 1);
  }

  /**
   * @private
   */
  _removeObject(jCalIndex, cache, nameOrObject) {
    let i = 0;
    let objects = this.jCal[jCalIndex];
    let len = objects.length;
    let cached = this[cache];

    if (typeof(nameOrObject) === 'string') {
      for (; i < len; i++) {
        if (objects[i][NAME_INDEX] === nameOrObject) {
          this._removeObjectByIndex(jCalIndex, cached, i);
          return true;
        }
      }
    } else if (cached) {
      for (; i < len; i++) {
        if (cached[i] && cached[i] === nameOrObject) {
          this._removeObjectByIndex(jCalIndex, cached, i);
          return true;
        }
      }
    }

    return false;
  }

  /**
   * @private
   */
  _removeAllObjects(jCalIndex, cache, name) {
    let cached = this[cache];

    // Unfortunately we have to run through all children to reset their
    // parent property.
    let objects = this.jCal[jCalIndex];
    let i = objects.length - 1;

    // descending search required because splice
    // is used and will effect the indices.
    for (; i >= 0; i--) {
      if (!name || objects[i][NAME_INDEX] === name) {
        this._removeObjectByIndex(jCalIndex, cached, i);
      }
    }
  }

  /**
   * Adds a single sub component.
   *
   * @param {Component} component        The component to add
   * @return {Component}                 The passed in component
   */
  addSubcomponent(component) {
    if (!this._components) {
      this._components = [];
      this._hydratedComponentCount = 0;
    }

    if (component.parent) {
      component.parent.removeSubcomponent(component);
    }

    let idx = this.jCal[COMPONENT_INDEX].push(component.jCal);
    this._components[idx - 1] = component;
    this._hydratedComponentCount++;
    component.parent = this;
    return component;
  }

  /**
   * Removes a single component by name or the instance of a specific
   * component.
   *
   * @param {Component|String} nameOrComp    Name of component, or component
   * @return {Boolean}                            True when comp is removed
   */
  removeSubcomponent(nameOrComp) {
    let removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);
    if (removed) {
      this._hydratedComponentCount--;
    }
    return removed;
  }

  /**
   * Removes all components or (if given) all components by a particular
   * name.
   *
   * @param {String=} name            Lowercase component name
   */
  removeAllSubcomponents(name) {
    let removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);
    this._hydratedComponentCount = 0;
    return removed;
  }

  /**
   * Adds an {@link ICAL.Property} to the component.
   *
   * @param {Property} property      The property to add
   * @return {Property}              The passed in property
   */
  addProperty(property) {
    if (!(property instanceof Property)) {
      throw new TypeError('must be instance of ICAL.Property');
    }

    if (!this._properties) {
      this._properties = [];
      this._hydratedPropertyCount = 0;
    }

    if (property.parent) {
      property.parent.removeProperty(property);
    }

    let idx = this.jCal[PROPERTY_INDEX].push(property.jCal);
    this._properties[idx - 1] = property;
    this._hydratedPropertyCount++;
    property.parent = this;
    return property;
  }

  /**
   * Helper method to add a property with a value to the component.
   *
   * @param {String}               name         Property name to add
   * @param {String|Number|Object} value        Property value
   * @return {Property}                    The created property
   */
  addPropertyWithValue(name, value) {
    let prop = new Property(name);
    prop.setValue(value);

    this.addProperty(prop);

    return prop;
  }

  /**
   * Helper method that will update or create a property of the given name
   * and sets its value. If multiple properties with the given name exist,
   * only the first is updated.
   *
   * @param {String}               name         Property name to update
   * @param {String|Number|Object} value        Property value
   * @return {Property}                    The created property
   */
  updatePropertyWithValue(name, value) {
    let prop = this.getFirstProperty(name);

    if (prop) {
      prop.setValue(value);
    } else {
      prop = this.addPropertyWithValue(name, value);
    }

    return prop;
  }

  /**
   * Removes a single property by name or the instance of the specific
   * property.
   *
   * @param {String|Property} nameOrProp     Property name or instance to remove
   * @return {Boolean}                            True, when deleted
   */
  removeProperty(nameOrProp) {
    let removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);
    if (removed) {
      this._hydratedPropertyCount--;
    }
    return removed;
  }

  /**
   * Removes all properties associated with this component, optionally
   * filtered by name.
   *
   * @param {String=} name        Lowercase property name
   * @return {Boolean}            True, when deleted
   */
  removeAllProperties(name) {
    let removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);
    this._hydratedPropertyCount = 0;
    return removed;
  }

  /**
   * Returns the Object representation of this component. The returned object
   * is a live jCal object and should be cloned if modified.
   * @return {Object}
   */
  toJSON() {
    return this.jCal;
  }

  /**
   * The string representation of this component.
   * @return {String}
   */
  toString() {
    return stringify.component(
      this.jCal, this._designSet
    );
  }

  /**
   * Retrieve a time zone definition from the component tree, if any is present.
   * If the tree contains no time zone definitions or the TZID cannot be
   * matched, returns null.
   *
   * @param {String} tzid     The ID of the time zone to retrieve
   * @return {Timezone}  The time zone corresponding to the ID, or null
   */
  getTimeZoneByID(tzid) {
    // VTIMEZONE components can only appear as a child of the VCALENDAR
    // component; walk the tree if we're not the root.
    if (this.parent) {
      return this.parent.getTimeZoneByID(tzid);
    }

    // If there is no time zone cache, we are probably parsing an incomplete
    // file and will have no time zone definitions.
    if (!this._timezoneCache) {
      return null;
    }

    if (this._timezoneCache.has(tzid)) {
      return this._timezoneCache.get(tzid);
    }

    // If the time zone is not already cached, hydrate it from the
    // subcomponents.
    const zones = this.getAllSubcomponents('vtimezone');
    for (const zone of zones) {
      if (zone.getFirstProperty('tzid').getFirstValue() === tzid) {
        const hydratedZone = new Timezone({
          component: zone,
          tzid: tzid,
        });

        this._timezoneCache.set(tzid, hydratedZone);

        return hydratedZone;
      }
    }

    // Per the standard, we should always have a time zone defined in a file
    // for any referenced TZID, but don't blow up if the file is invalid.
    return null;
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * Primary class for expanding recurring rules.  Can take multiple rrules, rdates, exdate(s) and
 * iterate (in order) over each next occurrence.
 *
 * Once initialized this class can also be serialized saved and continue iteration from the last
 * point.
 *
 * NOTE: it is intended that this class is to be used with {@link ICAL.Event} which handles recurrence
 * exceptions.
 *
 * @example
 * // assuming event is a parsed ical component
 * var event;
 *
 * var expand = new ICAL.RecurExpansion({
 *   component: event,
 *   dtstart: event.getFirstPropertyValue('dtstart')
 * });
 *
 * // remember there are infinite rules so it is a good idea to limit the scope of the iterations
 * // then resume later on.
 *
 * // next is always an ICAL.Time or null
 * var next;
 *
 * while (someCondition && (next = expand.next())) {
 *   // do something with next
 * }
 *
 * // save instance for later
 * var json = JSON.stringify(expand);
 *
 * //...
 *
 * // NOTE: if the component's properties have changed you will need to rebuild the class and start
 * // over. This only works when the component's recurrence info is the same.
 * var expand = new ICAL.RecurExpansion(JSON.parse(json));
 *
 * @memberof ICAL
 */
class RecurExpansion {
  /**
   * Creates a new ICAL.RecurExpansion instance.
   *
   * The options object can be filled with the specified initial values. It can also contain
   * additional members, as a result of serializing a previous expansion state, as shown in the
   * example.
   *
   * @param {Object} options
   *        Recurrence expansion options
   * @param {Time} options.dtstart
   *        Start time of the event
   * @param {Component=} options.component
   *        Component for expansion, required if not resuming.
   */
  constructor(options) {
    this.ruleDates = [];
    this.exDates = [];
    this.fromData(options);
  }

  /**
   * True when iteration is fully completed.
   * @type {Boolean}
   */
  complete = false;

  /**
   * Array of rrule iterators.
   *
   * @type {RecurIterator[]}
   * @private
   */
  ruleIterators = null;

  /**
   * Array of rdate instances.
   *
   * @type {Time[]}
   * @private
   */
  ruleDates = null;

  /**
   * Array of exdate instances.
   *
   * @type {Time[]}
   * @private
   */
  exDates = null;

  /**
   * Current position in ruleDates array.
   * @type {Number}
   * @private
   */
  ruleDateInc = 0;

  /**
   * Current position in exDates array
   * @type {Number}
   * @private
   */
  exDateInc = 0;

  /**
   * Current negative date.
   *
   * @type {Time}
   * @private
   */
  exDate = null;

  /**
   * Current additional date.
   *
   * @type {Time}
   * @private
   */
  ruleDate = null;

  /**
   * Start date of recurring rules.
   *
   * @type {Time}
   */
  dtstart = null;

  /**
   * Last expanded time
   *
   * @type {Time}
   */
  last = null;

  /**
   * Initialize the recurrence expansion from the data object. The options
   * object may also contain additional members, see the
   * {@link ICAL.RecurExpansion constructor} for more details.
   *
   * @param {Object} options
   *        Recurrence expansion options
   * @param {Time} options.dtstart
   *        Start time of the event
   * @param {Component=} options.component
   *        Component for expansion, required if not resuming.
   */
  fromData(options) {
    let start = formatClassType(options.dtstart, Time);

    if (!start) {
      throw new Error('.dtstart (ICAL.Time) must be given');
    } else {
      this.dtstart = start;
    }

    if (options.component) {
      this._init(options.component);
    } else {
      this.last = formatClassType(options.last, Time) || start.clone();

      if (!options.ruleIterators) {
        throw new Error('.ruleIterators or .component must be given');
      }

      this.ruleIterators = options.ruleIterators.map(function(item) {
        return formatClassType(item, RecurIterator);
      });

      this.ruleDateInc = options.ruleDateInc;
      this.exDateInc = options.exDateInc;

      if (options.ruleDates) {
        this.ruleDates = options.ruleDates.map(item => formatClassType(item, Time));
        this.ruleDate = this.ruleDates[this.ruleDateInc];
      }

      if (options.exDates) {
        this.exDates = options.exDates.map(item => formatClassType(item, Time));
        this.exDate = this.exDates[this.exDateInc];
      }

      if (typeof(options.complete) !== 'undefined') {
        this.complete = options.complete;
      }
    }
  }

  /**
   * Compare two ICAL.Time objects.  When the second parameter is a DATE and the first parameter is
   * DATE-TIME, strip the time and compare only the days.
   *
   * @private
   * @param {Time} a   The one object to compare
   * @param {Time} b   The other object to compare
   */
  _compare_special(a, b) {
    if (!a.isDate && b.isDate)
      return new Time({ year: a.year, month: a.month, day: a.day }).compare(b);
    return a.compare(b);
  }

  /**
   * Retrieve the next occurrence in the series.
   * @return {Time}
   */
  next() {
    let iter;
    let next;
    let compare;

    let maxTries = 500;
    let currentTry = 0;

    while (true) {
      if (currentTry++ > maxTries) {
        throw new Error(
          'max tries have occurred, rule may be impossible to fulfill.'
        );
      }

      next = this.ruleDate;
      iter = this._nextRecurrenceIter(this.last);

      // no more matches
      // because we increment the rule day or rule
      // _after_ we choose a value this should be
      // the only spot where we need to worry about the
      // end of events.
      if (!next && !iter) {
        // there are no more iterators or rdates
        this.complete = true;
        break;
      }

      // no next rule day or recurrence rule is first.
      if (!next || (iter && next.compare(iter.last) > 0)) {
        // must be cloned, recur will reuse the time element.
        next = iter.last.clone();
        // move to next so we can continue
        iter.next();
      }

      // if the ruleDate is still next increment it.
      if (this.ruleDate === next) {
        this._nextRuleDay();
      }

      this.last = next;

      // check the negative rules
      if (this.exDate) {
        // EXDATE can be in DATE format, but DTSTART is in DATE-TIME format
        compare = this._compare_special(this.last, this.exDate);

        if (compare > 0) {
          this._nextExDay();
        }

        // if the current rule is excluded skip it.
        if (compare === 0) {
          this._nextExDay();
          continue;
        }
      }

      //XXX: The spec states that after we resolve the final
      //     list of dates we execute exdate this seems somewhat counter
      //     intuitive to what I have seen most servers do so for now
      //     I exclude based on the original date not the one that may
      //     have been modified by the exception.
      return this.last;
    }
  }

  /**
   * Converts object into a serialize-able format. This format can be passed
   * back into the expansion to resume iteration.
   * @return {Object}
   */
  toJSON() {
    function toJSON(item) {
      return item.toJSON();
    }

    let result = Object.create(null);
    result.ruleIterators = this.ruleIterators.map(toJSON);

    if (this.ruleDates) {
      result.ruleDates = this.ruleDates.map(toJSON);
    }

    if (this.exDates) {
      result.exDates = this.exDates.map(toJSON);
    }

    result.ruleDateInc = this.ruleDateInc;
    result.exDateInc = this.exDateInc;
    result.last = this.last.toJSON();
    result.dtstart = this.dtstart.toJSON();
    result.complete = this.complete;

    return result;
  }

  /**
   * Extract all dates from the properties in the given component. The
   * properties will be filtered by the property name.
   *
   * @private
   * @param {Component} component             The component to search in
   * @param {String} propertyName             The property name to search for
   * @return {Time[]}                         The extracted dates.
   */
  _extractDates(component, propertyName) {
    let result = [];
    let props = component.getAllProperties(propertyName);

    for (let i = 0, len = props.length; i < len; i++) {
      for (let prop of props[i].getValues()) {
        let idx = binsearchInsert(
          result,
          prop,
          (a, b) => a.compare(b)
        );

        // ordered insert
        result.splice(idx, 0, prop);
      }
    }

    return result;
  }

  /**
   * Initialize the recurrence expansion.
   *
   * @private
   * @param {Component} component    The component to initialize from.
   */
  _init(component) {
    this.ruleIterators = [];

    this.last = this.dtstart.clone();

    // to provide api consistency non-recurring
    // events can also use the iterator though it will
    // only return a single time.
    if (!component.hasProperty('rdate') &&
        !component.hasProperty('rrule') &&
        !component.hasProperty('recurrence-id')) {
      this.ruleDate = this.last.clone();
      this.complete = true;
      return;
    }

    if (component.hasProperty('rdate')) {
      this.ruleDates = this._extractDates(component, 'rdate');

      // special hack for cases where first rdate is prior
      // to the start date. We only check for the first rdate.
      // This is mostly for google's crazy recurring date logic
      // (contacts birthdays).
      if ((this.ruleDates[0]) &&
          (this.ruleDates[0].compare(this.dtstart) < 0)) {

        this.ruleDateInc = 0;
        this.last = this.ruleDates[0].clone();
      } else {
        this.ruleDateInc = binsearchInsert(
          this.ruleDates,
          this.last,
          (a, b) => a.compare(b)
        );
      }

      this.ruleDate = this.ruleDates[this.ruleDateInc];
    }

    if (component.hasProperty('rrule')) {
      let rules = component.getAllProperties('rrule');
      let i = 0;
      let len = rules.length;

      let rule;
      let iter;

      for (; i < len; i++) {
        rule = rules[i].getFirstValue();
        iter = rule.iterator(this.dtstart);
        this.ruleIterators.push(iter);

        // increment to the next occurrence so future
        // calls to next return times beyond the initial iteration.
        // XXX: I find this suspicious might be a bug?
        iter.next();
      }
    }

    if (component.hasProperty('exdate')) {
      this.exDates = this._extractDates(component, 'exdate');
      // if we have a .last day we increment the index to beyond it.
      // When DTSTART is in DATE-TIME format, EXDATE is in DATE format and EXDATE is
      // the date of DTSTART, _compare_special finds this out and compareTime fails.
      this.exDateInc = binsearchInsert(
        this.exDates,
        this.last,
        this._compare_special
      );

      this.exDate = this.exDates[this.exDateInc];
    }
  }

  /**
   * Advance to the next exdate
   * @private
   */
  _nextExDay() {
    this.exDate = this.exDates[++this.exDateInc];
  }

  /**
   * Advance to the next rule date
   * @private
   */
  _nextRuleDay() {
    this.ruleDate = this.ruleDates[++this.ruleDateInc];
  }

  /**
   * Find and return the recurrence rule with the most recent event and
   * return it.
   *
   * @private
   * @return {?RecurIterator}    Found iterator.
   */
  _nextRecurrenceIter() {
    let iters = this.ruleIterators;

    if (iters.length === 0) {
      return null;
    }

    let len = iters.length;
    let iter;
    let iterTime;
    let iterIdx = 0;
    let chosenIter;

    // loop through each iterator
    for (; iterIdx < len; iterIdx++) {
      iter = iters[iterIdx];
      iterTime = iter.last;

      // if iteration is complete
      // then we must exclude it from
      // the search and remove it.
      if (iter.completed) {
        len--;
        if (iterIdx !== 0) {
          iterIdx--;
        }
        iters.splice(iterIdx, 1);
        continue;
      }

      // find the most recent possible choice
      if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {
        // that iterator is saved
        chosenIter = iter;
      }
    }

    // the chosen iterator is returned but not mutated
    // this iterator contains the most recent event.
    return chosenIter;
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * This lets typescript resolve our custom types in the
 * generated d.ts files (jsdoc typedefs are converted to typescript types).
 * Ignore prevents the typedefs from being documented more than once.
 * @ignore
 * @typedef {import("./types.js").frequencyValues} frequencyValues
 * Imports the 'frequencyValues' type from the "types.js" module
 * @typedef {import("./types.js").occurrenceDetails} occurrenceDetails
 * Imports the 'occurrenceDetails' type from the "types.js" module
 */

/**
 * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal
 * object, followed by the component/property layer. The highest level is the
 * event representation, which this class is part of. See the
 * {@tutorial layers} guide for more details.
 *
 * @memberof ICAL
 */
let Event$1 = class Event {
  /**
   * Creates a new ICAL.Event instance.
   *
   * @param {Component=} component              The ICAL.Component to base this event on
   * @param {Object} [options]                  Options for this event
   * @param {Boolean=} options.strictExceptions  When true, will verify exceptions are related by
   *                                              their UUID
   * @param {Array<Component|Event>=} options.exceptions
   *          Exceptions to this event, either as components or events. If not
   *            specified exceptions will automatically be set in relation of
   *            component's parent
   */
  constructor(component, options) {
    if (!(component instanceof Component)) {
      options = component;
      component = null;
    }

    if (component) {
      this.component = component;
    } else {
      this.component = new Component('vevent');
    }

    this._rangeExceptionCache = Object.create(null);
    this.exceptions = Object.create(null);
    this.rangeExceptions = [];

    if (options && options.strictExceptions) {
      this.strictExceptions = options.strictExceptions;
    }

    if (options && options.exceptions) {
      options.exceptions.forEach(this.relateException, this);
    } else if (this.component.parent && !this.isRecurrenceException()) {
      this.component.parent.getAllSubcomponents('vevent').forEach(function(event) {
        if (event.hasProperty('recurrence-id')) {
          this.relateException(event);
        }
      }, this);
    }
  }


  static THISANDFUTURE = 'THISANDFUTURE';

  /**
   * List of related event exceptions.
   *
   * @type {Event[]}
   */
  exceptions = null;

  /**
   * When true, will verify exceptions are related by their UUID.
   *
   * @type {Boolean}
   */
  strictExceptions = false;

  /**
   * Relates a given event exception to this object.  If the given component
   * does not share the UID of this event it cannot be related and will throw
   * an exception.
   *
   * If this component is an exception it cannot have other exceptions
   * related to it.
   *
   * @param {Component|Event} obj       Component or event
   */
  relateException(obj) {
    if (this.isRecurrenceException()) {
      throw new Error('cannot relate exception to exceptions');
    }

    if (obj instanceof Component) {
      obj = new Event(obj);
    }

    if (this.strictExceptions && obj.uid !== this.uid) {
      throw new Error('attempted to relate unrelated exception');
    }

    let id = obj.recurrenceId.toString();

    // we don't sort or manage exceptions directly
    // here the recurrence expander handles that.
    this.exceptions[id] = obj;

    // index RANGE=THISANDFUTURE exceptions so we can
    // look them up later in getOccurrenceDetails.
    if (obj.modifiesFuture()) {
      let item = [
        obj.recurrenceId.toUnixTime(), id
      ];

      // we keep them sorted so we can find the nearest
      // value later on...
      let idx = binsearchInsert(
        this.rangeExceptions,
        item,
        compareRangeException
      );

      this.rangeExceptions.splice(idx, 0, item);
    }
  }

  /**
   * Checks if this record is an exception and has the RANGE=THISANDFUTURE
   * value.
   *
   * @return {Boolean}        True, when exception is within range
   */
  modifiesFuture() {
    if (!this.component.hasProperty('recurrence-id')) {
      return false;
    }

    let range = this.component.getFirstProperty('recurrence-id').getParameter('range');
    return range === Event.THISANDFUTURE;
  }

  /**
   * Finds the range exception nearest to the given date.
   *
   * @param {Time} time   usually an occurrence time of an event
   * @return {?Event}     the related event/exception or null
   */
  findRangeException(time) {
    if (!this.rangeExceptions.length) {
      return null;
    }

    let utc = time.toUnixTime();
    let idx = binsearchInsert(
      this.rangeExceptions,
      [utc],
      compareRangeException
    );

    idx -= 1;

    // occurs before
    if (idx < 0) {
      return null;
    }

    let rangeItem = this.rangeExceptions[idx];

    /* c8 ignore next 4 */
    if (utc < rangeItem[0]) {
      // sanity check only
      return null;
    }

    return rangeItem[1];
  }

  /**
   * Returns the occurrence details based on its start time.  If the
   * occurrence has an exception will return the details for that exception.
   *
   * NOTE: this method is intend to be used in conjunction
   *       with the {@link ICAL.Event#iterator iterator} method.
   *
   * @param {Time} occurrence               time occurrence
   * @return {occurrenceDetails}            Information about the occurrence
   */
  getOccurrenceDetails(occurrence) {
    let id = occurrence.toString();
    let utcId = occurrence.convertToZone(Timezone.utcTimezone).toString();
    let item;
    let result = {
      //XXX: Clone?
      recurrenceId: occurrence
    };

    if (id in this.exceptions) {
      item = result.item = this.exceptions[id];
      result.startDate = item.startDate;
      result.endDate = item.endDate;
      result.item = item;
    } else if (utcId in this.exceptions) {
      item = this.exceptions[utcId];
      result.startDate = item.startDate;
      result.endDate = item.endDate;
      result.item = item;
    } else {
      // range exceptions (RANGE=THISANDFUTURE) have a
      // lower priority then direct exceptions but
      // must be accounted for first. Their item is
      // always the first exception with the range prop.
      let rangeExceptionId = this.findRangeException(
        occurrence
      );
      let end;

      if (rangeExceptionId) {
        let exception = this.exceptions[rangeExceptionId];

        // range exception must modify standard time
        // by the difference (if any) in start/end times.
        result.item = exception;

        let startDiff = this._rangeExceptionCache[rangeExceptionId];

        if (!startDiff) {
          let original = exception.recurrenceId.clone();
          let newStart = exception.startDate.clone();

          // zones must be same otherwise subtract may be incorrect.
          original.zone = newStart.zone;
          startDiff = newStart.subtractDate(original);

          this._rangeExceptionCache[rangeExceptionId] = startDiff;
        }

        let start = occurrence.clone();
        start.zone = exception.startDate.zone;
        start.addDuration(startDiff);

        end = start.clone();
        end.addDuration(exception.duration);

        result.startDate = start;
        result.endDate = end;
      } else {
        // no range exception standard expansion
        end = occurrence.clone();
        end.addDuration(this.duration);

        result.endDate = end;
        result.startDate = occurrence;
        result.item = this;
      }
    }

    return result;
  }

  /**
   * Builds a recur expansion instance for a specific point in time (defaults
   * to startDate).
   *
   * @param {Time=} startTime     Starting point for expansion
   * @return {RecurExpansion}    Expansion object
   */
  iterator(startTime) {
    return new RecurExpansion({
      component: this.component,
      dtstart: startTime || this.startDate
    });
  }

  /**
   * Checks if the event is recurring
   *
   * @return {Boolean}        True, if event is recurring
   */
  isRecurring() {
    let comp = this.component;
    return comp.hasProperty('rrule') || comp.hasProperty('rdate');
  }

  /**
   * Checks if the event describes a recurrence exception. See
   * {@tutorial terminology} for details.
   *
   * @return {Boolean}    True, if the event describes a recurrence exception
   */
  isRecurrenceException() {
    return this.component.hasProperty('recurrence-id');
  }

  /**
   * Returns the types of recurrences this event may have.
   *
   * Returned as an object with the following possible keys:
   *
   *    - YEARLY
   *    - MONTHLY
   *    - WEEKLY
   *    - DAILY
   *    - MINUTELY
   *    - SECONDLY
   *
   * @return {Object.<frequencyValues, Boolean>}
   *          Object of recurrence flags
   */
  getRecurrenceTypes() {
    let rules = this.component.getAllProperties('rrule');
    let i = 0;
    let len = rules.length;
    let result = Object.create(null);

    for (; i < len; i++) {
      let value = rules[i].getFirstValue();
      result[value.freq] = true;
    }

    return result;
  }

  /**
   * The uid of this event
   * @type {String}
   */
  get uid() {
    return this._firstProp('uid');
  }

  set uid(value) {
    this._setProp('uid', value);
  }

  /**
   * The start date
   * @type {Time}
   */
  get startDate() {
    return this._firstProp('dtstart');
  }

  set startDate(value) {
    this._setTime('dtstart', value);
  }

  /**
   * The end date. This can be the result directly from the property, or the
   * end date calculated from start date and duration. Setting the property
   * will remove any duration properties.
   * @type {Time}
   */
  get endDate() {
    let endDate = this._firstProp('dtend');
    if (!endDate) {
        let duration = this._firstProp('duration');
        endDate = this.startDate.clone();
        if (duration) {
            endDate.addDuration(duration);
        } else if (endDate.isDate) {
            endDate.day += 1;
        }
    }
    return endDate;
  }

  set endDate(value) {
    if (this.component.hasProperty('duration')) {
      this.component.removeProperty('duration');
    }
    this._setTime('dtend', value);
  }

  /**
   * The duration. This can be the result directly from the property, or the
   * duration calculated from start date and end date. Setting the property
   * will remove any `dtend` properties.
   * @type {Duration}
   */
  get duration() {
    let duration = this._firstProp('duration');
    if (!duration) {
      return this.endDate.subtractDateTz(this.startDate);
    }
    return duration;
  }

  set duration(value) {
    if (this.component.hasProperty('dtend')) {
      this.component.removeProperty('dtend');
    }

    this._setProp('duration', value);
  }

  /**
   * The location of the event.
   * @type {String}
   */
  get location() {
    return this._firstProp('location');
  }

  set location(value) {
    this._setProp('location', value);
  }

  /**
   * The attendees in the event
   * @type {Property[]}
   */
  get attendees() {
    //XXX: This is way lame we should have a better
    //     data structure for this later.
    return this.component.getAllProperties('attendee');
  }

  /**
   * The event summary
   * @type {String}
   */
  get summary() {
    return this._firstProp('summary');
  }

  set summary(value) {
    this._setProp('summary', value);
  }

  /**
   * The event description.
   * @type {String}
   */
  get description() {
    return this._firstProp('description');
  }

  set description(value) {
    this._setProp('description', value);
  }

  /**
   * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)
   * @type {String}
   */
  get color() {
    return this._firstProp('color');
  }

  set color(value) {
    this._setProp('color', value);
  }

  /**
   * The organizer value as an uri. In most cases this is a mailto: uri, but
   * it can also be something else, like urn:uuid:...
   * @type {String}
   */
  get organizer() {
    return this._firstProp('organizer');
  }

  set organizer(value) {
    this._setProp('organizer', value);
  }

  /**
   * The sequence value for this event. Used for scheduling
   * see {@tutorial terminology}.
   * @type {Number}
   */
  get sequence() {
    return this._firstProp('sequence');
  }

  set sequence(value) {
    this._setProp('sequence', value);
  }

  /**
   * The recurrence id for this event. See {@tutorial terminology} for details.
   * @type {Time}
   */
  get recurrenceId() {
    return this._firstProp('recurrence-id');
  }

  set recurrenceId(value) {
    this._setTime('recurrence-id', value);
  }

  /**
   * Set/update a time property's value.
   * This will also update the TZID of the property.
   *
   * TODO: this method handles the case where we are switching
   * from a known timezone to an implied timezone (one without TZID).
   * This does _not_ handle the case of moving between a known
   *  (by TimezoneService) timezone to an unknown timezone...
   *
   * We will not add/remove/update the VTIMEZONE subcomponents
   *  leading to invalid ICAL data...
   * @private
   * @param {String} propName     The property name
   * @param {Time} time           The time to set
   */
  _setTime(propName, time) {
    let prop = this.component.getFirstProperty(propName);

    if (!prop) {
      prop = new Property(propName);
      this.component.addProperty(prop);
    }

    // utc and local don't get a tzid
    if (
      time.zone === Timezone.localTimezone ||
      time.zone === Timezone.utcTimezone
    ) {
      // remove the tzid
      prop.removeParameter('tzid');
    } else {
      prop.setParameter('tzid', time.zone.tzid);
    }

    prop.setValue(time);
  }

  _setProp(name, value) {
    this.component.updatePropertyWithValue(name, value);
  }

  _firstProp(name) {
    return this.component.getFirstPropertyValue(name);
  }

  /**
   * The string representation of this event.
   * @return {String}
   */
  toString() {
    return this.component.toString();
  }
};

function compareRangeException(a, b) {
  if (a[0] > b[0]) return 1;
  if (b[0] > a[0]) return -1;
  return 0;
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * The ComponentParser is used to process a String or jCal Object,
 * firing callbacks for various found components, as well as completion.
 *
 * @example
 * var options = {
 *   // when false no events will be emitted for type
 *   parseEvent: true,
 *   parseTimezone: true
 * };
 *
 * var parser = new ICAL.ComponentParser(options);
 *
 * parser.onevent(eventComponent) {
 *   //...
 * }
 *
 * // ontimezone, etc...
 *
 * parser.oncomplete = function() {
 *
 * };
 *
 * parser.process(stringOrComponent);
 *
 * @memberof ICAL
 */
class ComponentParser {
  /**
   * Creates a new ICAL.ComponentParser instance.
   *
   * @param {Object=} options                   Component parser options
   * @param {Boolean} options.parseEvent        Whether events should be parsed
   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed
   */
  constructor(options) {
    if (typeof(options) === 'undefined') {
      options = {};
    }

    for (let [key, value] of Object.entries(options)) {
      this[key] = value;
    }
  }

  /**
   * When true, parse events
   *
   * @type {Boolean}
   */
  parseEvent = true;

  /**
   * When true, parse timezones
   *
   * @type {Boolean}
   */
  parseTimezone = true;


  /* SAX like events here for reference */

  /**
   * Fired when parsing is complete
   * @callback
   */
  oncomplete = /* c8 ignore next */ function() {};

  /**
   * Fired if an error occurs during parsing.
   *
   * @callback
   * @param {Error} err details of error
   */
  onerror = /* c8 ignore next */ function(err) {};

  /**
   * Fired when a top level component (VTIMEZONE) is found
   *
   * @callback
   * @param {Timezone} component     Timezone object
   */
  ontimezone = /* c8 ignore next */ function(component) {};

  /**
   * Fired when a top level component (VEVENT) is found.
   *
   * @callback
   * @param {Event} component    Top level component
   */
  onevent = /* c8 ignore next */ function(component) {};

  /**
   * Process a string or parse ical object.  This function itself will return
   * nothing but will start the parsing process.
   *
   * Events must be registered prior to calling this method.
   *
   * @param {Component|String|Object} ical      The component to process,
   *        either in its final form, as a jCal Object, or string representation
   */
  process(ical) {
    //TODO: this is sync now in the future we will have a incremental parser.
    if (typeof(ical) === 'string') {
      ical = parse(ical);
    }

    if (!(ical instanceof Component)) {
      ical = new Component(ical);
    }

    let components = ical.getAllSubcomponents();
    let i = 0;
    let len = components.length;
    let component;

    for (; i < len; i++) {
      component = components[i];

      switch (component.name) {
        case 'vtimezone':
          if (this.parseTimezone) {
            let tzid = component.getFirstPropertyValue('tzid');
            if (tzid) {
              this.ontimezone(new Timezone({
                tzid: tzid,
                component: component
              }));
            }
          }
          break;
        case 'vevent':
          if (this.parseEvent) {
            this.onevent(new Event$1(component));
          }
          break;
        default:
          continue;
      }
    }

    //XXX: ideally we should do a "nextTick" here
    //     so in all cases this is actually async.
    this.oncomplete();
  }
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch */


/**
 * The main ICAL module. Provides access to everything else.
 *
 * @alias ICAL
 * @namespace ICAL
 * @property {ICAL.design} design
 * @property {ICAL.helpers} helpers
 */
var ICALmodule = {
  /**
   * The number of characters before iCalendar line folding should occur
   * @type {Number}
   * @default 75
   */
  foldLength: 75,

  debug: false,

  /**
   * The character(s) to be used for a newline. The default value is provided by
   * rfc5545.
   * @type {String}
   * @default "\r\n"
   */
  newLineChar: '\r\n',

  Binary,
  Component,
  ComponentParser,
  Duration,
  Event: Event$1,
  Period,
  Property,
  Recur,
  RecurExpansion,
  RecurIterator,
  Time,
  Timezone,
  TimezoneService,
  UtcOffset,
  VCardTime,

  parse,
  stringify,

  design,
  helpers
};

/* --- Obsidian Plugin: Periodic Notes Calendar View ---
  Developer: Tim Williams
  This plugin uses library: https://app.unpkg.com/ical.js@2.2.1/files/dist/ical.es5.min.cjs (c) 2024 Chris Lawley, MIT License  
*/


// Import necessary components from the Obsidian API.
const { Plugin, ItemView, PluginSettingTab, Notice, TFile, TFolder, Setting, Modal, Menu, AbstractInputSuggest, moment, MarkdownRenderer, setIcon, Platform } = require("obsidian");

// Define a unique type for this plugin's view.
const VIEW_TYPE_PERIOD = "calendar-period-week";

// Define the default settings for the plugin. This object is used as a fallback and for resetting configurations.
const DEFAULT_SETTINGS = {
    // General Display
    fontSize: "12px",
    dayNumberFontSize: "15px",
    navButtonHeight: "28px",
    headerRowBold: false,
    pwColumnBold: false,
    showCalendarGridLines: false,
    calendarGridGapWidth: "1px",
    contentBorderWidth: "1px",
    monthColorLight: "rgba(51, 51, 51, 1)", // Dark Grey for light mode
    monthColorDark: "rgba(255, 255, 255, 1)", // White for dark mode
    monthTitleFormat: "MMM YYYY",
    mainMonthYearTitleFontSize: "20px",
    mainMonthYearTitleBold: false,
    tabTitleFontSize: "15px",
    tabTitleBold: false,
    tabDisplayMode: "iconOnly",
    mobileTabDisplayMode: "iconOnly",
    collapsedNoteGroups: {},
    tabOrder: ["scratch", "notes", "tasks", "assets"],
    tabIcons: {
        scratch: "pencil",
        notes: "files",
        tasks: "check-circle",
        pinned: "pin",
        assets: "image-file"
    },
    assetsLookbackDays: 7,
    assetsDefaultView: 'grid',
    tabVisibility: {
        scratch: true,
        notes: true,
        tasks: true,
        assets: true,
    },
    calendarLayout: "normal",
    weekStartDay: "sunday",

    // Scratchpad
    fixedNoteFile: "ScratchPad.md",
    scratchFontSize: "14px",
    scratchBold: false,
    scratchFontFamily: "",
    scratchpadOpenAction: "new-tab",
    scratchpadHighlightColor: "rgba(255, 165, 0, 0.4)",
    scratchpad: {
        showPreviewToggle: false,
        showAddTaskButton: true,
        taskFormat: "- [ ] #Tag | üìÖ {friday}"
    },

    // Notes Tab
    ignoreFolders: [],
    pinTag: "pin",
    notesViewMode: "recent",
    notesFontSize: "14px",
    notesBold: false,
    notesOpenAction: "new-tab",
    notesLineHeight: 1.2,
    notesLookbackDays: 7,
    showNoteStatusDots: true,
    showNoteTooltips: true,
    pinnedNotesSortOrder: 'a-z', // can be 'a-z' or 'custom'
    pinnedNotesCustomOrder: [],  // Stores an array of note paths for custom order

    //Assets 
    hiddenAssetTypes: "base,canvas",
    showUnusedAssetsIndicator: true,
    assetsOpenAction: "new-tab",

    // Calendar Dots & Popups
    showOtherNoteDot: true,
    showModifiedFileDot: true,
    otherNoteIgnoreFolders: [],
    otherNoteHoverDelay: 100,
    popupHideDelay: 100,
    popupGap: -2,
    otherNotePopupFontSize: "14px",
    calendarDotSize: 4,
    showAssetDot: true,
    assetDotColor: "rgba(255, 0, 0, 1)", // Red
    calendarEventDotColor: 'rgba(148, 148, 148, 1)', // Grey
    assetIgnoreFolders: [],

    showPWColumnSeparator: true,
    pwColumnSeparatorColor: "rgba(128, 128, 128, 0.2)", // Grey separator line

    pwColumnFontColorLight: "rgba(51, 51, 51, 0.6)", // Dark grey for light mode
    pwColumnFontColorDark: "rgba(255, 255, 255, 0.6)", // White for dark mode
    weekNumberFontColorLight: "rgba(51, 51, 51, 0.6)", // Dark grey for light mode
    weekNumberFontColorDark: "rgba(255, 255, 255, 0.6)", // White for dark mode
    dayHeaderFontColorLight: "rgba(51, 51, 51, 0.6)", // Dark grey for light mode
    dayHeaderFontColorDark: "rgba(255, 255, 255, 0.6)", // White for dark mode

    dayCellFontColorLight: "rgba(51, 51, 51, 1)", // Current month dates - light
    dayCellFontColorDark: "rgba(255, 255, 255, 1)", // Current month dates - dark
    otherMonthFontColorLight: "rgba(153, 153, 153, 0.6)", // Previous/next month dates - light
    otherMonthFontColorDark: "rgba(153, 153, 153, 0.6)", // Previous/next month dates - dark

    // Task Count Badge
    taskIndicatorStyle: "heatmap", // 'none', 'badge', or 'heatmap'
    taskBadgeFontSize: "9px",
    taskBadgeColor: "rgba(100, 149, 237, 0.6)", // Cornflower Blue
    taskBadgeFontColor: "rgba(255, 255, 255, 1)", // White
    taskHeatmapStartColor: "rgba(100, 149, 237, 0.3)", // Cornflower Blue
    taskHeatmapMidColor: "rgba(255, 127, 80, 0.45)",    // Coral
    taskHeatmapEndColor: "rgba(255, 71, 71, 0.6)",     // Red
    taskHeatmapMidpoint: 5,
    taskHeatmapMaxpoint: 10,
    showTaskDot: false,
    taskDotColor: "rgba(200, 100, 200, 1)",

    // Daily Notes
    dailyNotesFolder: "Daily Notes",
    dailyNoteDateFormat: "YYYY-MM-DD",
    dailyNoteTemplatePath: "",
    dailyNoteOpenAction: "new-tab",

    //period / week numbers 
    showWeekNumbers: true,
    weekNumberType: "calendar", // 'period' or 'calendar'
    weekNumberColumnLabel: "CW",

    //calendar events (from ICS) settings
    icsUrl: '',
    showIcsDot: true,
    icsRefreshInterval: 60, // in minutes
    calendarEventsPlaceholder: '%%CALENDAR_EVENTS%%',
    calendarEventsFormat: '- {{startTime}} - {{endTime}}: {{summary}}',
    calendarEventIndicatorStyle: 'dot', // Options: 'dot', 'heatmap', 'badge'

    // Functional
    autoReloadInterval: 5000,
    startOfPeriod1Date: "2025-03-02",
    showPWColumn: false,
    pwFormat: "P#W#",
    enableRowHighlight: true,
    enableColumnHighlight: true,
    enableRowToDateHighlight: false,
    highlightCurrentWeek: false,

    // Colors
    selectedTabColor: "rgba(102, 102, 102, 1)",
    todayHighlightColorLight: "rgba(255, 255, 0, 0.3)", // Light yellow
    todayHighlightColorDark: "rgba(40, 120, 240, 1)",   // blue
    notesHoverColor: "rgba(171, 171, 171, 0.15)",
    dailyNoteDotColor: "rgba(74, 144, 226, 1)",
    noteCreatedColor: "rgba(76, 175, 80, 1)",
    noteModifiedColor: "rgba(255, 152, 0, 1)",
    otherNoteDotColor: "rgba(76, 175, 80, 1)",
    calendarModifiedDotColor: "rgba(255, 152, 0, 1)",
    rowHighlightColorLight: "rgba(163, 163, 163, 0.2)", // Lighter Grey
    rowHighlightColorDark: "rgba(51, 51, 51, 0.7)",     // Dark Grey
    dateCellHoverColorLight: "rgba(105, 105, 105, 0.75)",     // Light Grey
    dateCellHoverColorDark: "rgba(51, 51, 51, 1)",
    assetDotColor: "rgba(255, 0, 0, 1)",
    todayHighlightStyle: "circle", // 'cell' or 'circle'
    todayCircleColor: "rgba(40, 120, 240, 1)", // Cornflower Blue
    highlightTodayLabels: true,
    highlightTodayPWLabel: true,
    highlightWeekends: false, // New setting
    weekendShadeColorLight: "rgba(163, 163, 163, 0.15)", // Subtle grey for light theme
    weekendShadeColorDark: "rgba(51, 51, 51, 0.4)", // Subtle grey for dark theme


    // Weekly Notes (NEW)
    enableWeeklyNotes: true,
    weeklyNoteFolder: "Weekly Notes",
    weeklyNoteFormat: "YYYY-[W]CW", // e.g., 2025-W38
    weeklyNoteTemplate: "",
    showWeeklyNoteDot: true,
    weeklyNoteDotColor: "rgba(160, 115, 240, 1)",

    // Tasks Tab Settings
    taskIgnoreFolders: [],
    taskSortOrder: "dueDate",
    taskGroupBy: "date",
    taskDateGroupsToShow: ["overdue", "today", "tomorrow", "next7days", "future"],
    taskTextTruncate: false,
    showCompletedTasksToday: true,
    taskHeadingFontSize: "13px",
    taskTextFontSize: "14px",
    taskGroupIcons: {
        overdue: "alarm-clock-off",
        today: "target",
        tomorrow: "arrow-right",
        next7days: "calendar-days",
        future: "telescope",
        noDate: "help-circle",
        tag: "tag"
    },
    taskGroupColorOverdue: "rgba(255, 71, 71, 0.15)",
    taskGroupColorToday: "rgba(255, 165, 0, 0.15)",
    taskGroupColorTomorrow: "rgba(64, 158, 255, 0.15)",
    taskGroupColorNext7Days: "rgba(77, 171, 185, 0.15)",
    taskGroupColorFuture: "rgba(128, 128, 128, 0.15)",
    taskGroupColorNoDate: "rgba(105, 180, 105, 0.15)",
    taskGroupColorTag: "rgba(105, 105, 105, 0.15)",
    showPreviewToggle: true,
    showAddTaskButton: true,
    collapsedTaskGroups: {},
    collapsedAssetGroups: {},
};

// A string containing all the CSS for the plugin. It's injected into the document head on load.
const PLUGIN_STYLES = `
body.theme-light {
    --month-color-themed: var(--month-color-light);
    --today-highlight-color-themed: var(--today-highlight-color-light);
    --date-cell-hover-color-themed: var(--date-cell-hover-color-light);
    --pw-column-font-color-themed: var(--pw-column-font-color-light);
    --week-number-font-color-themed: var(--week-number-font-color-light);
    --day-header-font-color-themed: var(--day-header-font-color-light);
    --day-cell-font-color-themed: var(--day-cell-font-color-light);
    --other-month-font-color-themed: var(--other-month-font-color-light);
    --weekend-shade-color-themed: var(--weekend-shade-color-light);
}
body.theme-dark {
    --month-color-themed: var(--month-color-dark);
    --today-highlight-color-themed: var(--today-highlight-color-dark);
    --date-cell-hover-color-themed: var(--date-cell-hover-color-dark);
    --pw-column-font-color-themed: var(--pw-column-font-color-dark);
    --week-number-font-color-themed: var(--week-number-font-color-dark);
    --day-header-font-color-themed: var(--day-header-font-color-dark);
    --day-cell-font-color-themed: var(--day-cell-font-color-dark);
    --other-month-font-color-themed: var(--other-month-font-color-dark);
    --weekend-shade-color-themed: var(--weekend-shade-color-dark);
}

/* Day header row font color */
.period-calendar-table thead th {
    color: var(--day-header-font-color-themed);
}

/* Period/Week column font color */
.period-calendar-table .pw-label-cell,
.period-calendar-table .pw-label-cell .day-number {
    font-weight: var(--pw-column-font-weight);
    font-size: var(--header-font-size);
    color: var(--pw-column-font-color-themed);
}

/* Highlight today's P/W column with today color */
.period-calendar-table .pw-label-cell.today-pw-label .day-number,
.period-calendar-table .week-number-cell.today-pw-label .day-number {
    color: var(--today-circle-color);
    
}

/* Day header row font color */
.period-calendar-table thead th {
    color: var(--day-header-font-color-themed);
}

/* Highlight today's day column header with today color */
.period-calendar-table thead th.today-day-header {
    color: var(--today-circle-color);
    
}

/* Week number column font color */
.period-calendar-table .week-number-cell,
.period-calendar-table .week-number-cell .day-number {
    font-weight: var(--pw-column-font-weight);
    font-size: var(--header-font-size);
    color: var(--week-number-font-color-themed);
}


/* --- Main Layout --- */
.period-month-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  padding-top: 6px;
}
.month-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.1rem 0.25rem;
  margin-bottom: 0.5rem; /* Specific margin for spacing */
}
.month-header-title {
  font-size: var(--main-month-year-title-font-size);   
  font-weight: var(--main-month-year-title-weight); 
  color: var(--month-color-themed);
  white-space: nowrap;
  cursor: pointer;
}
.month-header-nav {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}
.month-header-nav button {
  height: var(--nav-button-height);
  min-height: var(--nav-button-height);
  padding: 0; /* Remove horizontal padding */
  width: var(--nav-button-height); /* Make the button square */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

/* Accent color for the locked popup button on desktop */
.month-header-nav button.popup-locked .svg-icon {
    color: var(--interactive-accent);
}

/* Specific override for mobile to ensure accent color is applied */
body.is-mobile .month-header-nav button.popup-locked .svg-icon {
    color: var(--interactive-accent);
}

/* --- Chevron Button Animation --- */
.month-header-nav button[aria-label="Toggle calendar visibility"] .svg-icon {
  transition: transform 0.3s ease-in-out;
}
.period-month-container.calendar-collapsed .month-header-nav button[aria-label="Toggle calendar visibility"] .svg-icon {
  transform: rotate(180deg);
}
body.is-mobile .month-header-nav button .svg-icon {
  width: 18px;
  height: 18px;
  color: var(--icon-color);
  flex-shrink: 0;
}
/* --- Calendar Collapse Animation --- */
.calendar-table-wrapper {
  flex-shrink: 0;
  max-height: 500px; 
  transition: max-height 0.3s ease-in-out, margin-bottom 0.3s ease-in-out;
  overflow: hidden;
  margin-bottom: 0.5rem;
}
.period-month-container.calendar-collapsed .calendar-table-wrapper {
  max-height: 0;
  margin-bottom: 0;
}

/* --- Calendar Table --- */
.period-calendar-table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed;
}
.period-calendar-table th, .period-calendar-table td {
  text-align: center;
  vertical-align: middle;
  padding: 0;
  font-size: var(--header-font-size);
}
.period-calendar-table th {
    vertical-align: middle;
}

.period-calendar-table th {
  font-weight: var(--header-row-font-weight);
  height: 2.5em;
}
.period-calendar-table tbody td {
 cursor: pointer;
 overflow: hidden; 
 position: relative;
}
.period-month-container:not(.hide-grid) .period-calendar-table td {
    border: var(--calendar-grid-gap-width) solid var(--background-modifier-border);
}








/* 
.period-month-container.hide-grid.tabs-are-visible:not(.vertical-view-active) .period-calendar-table tbody tr:last-child td {
  border-bottom: 1px solid var(--background-modifier-border);
}
*/

/* --- Rounded Row Highlight --- */
.period-calendar-table .current-week-row td:first-child {
    border-top-left-radius: 6px;
    border-bottom-left-radius: 6px;
}

.period-calendar-table .current-week-row td:last-child {
    border-top-right-radius: 6px;
    border-bottom-right-radius: 6px;
}

.period-calendar-table tbody td:not(.pw-label-cell):not(.week-number-cell):hover .day-content {
  background-color: var(--date-cell-hover-color-themed) !important;
  border-radius: 6px;
  transition: background-color 0.15s ease;
}

/* Override even inline styles with !important on hover */
.period-calendar-table tbody td:not(.pw-label-cell):not(.week-number-cell):hover .day-content[style] {
    background-color: var(--date-cell-hover-color-themed) !important;
}

body .period-month-container.today-style-cell .today-cell .day-content {
  background-color: var(--today-highlight-color-themed);
  border-radius: 6px;
}

body .period-month-container.today-style-cell .period-calendar-table tbody tr.current-week-row td.today-cell .day-content {
    background-color: var(--today-highlight-color-themed) !important;
}

.period-month-container.today-style-circle .today-cell {
    position: relative; 
}
.period-month-container.today-style-circle .today-cell .day-number {
    background-color: var(--today-circle-color);
    /*color: var(--text-on-accent); Make text high-contrast */
    position: relative;
    z-index: 2;
    border-radius: 50%; /* Make it a circle */
    width: 1.5em;       /* was 1.7 Slightly increase size for better padding */
    height: 1.5em;      /* was 1.7 */ 
    display: flex;      /* Use flexbox for centering text */
    align-items: center; /* Center text vertically */
    justify-content: center; /* Center text horizontally */
    /* 'margin: auto' is removed to allow the parent grid to handle centering */
}

.period-month-container.today-style-number .today-cell .day-number {
    /*color: var(--text-on-accent);*/
    background-color: var(--today-circle-color);
    border-radius: 6px; /* A slightly smaller corner radius */
    padding: 1px 3px; /* Minimal padding for a tight fit */
    display: inline-block;
    position: relative;
    z-index: 2; /* Ensures it's drawn on top of the heatmap */
}

.period-calendar-table .pw-label-cell,
.period-calendar-table .week-number-cell {
  font-weight: var(--pw-column-font-weight);
  font-size: var(--header-font-size);
  position: relative;
}

/* --- Period/Week Column Separator Line --- */
.period-calendar-table tbody td.first-date-column::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 1px;
    background-color: var(--pw-separator-color);
    z-index: 1;
}

.week-dots-container {
    position: absolute;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
}

/* --- Calendar Dots Color Variables --- */
.calendar-dot {
    width: var(--calendar-dot-size);
    height: var(--calendar-dot-size);
    border-radius: 50%;
}

.ics-event-dot {
    background-color: var(--calendar-event-dot-color);
}

/* --- Calendar Layout Styles --- */
.period-month-container.layout-spacious .day-content {
    height: 3.8em;
}
.period-month-container.layout-normal .day-content {
    height: 3.0em;
}
.period-month-container.layout-condensed .day-content {
    height: 2.8em; /* Even smaller height */
    
}


/* Layout-specific rules for both dot containers */
.period-month-container.layout-spacious .dots-container,
.period-mont-container.layout-normal .week-dots-container {
    bottom: 8px;
}
.period-month-container.layout-normal .dots-container,
.period-month-container.layout-normal .week-dots-container {
    bottom: 4px;
}
.period-month-container.layout-condensed .dots-container,
.period-month-container.layout-condensed .week-dots-container {
    bottom: 2px; /* Moves dots closer to the bottom edge */
}


/* The weekly dot now just sets the color and re-uses .calendar-dot for its size */
.weekly-note-dot {
    background-color: var(--weekly-note-dot-color);
}

/* --- Calendar Day Content & Dots (REFACTORED) --- */
.day-content {
    display: grid; 
    grid-template-rows: auto 1fr minmax(10px, auto); /* 3 rows: badge(auto), number(fills space), dots(auto) */
    grid-template-areas:  /* Name the grid areas for clarity */
        "badge"
        "number"
        "dots";
    height: 3.5em;
    position: relative; /* Keep for popups */
    border-radius: 6px;
    box-sizing: border-box;
    transition: background-color 0.2s ease-in-out;
}

.day-number {
    grid-area: number; /* Place in the 'number' area */
    align-self: center;  /* Center vertically in its row */
    justify-self: center; /* Center horizontally */
    font-size: var(--day-number-font-size);
    color: var(--day-cell-font-color-themed);
}

.day-number-other-month {
    color: var(--other-month-font-color-themed) !important;
}


.dots-container {
    grid-area: dots; /* Place in the 'dots' area */
    align-self: end; /* Align to the bottom of its row */
    
    /* Simplified styles, as absolute positioning is no longer needed */
    display: flex;
    gap: 3px;
    justify-content: center;
    width: 100%;
}

/* --- Calendar Layout Styles --- */
.period-month-container.layout-spacious .dots-container  {
    padding-bottom: 10px; /* Creates space from the bottom edge */
}
.period-month-container.layout-spacious .dots-container:empty {
    padding-top: var(--calendar-dot-size);
}


.period-month-container.layout-normal .dots-container  {
    padding-bottom: 6px; /* Creates space from the bottom edge */
}
.period-month-container.layout-condensed .dots-container  {
    padding-bottom: 4px; /* Creates space from the bottom edge */
}

.task-count-badge {
    position: absolute;
    top: 2px;
    right: 3px;
    z-index: 3;
    width: 1.6em;
    height: 1.6em;
    border-radius: 50%;
    background-color: var(--task-badge-color);
    color: var(--task-badge-font-color);
    font-size: var(--task-badge-font-size);
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1; /* Prevents text from shifting vertically */
}


.calendar-dot {
  width: var(--calendar-dot-size);
  height: var(--calendar-dot-size);
  border-radius: 50%;
}
.other-note-dot { background-color: var(--other-note-dot-color); }
.modified-file-dot { background-color: var(--calendar-modified-dot-color); }
.asset-dot { background-color: var(--asset-dot-color); }
.task-dot { background-color: var(--task-dot-color); } 
.period-month-daily-note-dot { background-color: var(--daily-note-dot-color, var(--text-accent)); }
.period-month-daily-note-dot-other-month { opacity: 0.4; }

/* --- Tabs & Search Header --- */
.tabs-content-wrapper {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  min-height: 0;
}
.note-tab-header {
  display: flex;
  flex-shrink: 0;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 6px;
}
.tab-container {
  display: flex;
  align-items: center;
}
.note-tab {
  position: relative;
  flex: 0 1 auto;
  text-align: center;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-bottom: 2px solid transparent;
  font-size: var(--tab-title-font-size);
  font-weight: var(--tab-title-bold);
  white-space: nowrap;
}
.note-tab:hover { background-color: var(--background-modifier-hover); }
.note-tab.active {
  border-bottom-color: var(--selected-tab-color);
}
.note-tab.dragging {
  opacity: 0.5;
  cursor: grabbing;
}
.note-tab.drag-over-indicator-before::before,
.note-tab.drag-over-indicator-after::after {
  content: '';
  position: absolute;
  top: 10%;
  bottom: 10%;
  width: 2px;
  background-color: var(--selected-tab-color);
}
.note-tab.drag-over-indicator-before::before { left: 0; }
.note-tab.drag-over-indicator-after::after { right: 0; }
.search-wrapper {
  flex-grow: 1;
  display: flex;
  justify-content: flex-end;
  padding-right: 8px;
}

/* --- Unified Search Input --- */
.pm-search-container {
    display: flex;
    align-items: center;
    position: relative;
    width: 100%;
}
.pm-search-input {
    background-color: var(--background-secondary);
    border: 1px solid var(--background-modifier-border);
    border-radius: var(--radius-s);
    color: var(--text-normal);
    width: 100%;
    padding: 4px 28px 4px 8px;
    box-sizing: border-box;
    line-height: var(--line-height-normal);
}
.pm-search-input:focus {
    border-color: var(--interactive-accent);
    box-shadow: 0 0 0 1px var(--interactive-accent);
}

/* --- Scratchpad Content & Buttons --- */
.scratchpad-wrapper {
  flex: 1 1 auto;
  display: grid;
  width: 100%;
  height: 100%;
  position: relative;
}
.scratch-content:focus {
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
}
/* This is the visual cutout */
.scratchpad-wrapper::before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  width: 56px;
  height: 64px;
  background-color: var(--background-secondary);
  z-index: 3;
  border-bottom-left-radius: var(--radius-m);
}
.scratchpad-wrapper.markdown-preview-view {
  align-content: start; 
}
.scratchpad-wrapper.markdown-preview-view p {
  margin-block-start: 0 !important;
  margin-block-end: 0.5em !important; 
}
.scratchpad-actions-container {
  position: absolute;
  top: 8px;
  right: 8px;
  z-index: 10;
  display: flex;
  flex-direction: column;
  gap: 6px;
}
.scratchpad-action-btn {
  cursor: pointer;
  background-color: var(--background-modifier-hover);
  border: 1px solid var(--background-modifier-border);
  border-radius: var(--radius-s);
  padding: 4px;
  line-height: 1;
  display: flex;
  align-items: center;
  justify-content: center;
}
.scratchpad-action-btn .svg-icon {
    width: 16px;
    height: 16px;
}
.scratchpad-action-btn:hover {
  background-color: var(--background-modifier-border);
}

/* --- Scratchpad Textarea & Highlighter --- */
.scratch-base {
  margin: 0;
  padding: 0.75rem 3.5rem 0.5rem 0.5rem;
  border: none;
  font-family: var(--scratch-font-family);
  font-size: var(--scratch-font-size);
  font-weight: var(--scratch-bold);
  line-height: 1.5;
  white-space: pre-wrap;
  word-break: break-word;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  grid-area: 1 / 1;
  overflow: auto;
}
.scratch-highlighter {
  z-index: 1;
  color: transparent;
  pointer-events: none;
}
.scratch-highlighter mark {
  color: transparent;
  background-color: var(--scratchpad-highlight-color);
  border-radius: 3px;
}
.scratch-content {
  z-index: 2;
  background-color: transparent;
  resize: none;
}
.scratch-content:hover {
  background-color: transparent !important;
}
.scratch-content::selection {
  background-color: var(--scratchpad-highlight-color) !important;
}

/* --- Notes & Tasks List Styles --- */
.notes-container, .tasks-container {
  overflow-y: auto;
  flex: 1 1 auto;
  min-height: 0;
  padding: 4px 4px 48px;
}
.note-row, .task-row {
  display: flex;
  align-items: center;
  padding: 8px;
  border-radius: 8px;
  cursor: pointer;
  outline: none;
  width: 100%;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
}
.note-row {
  gap: 1em;
}
.task-row {
  gap: 0.5em;
}
.task-row .task-text > p {
    margin: 0;
    padding: 0;
}
.note-row:hover, .task-row:hover, .note-row:focus, .task-row:focus {
  background-color: var(--notes-hover-color);
}
.note-status-dot { 
  width: 8px; 
  height: 8px; 
  border-radius: 50%; 
  flex-shrink: 0; 
}
.note-status-dot-created { background-color: var(--note-created-color); }
.note-status-dot-modified { background-color: var(--note-modified-color); }
.note-row .note-title-wrapper { 
  display: flex; 
  align-items: flex-start;
  gap: 6px; 
  flex: 1; 
  min-width: 0; 
}
.note-row .note-title { 
  white-space: nowrap; 
  overflow: hidden; 
  text-overflow: ellipsis; 
  font-size: var(--notes-font-size); 
  font-weight: var(--notes-bold); 
}
.note-row .note-meta-container {
  display: flex;
  align-items: center;
  gap: 1em;
  flex-shrink: 0;
  margin-left: 1em;
}
.note-row .note-file-size {
  font-size: 0.8em;
  color: var(--text-muted);
  width: 65px;
  text-align: right;
}
.note-row .note-mod-date { 
  white-space: nowrap; 
  font-size: 0.8em; 
  color: var(--text-muted);
  width: 85px;
  text-align: right 
}

/* --- Tasks Specific Styles --- */
.task-group-container {
  margin-bottom: 10px;
  padding: 8px;
  border-radius: 8px;
}

/* --- Task Group Collapse Styles --- */
.task-group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  user-select: none;
  font-size: var(--task-heading-font-size);
}
.task-group-header-content {
  display: flex;
  align-items: center;
  gap: 6px;
}
.task-group-collapse-icon .svg-icon {
  transition: transform 0.3s ease-in-out;
}
.task-group-container.is-collapsed .task-group-collapse-icon .svg-icon {
  transform: rotate(-180deg);
}
.task-list-wrapper {
  transition: height 0.35s ease-in-out, opacity 0.35s ease-in-out;
  overflow: hidden;
  opacity: 1;
  height: var(--task-list-height, auto);
}

.task-group-container.is-collapsed .task-list-wrapper {
  height: 0;
  opacity: 0;
}


.task-group-empty-message {
  font-style: italic;
  color: var(--text-muted);
  padding: 4px 0;
  font-size: 0.9em;
}
.task-row .task-text {
  flex-grow: 1;
  font-size: var(--task-text-font-size);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.task-row .task-text.completed {
  text-decoration: line-through;
  color: var(--text-muted);
}
.tasks-container.show-full-text .task-row {
  align-items: flex-start;
}
.tasks-container.show-full-text .task-text {
  white-space: normal;
  word-break: break-word;
}
.tasks-container.show-full-text .task-row .task-checkbox {
  margin-top: 2px;
}

/* --- Popups & Tooltips --- */
/* Common base styles for popups */
.other-notes-popup, .custom-suggestion-container {
    position: absolute;
    z-index: 100;
    background-color: var(--background-secondary);
    border: 1px solid #4a4a4a;
    border-radius: 15px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    max-width: 650px;
}

/* Main popup specific styles */
.other-notes-popup {
    padding: 0;
    display: flex;
    flex-direction: column;
    overflow: hidden; /* Hide overflow on the main container */
    max-height: 250px; /* Increased slightly for mobile header */
}

/* Popup header */
.popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    border-bottom: 1px solid var(--background-modifier-border);
    flex-shrink: 0; /* Prevent header from shrinking */
    cursor: pointer;
    gap: 10px;
}
.popup-header-title {
    font-weight: normal;
    color: var(--text-muted);
    flex-grow: 1; /* Allow title to take available space */
    flex-shrink: 1; /* Allow title to shrink if needed */
    min-width: 0; /* Important for text-overflow to work with flex items */
    white-space: nowrap; /* Prevent title from wrapping */
    overflow: hidden; /* Hide overflow */
    text-overflow: ellipsis; /* Add ellipsis for long titles */
    font-size: --var(--other-note-popup-font-size);
}

.popup-close-btn {
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    /* Default for DARK theme: Light grey circle */
    background-color: #9c9b9b; 
    /* Default for DARK theme: Dark 'x' icon */
    color: #383838; 
    transition: background-color 0.1s ease-in-out, color 0.1s ease-in-out;
}

.popup-close-btn:hover {
    /* Hover for DARK theme: Even lighter circle */
    background-color: #f5f5f5;
}

/* --- Light Theme Overrides --- */
body.theme-light .popup-close-btn {
    /* Default for LIGHT theme: Dark grey circle */
    background-color: #5c5c5c;
    /* Default for LIGHT theme: White 'x' icon */
    color: #ffffff;
}

body.theme-light .popup-close-btn:hover {
    /* Hover for LIGHT theme: Even darker circle */
    background-color: #383838;
}

.popup-close-btn .svg-icon {
    width: 14px;
    height: 14px;
}


/* Content wrapper for scrolling and padding */
.popup-content-wrapper {
    padding: 8px;
    overflow-y: auto;
}

/* Suggestion container specific styles */
.custom-suggestion-container {
    z-index: 999;
    margin-top: 4px;
    padding: 8px;
    max-height: 200px;
    overflow-y: auto;
}

.other-notes-popup-item {
  display: flex; 
  align-items: flex-start; 
  gap: 8px; 
  padding: 8px; 
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer; 
  white-space: normal;
  word-break: break-word; 
  text-overflow: ellipsis; 
  font-size: var(--other-note-popup-font-size);
}
.other-notes-popup-item:hover { 
  background-color: var(--background-modifier-hover); 
}
.other-notes-popup-item .svg-icon {
  flex-shrink: 0;
  width: 1.2em;
  height: 1.2em;
}
.note-row .note-status-dot,
.other-notes-popup-item .popup-file-dot,
.other-notes-popup-item .popup-asset-thumbnail {
    margin-top: 5px; 
}
.other-notes-popup-item p {
    margin: 0;
}
.popup-file-dot { 
  width: 8px; 
  height: 8px; 
  border-radius: 50%; 
  flex-shrink: 0; 
}
.custom-suggestion-item { 
  padding: 8px 12px; 
  cursor: pointer; 
  font-size: var(--font-ui-small); 
}
.custom-suggestion-item:hover { 
  background-color: var(--background-modifier-hover); 
}
.setting-item-control { 
  position: relative; 
}
body:has(.note-title-wrapper:hover) .tooltip, 
body:has(.note-title-cell:hover) .tooltip,
body:has(.task-text:hover) .tooltip {
  text-align: left; 
  padding: 6px 10px; 
  white-space: pre-wrap; 
  max-width: 400px; 
  transition-delay: 0.5s !important; 
  background-color: var(--background-secondary); 
  box-shadow: 0 4px 12px rgba(0,0,0,0.2); 
  border-radius: 15px; 
  border: 1px solid #4a4a4a; 
  font-size: var(--other-note-popup-font-size); 
  color: var(--text-normal); 
  font-weight: normal;
}


/* --- Vertical View --- */
.vertical-calendar-scroller { 
  flex: 1; 
  overflow-y: auto; 
  padding: 0 0.5rem; 
}
.vertical-month-wrapper { 
  margin-bottom: 2rem; 
}
.vertical-month-title {
  font-size: var(--main-month-year-title-font-size);
  font-weight: var(--main-month-year-title-weight);
  color: var(--month-color-themed);
  position: sticky; 
  top: 0; 
  background-color: var(--background-secondary);
  z-index: 10;
  margin: 0.6rem 0; 
  height: 2rem; 
  display: flex; 
  align-items: center; 
  justify-content: center;
}
.period-month-container.vertical-view-active .tabs-content-wrapper { display: none; }
.period-month-container:not(.vertical-view-active) .vertical-calendar-scroller { display: none; }

/* --- Mobile-Specific Overrides --- */
.is-mobile .notes-table { 
  width: 100%; 
  border-collapse: collapse; 
  table-layout: fixed; 
}
.is-mobile .notes-table-row { 
  cursor: pointer; 
  border-bottom: 1px solid var(--background-modifier-border); 
}
.is-mobile .notes-table .note-title-cell, .is-mobile .notes-table .note-date-cell { 
  padding: 0.6rem 0.5rem; 
  vertical-align: top; 
}
.is-mobile .notes-table .note-title-cell { 
  display: flex; 
  align-items: center; 
  gap: 8px; 
  white-space: normal; 
  word-break: break-word; 
  font-size: var(--notes-font-size); 
  font-weight: var(--notes-bold); 
}
.is-mobile .notes-table .note-date-cell { 
  width: 85px; 
  text-align: right; 
  white-space: nowrap; 
  font-size: 0.8em; 
  color: var(--text-muted); 
}
.is-mobile .period-calendar-table th, .is-mobile .period-calendar-table .pw-label-cell { 
  font-size: 12px; 
  padding: 2px 0; 
}
.is-mobile .period-calendar-table .day-number { 
  font-size: 13px; 
}

.period-calendar-table .pw-label-cell .day-number,
.period-calendar-table .week-number-cell .day-number {
    font-size: inherit; /* Inherit the correct font size from the parent cell */
}


/* Default row height */
.period-calendar-table tbody tr {
    height: 40px;
    min-height: 40px;
}

.period-calendar-table tbody td {
    min-height: 40px;
}

/* Adjust row height for condensed layout */
.period-month-container.layout-condensed .period-calendar-table tbody tr {
    height: 36px;
    min-height: 36px;
}

.period-month-container.layout-condensed .period-calendar-table tbody td {
    min-height: 36px;
}

/* Adjust row height for spacious layout */
.period-month-container.layout-spacious .period-calendar-table tbody tr {
    height: 50px;
    min-height: 50px;
}

.period-month-container.layout-spacious .period-calendar-table tbody td {
    min-height: 50px;
}


/* --- Misc --- */
.period-month-container .svg-icon {
  color: var(--icon-color, currentColor);
}

/* --- Unified clear button for all search inputs --- */
.search-input-clear-btn {
    position: absolute;
    right: 6px;
    top: 50%;
    transform: translateY(-50%);
    visibility: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.1s ease-in-out;
    background-color: #9c9b9b;
    /* Color is now set directly on the icon rule below */
}

.search-input-clear-btn:hover {
    background-color: #f5f5f5;
}

.search-input-clear-btn .svg-icon {
    width: 13px;
    height: 13px;
    /* FIX: Force the icon color to be dark */
    color: #383838 !important;
}

/* --- Light Theme Overrides --- */
body.theme-light .search-input-clear-btn {
    background-color: #5c5c5c;
}

body.theme-light .search-input-clear-btn:hover {
    background-color: #383838;
}

body.theme-light .search-input-clear-btn .svg-icon {
    /* FIX: Force the icon color to be white in the light theme */
    color: #ffffff !important;
}

/* --- Task Header Icons --- */
.task-group-header .icon {
  display: flex;
  align-items: center;
}
.task-group-header .icon .svg-icon {
  /*width: var(--task-heading-font-size);
  height: var(--task-heading-font-size);
*/
  }

/* --- Tab Icons --- */
.tab-icon {
  width: 1.2em;
  height: 1.2em;
}
.note-tab {
  display: flex;
  align-items: center;
  gap: 0.5em;
}

/* --- Asset List Styles --- */
.asset-thumbnail, .popup-asset-thumbnail {
  width: 28px;
  height: 28px;
  border-radius: var(--radius-s);
  object-fit: cover;
}
.popup-asset-thumbnail {
  width: 22px;
  height: 22px;
}
.asset-icon-container, .asset-thumbnail-container {
  width: 28px;
  height: 28px;
  flex-shrink: 0;
  margin-right: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.asset-icon-container .svg-icon {
  width: 20px;
  height: 20px;
}
.asset-action-icon {
  position: relative;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20px;
  height: 20px;
  margin-right: 6px;
}
.asset-action-icon > div {
  position: absolute;
  transition: opacity 0.2s ease-in-out;
}
.asset-action-icon .svg-icon {
  width: 16px;
  height: 16px;
}
.asset-action-icon div:nth-child(2) {
  opacity: 0;
}
.note-row:hover .asset-action-icon div:nth-child(1) {
  opacity: 0;
}
.note-row:hover .asset-action-icon div:nth-child(2) {
  opacity: 1;
}
.asset-action-icon:hover .svg-icon {
    color: var(--text-error);
}

/* --- Asset Grid Styles --- */
.note-list-wrapper.assets-grid-view {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
    padding-top: 8px;
}
.asset-grid-item {
    flex-basis: calc(50% - 8px); 
    display: flex;
    flex-direction: column;
    cursor: pointer;
    border-radius: 12px;
    background-color: var(--background-secondary);
    overflow: hidden;
    border: 1px solid var(--background-modifier-border);
    padding: 8px;
    box-sizing: border-box; /* THIS IS THE CRITICAL MISSING LINE */
}
.asset-grid-preview {
    width: 100%;
    aspect-ratio: 4 / 3;
    background-color: var(--background-modifier-hover);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden; 
    border-radius: 8px;  
}
.asset-grid-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.asset-grid-name {
    padding: 8px 4px 0; /* Adjusted padding */
    margin-top: 8px; /* Adds space between the image and text */
    font-size: 0.9em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-top: 1px solid var(--background-modifier-border);
}

.asset-grid-item:hover {
  border-color: rgba(200, 200, 200, 0.75); /* A lighter, semi-transparent gray */
}

/* --- Settings Tabs --- */
.period-settings-container {
  display: flex;
  height: 100%;
}
.period-settings-nav {
  display: flex;
  flex-direction: column;
  padding-right: 1.5rem;
  border-right: 1px solid var(--background-modifier-border);
  width: 170px;
  flex-shrink: 0;
}
.period-settings-nav-button {
      background: none;
      border: none;
      text-align: left;
      padding: 0.75rem 0.5rem;
      margin-bottom: 0.25rem;
      cursor: pointer;
      border-radius: var(--radius-m);
      color: var(--text-muted);
      font-size: var(--font-ui-small);
}
.period-settings-nav-button:hover {
      background-color: var(--background-modifier-hover);
      color: var(--text-normal);
}
.period-settings-nav-button.is-active {
      background-color: var(--interactive-accent);
      color: var(--text-on-accent);
      font-weight: bold;
}
.period-settings-content {
      flex-grow: 1;
      padding-left: 1.5rem;
      overflow-y: auto;
}
.popup-section-header {
    font-size: 0.8em;
    font-weight: bold;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 10px 8px 4px;
    padding: 0;
}
.popup-separator {
    border-bottom: 1px solid var(--background-modifier-border);
    margin: 6px 8px;
}
.other-notes-popup .popup-section-header:first-child {
    margin-top: 4px;
}
.note-group-header {
    font-size: 0.85em;
    font-weight: bold;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    padding: 12px 4px 4px;
}
.note-title-path-wrapper,
.other-notes-popup-item .note-title-path-wrapper {
    display: flex;
    flex-direction: column;
    min-width: 0; 
}
.note-row .note-path,
.other-notes-popup-item .note-path {
    font-size: 0.8em;
    color: var(--text-muted);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-top: 2px;
}

/* --- Final & Unified Task Styling --- */
.task-checkbox-symbol {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.35em;
    height: 1.35em;
    font-size: 1em;
    cursor: pointer;
    flex-shrink: 0;
    border: 1px solid var(--text-faint);
    border-radius: 50%;
    transition: all 0.1s ease-in-out;
    background-color: var(--background-primary);
}
.task-row:hover .task-checkbox-symbol,
.other-notes-popup-item:hover .task-checkbox-symbol {
    border-color: var(--text-normal);
}
.task-checkbox-symbol:has(.svg-icon) {
    border-color: transparent !important;
}
.task-checkbox-symbol.is-completed {
    background-color: var(--interactive-accent);
    border-color: var(--interactive-accent) !important;
}
.task-checkbox-symbol .svg-icon {
    width: 100%;
    height: 100%;
    padding: 0.1em;
    fill: currentColor;
}
.task-checkbox-symbol.is-completed .svg-icon {
    color: var(--text-on-accent) !important;
}

/* --- Note Group Collapse Styles --- */
.note-group-container {
  border: 1px solid var(--background-modifier-border); /* Adds a subtle, theme-aware border */
  border-radius: var(--radius-l); /* Rounds the corners of the card */
  padding: 0 8px 8px; /* Adds some internal spacing for the note list */
  margin-bottom: 12px; /* Increases space between cards */
}
.note-group-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  user-select: none;
  font-size: 0.85em;
  font-weight: bold;
  color: var(--text-muted);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  padding: 12px 4px 4px;
}
.note-group-header:hover {
  color: var(--text-normal);
}
.note-group-header-content {
  display: flex;
  align-items: center;
  gap: 6px;
}
.note-group-count {
  font-size: 0.9em;
  background-color: var(--background-modifier-border);
  border-radius: 4px;
  padding: 1px 5px;
}
.note-group-collapse-icon .svg-icon {
  transition: transform 0.2s ease-in-out;
  width: 16px;
  height: 16px;
}
.note-group-container.is-collapsed .note-group-collapse-icon .svg-icon {
  transform: rotate(-90deg);
}
.note-list-wrapper {
  overflow: hidden;
  transition: max-height 0.3s ease-in-out, margin-top 0.3s ease-in-out;
  max-height: 2000px; /* A large value to accommodate many notes */
  margin-top: 4px;
}
.note-group-container.is-collapsed .note-list-wrapper {
  max-height: 0;
  margin-top: 0;
}

/* --- Pull to Refresh Indicator --- */
.pm-refresh-indicator {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--icon-color);
    z-index: 5;
    opacity: 0;
    transform: translateY(-50px) scale(0.7);
    transition: transform 0.3s, opacity 0.3s;
}
.pm-refresh-indicator.is-pulling {
    opacity: 0.8;
}
.pm-refresh-indicator.is-ready {
    opacity: 1;
    transform: translateY(0) scale(1);
}

.pm-refresh-indicator.is-refreshing .svg-icon {
    animation: spin 1.2s linear infinite;
}
/* Re-use the spin animation from the refresh button */
@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}
/* --- Mobile Keyboard Handling --- */
.scratch-content.is-editing-mobile {
    padding-bottom: 45vh; /* 45% of the visible screen height */
}

/* Colors for custom icons */
.task-row .task-checkbox-symbol .svg-icon[data-lucide="map-pin"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="map-pin"] { color: var(--text-accent) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="flame"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="flame"] { color: var(--text-warning) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="slash"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="slash"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="piggy-bank"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="piggy-bank"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="thumbs-up"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="thumbs-up"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="trophy"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="trophy"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="arrow-up"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="arrow-up"] { color: var(--text-success) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="thumbs-down"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="thumbs-down"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="arrow-down"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="arrow-down"] { color: var(--text-error) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="star"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="star"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="lightbulb"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="lightbulb"] { color: var(--color-yellow) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="bookmark"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="bookmark"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="info"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="info"] { color: var(--color-blue) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="help-circle"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="help-circle"] { color: var(--color-cyan) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="key"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="key"] { color: goldenrod !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="minus"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="minus"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="quote"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="quote"] { color: var(--text-muted) !important; }
.task-row .task-checkbox-symbol .svg-icon[data-lucide="arrow-right"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="arrow-right"],
.task-row .task-checkbox-symbol .svg-icon[data-lucide="arrow-left"],
.other-notes-popup-item .task-checkbox-symbol .svg-icon[data-lucide="arrow-left"] { color: var(--text-normal) !important; }




/* ==========================================================================
   WEEKEND/WEEK HIGHLIGHTING LOGIC
   ========================================================================== */

/* 1. Neutralize weekend shade inside the current week row */
.period-calendar-table tbody tr.current-week-row {
  --weekend-shade-color-themed: transparent;
}

/* 2. Regular weekend shading for SUNDAY-START weeks */
.period-month-container:not(.monday-start).weekend-shading-enabled:not(.has-pw-column):not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(1),
.period-month-container:not(.monday-start).weekend-shading-enabled:not(.has-pw-column):not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(7),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-pw-column:not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(2),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-pw-column:not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(8),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-week-numbers:not(.has-pw-column)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(2),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-week-numbers:not(.has-pw-column)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(8),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-pw-column.has-week-numbers
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(3),
.period-month-container:not(.monday-start).weekend-shading-enabled.has-pw-column.has-week-numbers
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(9) {
  background-color: var(--weekend-shade-color-themed);
}

/* 3. Weekend shading for MONDAY-START weeks */
.period-month-container.monday-start.weekend-shading-enabled:not(.has-pw-column):not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(6),
.period-month-container.monday-start.weekend-shading-enabled:not(.has-pw-column):not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(7),
.period-month-container.monday-start.weekend-shading-enabled.has-pw-column:not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(7),
.period-month-container.monday-start.weekend-shading-enabled.has-pw-column:not(.has-week-numbers)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(8),
.period-month-container.monday-start.weekend-shading-enabled.has-week-numbers:not(.has-pw-column)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(7),
.period-month-container.monday-start.weekend-shading-enabled.has-week-numbers:not(.has-pw-column)
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(8),
.period-month-container.monday-start.weekend-shading-enabled.has-pw-column.has-week-numbers
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(8),
.period-month-container.monday-start.weekend-shading-enabled.has-pw-column.has-week-numbers
  .period-calendar-table tbody tr:not(.current-week-row) td:nth-child(9) {
  background-color: var(--weekend-shade-color-themed);
}

/* 4. Make day-content transparent by default */
.period-calendar-table .day-content {
  background: transparent !important;
}

/* 5. If a cell uses border styling (today/tasks), keep its background transparent */
.period-calendar-table .day-content[style*="border"] {
  background: transparent !important;
}

/* 6. Always highlight the current week row via the inner content */
.period-month-container .period-calendar-table tbody tr.current-week-row td .day-content {
  background: var(--row-highlight-color-themed) !important;
}

.tab-order-container {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
}

.draggable-item {
  display: flex;
  align-items: center;
  padding: 8px;
  background-color: var(--background-secondary-alt);
  border-radius: 6px;
  border: 1px solid var(--background-modifier-border);
  cursor: grab;
}

.draggable-item.dragging {
  opacity: 0.5;
  background-color: var(--background-modifier-hover);
}

.drag-handle {
  margin-right: 12px;
  color: var(--text-muted);
}

.setting-spacer {
  height: 20px; /* Or use margin-top, e.g., margin-top: 20px; */
}

.note-group-header-content {
  cursor: pointer;
}

.pinned-sort-indicator {
  font-size: 0.85em;
  color: var(--text-muted);
  font-weight: normal;
  margin-left: 6px;
  /* Prevents the indicator from being selected as text when clicking */
  user-select: none; 
}

/* Hide drag handles by default in main UI */
.note-row .drag-handle {
    display: none;
    margin-right: 8px;
    color: var(--text-muted);
    cursor: grab;
}

/* Show drag handles when reorder mode is active */
.pinned-notes-reorder-mode .note-row .drag-handle {
    display: flex;
    align-items: center;
}

/* Visual feedback during drag */
.note-row.dragging {
    opacity: 0.5;
    background-color: var(--background-modifier-hover);
}

    `;

// === Helper Functions and Classes ===
/**
 * Parses an "rgba(r, g, b, a)" string into an object.
 * @param {string} rgbaString The input string.
 * @returns {{r: number, g: number, b: number, a: number} | null}
 */
function parseRgbaString(rgbaString) {
    if (!rgbaString) return null;
    const match = rgbaString.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/);
    if (!match) return null;
    return {
        r: parseInt(match[1], 10),
        g: parseInt(match[2], 10),
        b: parseInt(match[3], 10),
        a: match[4] !== undefined ? parseFloat(match[4]) : 1,
    };
}

/**
 * Blends two RGBA color objects based on a mix factor.
 * @param {{r,g,b,a}} color1 The start color object.
 * @param {{r,g,b,a}} color2 The end color object.
 * @param {number} factor A value from 0 (100% color1) to 1 (100% color2).
 * @returns {string} The resulting "rgba(...)" string.
 */
function blendRgbaColors(color1, color2, factor) {
    const r = Math.round(color1.r * (1 - factor) + color2.r * factor);
    const g = Math.round(color1.g * (1 - factor) + color2.g * factor);
    const b = Math.round(color1.b * (1 - factor) + color2.b * factor);
    const a = (color1.a * (1 - factor) + color2.a * factor).toFixed(2);
    return `rgba(${r}, ${g}, ${b}, ${a})`;
}

/**
 * A reusable confirmation modal dialog.
 */
class ConfirmationModal extends Modal {
    constructor(app, title, message, onConfirm, confirmText = "Confirm") {
        super(app);
        this.title = title;
        this.message = message;
        this.onConfirm = onConfirm;
        this.confirmText = confirmText;
    }

    onOpen() {
        const { contentEl } = this;
        contentEl.createEl("h1", { text: this.title });
        contentEl.createEl("p", { text: this.message });
        const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });

        buttonContainer.createEl("button", {
            text: this.confirmText,
            cls: "mod-cta",
        }).addEventListener("click", () => {
            this.close();
            this.onConfirm();
        });

        buttonContainer.createEl("button", {
            text: "Cancel",
        }).addEventListener("click", () => {
            this.close();
        });
    }

    onClose() {
        this.contentEl.empty();
    }
}

/* A modal dialog that presents multiple action choices to the user when creating a new daily note. */
class ActionChoiceModal extends Modal {
    constructor(app, title, message, buttons) {
        super(app);
        this.title = title;
        this.message = message;
        this.buttons = buttons;
    }

    onOpen() {
        const { contentEl } = this;
        contentEl.createEl('h2', { text: this.title });
        if (this.message) {
            contentEl.createEl('p', { text: this.message });
        }

        const buttonContainer = contentEl.createDiv({ cls: 'modal-button-container' });

        for (const buttonConfig of this.buttons) {
            const btn = buttonContainer.createEl('button', { text: buttonConfig.text });
            if (buttonConfig.cls) {
                btn.addClass(buttonConfig.cls);
            }
            btn.addEventListener('click', () => {
                this.close();
                if (buttonConfig.action) {
                    buttonConfig.action();
                }
            });
        }
    }

    onClose() {
        this.contentEl.empty();
    }
}

/**
 * Calculates the custom period and week number based on a given start date.
 * A year is divided into 13 periods of 4 weeks each.
 * @param {Date} date - The date to calculate for.
 * @param {string} startOfPeriodsOverride - The start date in "YYYY-MM-DD" format from settings.
 * @returns {{period: number, week: number, weekSinceStart: number}} An object with the period, week, and total weeks since start.
 */
function getPeriodWeek(date = new Date(), startOfPeriodsOverride) {
    const defaultStartString = "2025-03-02";
    let startString = startOfPeriodsOverride || defaultStartString;

    let startMoment = moment(startString, "YYYY-MM-DD", true);

    if (!startMoment.isValid()) {
        console.warn(
            `[Calendar Period Week Notes] Invalid "Start of Period 1" date format: "${startString}". ` +
            `It must be YYYY-MM-DD. Falling back to default date ${defaultStartString}.`
        );
        startMoment = moment(defaultStartString, "YYYY-MM-DD", true);
    }

    // Use moment's built-in diff method to correctly calculate the number of
    // calendar days. This automatically handles Daylight Saving Time and other offsets.
    const daysSinceStart = moment(date).startOf('day').diff(startMoment.startOf('day'), 'days');
    const weekNumber = Math.floor(daysSinceStart / 7);
    const periodIndex = Math.floor(weekNumber / 4);
    const period = ((periodIndex % 13) + 13) % 13 + 1;
    const week = ((weekNumber % 4) + 4) % 4 + 1;

    return { period, week, weekSinceStart: weekNumber + 1 };
}

/**
 * Parses a file's content to find all tasks and their metadata.
 * @param {TFile} file The file to parse.
 * @param {string} content The content of the file.
 * @returns {Array<object>} An array of structured task objects.
 */
function parseTasksFromFile(file, content) {
    const tasks = [];
    const lines = content.split('\n');

    const taskRegex = /^\s*(?:-|\d+\.)\s*\[(.)\]\s*(.*)/;
    const dueDateRegex = /üìÖ\s*(\d{4}-\d{2}-\d{2})/;
    const completionDateRegex = /‚úÖ\s*(\d{4}-\d{2}-\d{2})/;
    const tagRegex = /#([a-zA-Z0-9_\-\/]+)/g;

    lines.forEach((line, index) => {
        const match = line.match(taskRegex);
        if (match) {
            const status = match[1];
            const text = match[2];
            const isCompleted = status.toLowerCase() === 'x';

            const dueDateMatch = text.match(dueDateRegex);
            const dueDate = dueDateMatch ? moment(dueDateMatch[1], "YYYY-MM-DD").toDate() : null;

            const completionDateMatch = text.match(completionDateRegex);
            const completionDate = completionDateMatch ? moment(completionDateMatch[1], "YYYY-MM-DD").toDate() : null;

            const tags = Array.from(text.matchAll(tagRegex)).map(m => m[1]);

            let displayText = text.trim();
            // Optionally clean up the display text
            if (!isCompleted) {
                displayText = displayText.replace(completionDateRegex, '').trim();
            }

            tasks.push({
                text: displayText,
                originalText: text, // Keep original text for modifications
                file,
                lineNumber: index,
                dueDate,
                tags,
                status,
                completionDate
            });
        }
    });
    return tasks;
}

/**
 * Formats a date to show time if it's today, otherwise shows the full date.
 * @param {Date} date The date to format.
 * @returns {string} The formatted date string.
 */
function formatDateTime(date) {
    const now = new Date();
    if (isSameDay(date, now)) return moment(date).format('HH:mm');
    return moment(date).format('DD-MM-YYYY');
}

// Utility wrappers around moment.js for consistent date handling.
function formatDate(date, format) { return moment(date).format(format); }
function formatMonthTitle(date, format) { return moment(date).format(format); }
function isSameDay(a, b) { return moment(a).isSame(b, 'day'); }


/**
 * The main view class for the plugin, handling all rendering and user interaction.
 */
class PeriodMonthView extends ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
        this.calendarHeaderRowEl = null;
        this.pinnedSortOrder = this.plugin.settings.pinnedNotesSortOrder;

        //pull down to fresh
        this.taskPullStartY = 0;
        this.taskPullDistance = 0;
        this.isTaskPulling = false;


        // --- State Management ---
        this.displayedMonth = new Date(); // The month currently shown in the calendar.
        this.isVerticalView = false;      // Toggles between single-month and vertical scroll view.
        this.isPopupLocked = false;       // Tracks if popups are globally disabled
        this.isCalendarCollapsed = false; // Toggles the visibility of the calendar grid.
        this.isScratchpadPreview = false; // Toggles scratchpad between edit and preview mode.
        this.activeTab = null;            // Tracks the currently selected tab ('scratch', 'notes', etc.).
        this.isProgrammaticScroll = false; // Prevents scroll event loops during programmatic scrolling.

        // --- Search and Data States ---
        this.notesViewMode = this.plugin.settings.notesViewMode;
        this.notesSearchTerm = "";
        this.tasksSearchTerm = "";
        this.scratchpadSearchTerm = "";
        this.assetsSearchTerm = "";
        this.collapsedNoteGroups = this.plugin.settings.collapsedNoteGroups || {};
        this.collapsedTaskGroups = this.plugin.settings.collapsedTaskGroups || {};
        this.collapsedAssetGroups = this.plugin.settings.collapsedAssetGroups || {};

        // --- Caching and Data Maps ---
        // These maps store pre-processed data to avoid re-scanning the vault on every render.
        this.noteText = "";
        this.allTasks = [];
        this.createdNotesMap = new Map();
        this.modifiedNotesMap = new Map();
        this.assetCreationMap = new Map();
        this.tasksByDate = new Map();
        this.icsEventsByDate = new Map();
        this.processedEventSignatures = new Set();
        this.taskCache = new Map(); // Caches task content of files to detect changes.
        this.fileToTaskDates = new Map(); // Tracks which dates a file has tasks for. <filePath, Set<dateKey>>
        this.isAssetsGridView = this.plugin.settings.assetsDefaultView === 'grid';
        this.unusedAssetPathsCache = new Set();
        this.isUnusedAssetCacheValid = false;

        // --- UI and Event Handling ---
        this.todayBtn = null;
        this.scratchWrapperEl = null;
        this.scratchpadViewToggleBtn = null;
        this.hoverTimeout = null;
        this.hideTimeout = null;
        this.popupEl = null;
        this.taskRefreshDebounceTimer = null;
        this.notesRefreshDebounceTimer = null;
        this.calendarRefreshDebounceTimer = null;
        this.titleUpdateTimeout = null;
        this.existingWeeklyNotes = new Set();
        this.dailyRefreshTimeout = null; // Timeout to trigger daily refresh at midnight
        this.themeObserver = null;
        this.lastKnownToday = new Date();

        // --- Mobile Keyboard Handling ---
        this.isEditingMobile = false;

        // --- Icon Mapping for Task Statuses ---
        // Maps task status symbols to Lucide icon names.
        this.taskStatusIconMap = {
            // Standard Tasks
            '/': 'slash',       // In Progress
            '-': 'minus',       // Cancelled
            '>': 'arrow-right', // Forwarded
            '<': 'arrow-left',  // Scheduling
            // Extended Tasks from your list
            '?': 'help-circle', // Question
            '!': 'flame',       // Important
            '*': 'star',        // Star
            '"': 'quote',       // Quote
            'l': 'map-pin',     // Location
            'b': 'bookmark',    // Bookmark
            'i': 'info',        // Information
            'S': 'piggy-bank',  // Savings
            'I': 'lightbulb',   // Idea
            'p': 'thumbs-up',   // Pros
            'c': 'thumbs-down', // Cons
            'f': 'flame',       // Fire (using 'flame' as 'siren' can be too strong)
            'k': 'key',         // Key
            'w': 'trophy',      // Win
            'u': 'arrow-up',    // Up
            'd': 'arrow-down',  // Down
        };
    }

    _renderTaskSymbol(checkboxEl, task) {
        checkboxEl.empty();
        checkboxEl.className = 'task-checkbox-symbol'; // Reset classes

        const status = task.status;
        const iconName = this.taskStatusIconMap[status];

        // Case 1: Task is completed
        if (status.toLowerCase() === 'x') {
            setIcon(checkboxEl, 'check');
            checkboxEl.addClass('is-completed');
            checkboxEl.style.width = '1.25em';
            checkboxEl.style.height = '1.25em';

            checkboxEl.style.backgroundColor = 'var(--interactive-accent)';
            checkboxEl.style.border = 'none';
            checkboxEl.style.borderRadius = '50%';

            const svgEl = checkboxEl.querySelector('.svg-icon');
            if (svgEl) {
                svgEl.style.width = '75%';
                svgEl.style.height = '75%';
                svgEl.style.fill = 'none'; // Do not fill the shape
                svgEl.style.stroke = 'var(--text-on-accent)'; // Use high-contrast color for the line
                svgEl.style.strokeWidth = '3px'; // Make the line thick and clear
                svgEl.style.color = 'unset'; // Unset color to prevent conflicts
            }

            // Case 2: Task has a custom icon
        } else if (iconName) {
            setIcon(checkboxEl, iconName);
            const color = this.getIconColor(iconName);
            const svgEl = checkboxEl.querySelector('.svg-icon');
            if (svgEl) {
                svgEl.style.color = color;
                svgEl.style.fill = 'currentColor';
                svgEl.style.stroke = 'none';
            }
            checkboxEl.style.width = '1.25em';
            checkboxEl.style.height = '1.25em';
            checkboxEl.style.backgroundColor = 'transparent';
            checkboxEl.style.border = 'none';
            checkboxEl.style.borderRadius = '0';

            // Case 3: Default task (e.g., incomplete)
        } else {
            checkboxEl.setText(status.trim() || ' ');
            checkboxEl.style.width = '1.15em';
            checkboxEl.style.height = '1.15em';
            checkboxEl.style.backgroundColor = 'transparent';
            checkboxEl.style.color = 'var(--text-normal)';
            checkboxEl.style.borderRadius = '50%';
            checkboxEl.style.border = '1px solid var(--text-faint)';
        }
    }

    setupReorderMode() {
        const isMac = Platform.isMacOS;
        let isReorderMode = false;

        const handleKeyDown = (e) => {
            // Use Alt key (Option on Mac) or Ctrl key (Control on Windows)
            const isModifierPressed = isMac ? e.altKey : e.ctrlKey;

            // Only activate if we're in pinned notes view AND custom sort is selected
            if (isModifierPressed && !isReorderMode &&
                this.notesViewMode === 'pinned' &&
                this.pinnedSortOrder === 'custom') {

                isReorderMode = true;
                this.containerEl.addClass('pinned-notes-reorder-mode');
                //new Notice(`Reorder mode active (${modifierKeyName}) - drag to rearrange`);
            } else if (isModifierPressed && !isReorderMode &&
                this.notesViewMode === 'pinned' &&
                this.pinnedSortOrder !== 'custom') {
                // Show message if user tries to activate reorder mode when not in custom sort
                new Notice(`Switch to Custom sort order to enable drag reordering`);
            }
        };

        const handleKeyUp = (e) => {
            const wasModifierReleased = isMac ? !e.altKey : !e.ctrlKey;

            if (wasModifierReleased && isReorderMode) {
                isReorderMode = false;
                this.containerEl.removeClass('pinned-notes-reorder-mode');
                //new Notice('Reorder mode disabled');
            }
        };

        // Register the listeners using Obsidian's API for proper cleanup
        this.registerDomEvent(document, 'keydown', handleKeyDown);
        this.registerDomEvent(document, 'keyup', handleKeyUp);
    }



    getIconColor(iconName) {
        switch (iconName) {
            case 'map-pin':
                return 'var(--text-accent)'; // Red
            case 'flame':
                return 'var(--text-warning)'; // Orange
            case 'slash':
            case 'piggy-bank':
            case 'thumbs-up':
            case 'trophy':
            case 'arrow-up':
                return 'var(--text-success)'; // Green
            case 'thumbs-down':
            case 'arrow-down':
                return 'var(--text-error)'; // Muted Red
            case 'star':
            case 'lightbulb':
                return 'var(--color-yellow)'; // Yellow
            case 'bookmark':
            case 'info':
                return 'var(--color-blue)'; // Blue
            case 'help-circle':
                return 'var(--color-cyan)'; // Cyan
            case 'key':
                return 'goldenrod'; // Gold
            case 'minus':
            case 'quote':
                return 'var(--text-muted)'; // Grey
            default:
                return 'var(--text-normal)'; // Default color for arrows, etc.
        }
    }

    async handleFileClick(file, event) {
        // The Shift key is the ultimate override. If it's pressed, always open in a new leaf.
        if (event.shiftKey) {
            await this.app.workspace.openLinkText(file.path, '', true);
            return;
        }

        // --- If Shift is NOT pressed, proceed with normal logic ---
        const isAsset = file.extension.toLowerCase() !== 'md';

        if (isAsset) {
            // It's an asset, so respect the user's default setting for assets.
            const openInNewTab = this.plugin.settings.assetsOpenAction === 'new-tab';
            await this.app.workspace.openLinkText(file.path, '', openInNewTab);
        } else {
            // It's a note file. Here we must check for an existing open leaf.
            const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
            const existingLeaf = markdownLeaves.find(leaf => leaf.view.file?.path === file.path);

            if (existingLeaf) {
                // The note is already open, so just focus on that leaf.
                this.app.workspace.setActiveLeaf(existingLeaf);
            } else {
                // The note is not open, so respect the user's default setting for notes.
                const openInNewTab = this.plugin.settings.notesOpenAction === 'new-tab';
                await this.app.workspace.getLeaf(openInNewTab).openFile(file);
            }
        }
    }

    /**
     * Renders a single note item row in a given container.
     * @param {TFile} file The note file to render.
     * @param {HTMLElement} container The parent element to append the row to.
     */
    renderNoteItem(file, container) {
        const settings = this.plugin.settings;
        const searchInputEl = this.notesSearchInputEl;

        const row = container.createDiv({ cls: 'note-row' });
        row.draggable = true;
        row.dataset.filePath = file.path;

        const dragHandle = row.createDiv({ cls: 'drag-handle' });
        setIcon(dragHandle, 'grip-vertical');

        const titleWrapper = row.createDiv({ cls: 'note-title-wrapper' });

        if (settings.showNoteTooltips) {
            const ctime = new Date(file.stat.ctime).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' });
            const mtime = new Date(file.stat.mtime).toLocaleString('en-GB', { dateStyle: 'short', timeStyle: 'short' });
            const size = `${(file.stat.size / 1024).toFixed(2)} KB`;
            const path = file.path;
            const tagsCache = this.app.metadataCache.getFileCache(file)?.tags;
            let tags = 'No tags';
            if (tagsCache && tagsCache.length > 0) {
                tags = [...new Set(tagsCache.map(t => t.tag))].join(', ');
            }
            titleWrapper.setAttribute('aria-label', `Created: ${ctime}\nModified: ${mtime}\nSize: ${size}\nPath: ${path}\nTags: ${tags}`);
        }

        if (settings.showNoteStatusDots) {
            const dot = titleWrapper.createDiv({ cls: 'note-status-dot' });
            if (this.isDailyNote(file)) {
                dot.style.backgroundColor = settings.dailyNoteDotColor;
            } else if (this.isWeeklyNote(file)) {
                dot.style.backgroundColor = settings.weeklyNoteDotColor;
            } else {
                dot.addClass(isSameDay(new Date(file.stat.ctime), new Date(file.stat.mtime)) ? 'note-status-dot-created' : 'note-status-dot-modified');
            }
        }

        const titlePathWrapper = titleWrapper.createDiv({ cls: 'note-title-path-wrapper' });
        titlePathWrapper.createDiv({ text: file.basename, cls: 'note-title' });
        if (file.parent && file.parent.path !== '/') {
            titlePathWrapper.createDiv({ text: file.parent.path, cls: 'note-path' });
        }

        row.createDiv({ text: formatDate(new Date(file.stat.mtime)), cls: 'note-mod-date' });

        let isDragging = false;

        row.addEventListener('mousedown', (e) => {
            e.clientX;
            e.clientY;
            isDragging = false;
        });

        row.addEventListener('dragstart', (e) => {
            isDragging = true;
            e.dataTransfer.setData('text/plain', file.path);
            e.dataTransfer.effectAllowed = 'move';
            setTimeout(() => row.addClass('dragging'), 0);
        });

        row.addEventListener('dragend', async () => {
            row.removeClass('dragging');
            
            // Use a brief timeout to ensure the click event has a chance to be ignored.
            setTimeout(() => { isDragging = false; }, 50);

            // Save the new order of the items in the list.
            // The `container` is the listWrapper, which holds all the note rows.
            await this.savePinnedOrder(container);
        });

        row.addEventListener('dragover', (e) => {
            e.preventDefault();
            const dragging = container.querySelector('.dragging');
            if (dragging && dragging !== row) {
                const rect = row.getBoundingClientRect();
                const isAfter = e.clientY > rect.top + rect.height / 2;
                if (isAfter) {
                    row.parentNode.insertBefore(dragging, row.nextSibling);
                } else {
                    row.parentNode.insertBefore(dragging, row);
                }
            }
        });

        // MODIFICATION: The 'drop' event listener that was here has been removed.
        // The new handler on the parent container in `populateNotes` now manages saving.

        row.addEventListener('click', (e) => {
            if (isDragging) {
                isDragging = false;
                return;
            }
            if (e.target.closest('.drag-handle')) {
                return;
            }
            this.handleFileClick(file, e);
        });

        this.addKeydownListeners(row, searchInputEl);
        this.addFileContextMenu(row, file, this.populateNotes.bind(this));
    }


    async savePinnedOrder(container) {
        // Add this line for debugging. You should see this notice pop up.
        //new Notice('Saving custom order...');

        const noteRows = container.querySelectorAll('.note-row');
        const newOrder = Array.from(noteRows).map(row => row.dataset.filePath);

        // Update the settings with the new order
        this.plugin.settings.pinnedNotesCustomOrder = newOrder;
        
        // Set the active sort mode to 'custom' since a manual sort just happened
        this.pinnedSortOrder = 'custom';
        
        await this.plugin.saveSettings();
        
        //new Notice('Custom pinned order saved!');

        // Refresh the view to ensure the header's sort indicator is updated
        await this.populateNotes();
    }


    /**
     * Formats a list of calendar events into a markdown string for template insertion.
     * @param {-} events 
     * @returns 
     */
    formatEventsForTemplate(events) {
        if (!events || events.length === 0) {
            return "";
        }

        // Retrieve the user-defined format from settings
        const formatString = this.plugin.settings.calendarEventsFormat || '- {{startTime}} - {{endTime}}: {{summary}}';

        // Sort events
        events.sort((a, b) => {
            if (a.isAllDay && !b.isAllDay) return -1;
            if (!a.isAllDay && b.isAllDay) return 1;
            if (a.isAllDay && b.isAllDay) return a.summary.localeCompare(b.summary);
            if (!a.startTime || !b.startTime) return 0;
            return a.startTime.localeCompare(b.startTime);
        });

        // Map each event to its formatted string
        const eventStrings = events.map(event => {
            let finalString;

            if (event.isAllDay) {
                // --- THE NEW LOGIC ---
                // For all-day events, replace the time placeholders with "All-day"
                // This regex looks for {{startTime}}, optional whitespace, a separator, optional whitespace, and {{endTime}}
                const timePlaceholderRegex = /{{\s*startTime\s*}}.*{{\s*endTime\s*}}/;

                finalString = formatString.replace(timePlaceholderRegex, 'All-day');

                // Now, replace the summary as usual
                finalString = finalString.replace(/{{summary}}/g, event.summary || '');

            } else {
                // For timed events, use the original logic
                const startTime = event.startTime || '';
                const endTime = event.endTime || '';

                finalString = formatString
                    .replace(/{{startTime}}/g, startTime)
                    .replace(/{{endTime}}/g, endTime)
                    .replace(/{{summary}}/g, event.summary || '');
            }

            // Trim any leftover whitespace or dangling separators
            return finalString.replace(/\s*:\s*$/, '').replace(/\s*-\s*$/, '').trim();
        });

        // Join the array of event strings with a double newline
        const eventBody = eventStrings.join('\n\n');

        // Construct the final output
        return eventBody;
    }



    /**
     * Schedules a refresh to occur at the next midnight.
     */
    scheduleDailyRefresh() {
        // Clear any existing timer to avoid duplicates
        if (this.dailyRefreshTimeout) {
            clearTimeout(this.dailyRefreshTimeout);
        }

        const now = moment();
        const endOfDay = moment().endOf('day');
        // Calculate milliseconds until the end of today, plus one to tick over to the new day
        const msUntilMidnight = endOfDay.diff(now) + 1;

        this.dailyRefreshTimeout = setTimeout(async () => {
            //console.log("Midnight refresh: Updating task view and calendar.");

            // Re-calculate all task due dates relative to the new "today"
            await this.buildTasksByDateMap();

            // Re-render the calendar to update heatmaps, badges, and today's highlight
            this.renderCalendar();

            // If the user is currently looking at the tasks tab, refresh its view
            if (this.activeTab === 'tasks') {
                await this.populateTasks();
            }

            // IMPORTANT: Schedule the next refresh for the following day
            this.scheduleDailyRefresh();

        }, msUntilMidnight);
    }

    handleViewportResize() {
        // This logic should only run on mobile
        if (!this.app.isMobile) return;

        // A threshold of 200px is a safe bet to assume the keyboard is open.
        // We compare the total window height with the currently visible area's height.
        const keyboardVisible = window.innerHeight - window.visualViewport.height > 200;

        // Toggle the class on the main plugin container
        this.containerEl.firstElementChild.classList.toggle('keyboard-visible', keyboardVisible);
    }

    async animateTaskGroup(taskListWrapper, expand) {
        // Cancel any ongoing animation on this element
        if (taskListWrapper.animation) {
            taskListWrapper.animation.cancel();
        }

        if (expand) {
            // --- EXPANDING ---
            // 1. Make the element visible so we can measure it.
            taskListWrapper.style.display = 'grid';

            // 2. READ: Get the full, unconstrained height of the content.
            const endHeight = taskListWrapper.scrollHeight;

            // 3. ANIMATE: Animate from a height of 0 to the full height.
            taskListWrapper.animation = taskListWrapper.animate([
                { height: '0px', opacity: 0 },
                { height: `${endHeight}px`, opacity: 1 }
            ], {
                duration: 350,
                easing: 'ease-in-out',
                fill: 'forwards'
            });

            // After the animation, set height to 'auto' to allow content to resize dynamically.
            taskListWrapper.animation.onfinish = () => {
                taskListWrapper.style.height = 'auto';
            };

        } else {
            // --- COLLAPSING ---
            // 1. READ: Get the current height of the element before collapsing.
            const startHeight = taskListWrapper.offsetHeight;

            // 2. ANIMATE: Animate from the current height down to 0.
            taskListWrapper.animation = taskListWrapper.animate([
                { height: `${startHeight}px`, opacity: 1 },
                { height: '0px', opacity: 0 }
            ], {
                duration: 350,
                easing: 'ease-in-out',
                fill: 'forwards'
            });

            // After the animation, hide the element completely.
            taskListWrapper.animation.onfinish = () => {
                taskListWrapper.style.display = 'none';
            };
        }
    }



    getViewType() { return VIEW_TYPE_PERIOD; }
    getDisplayText() { return "üìÖ Calendar Period Week Notes"; }
    getIcon() { return "calendar-check"; }

    async buildWeeklyNotesCache() {
        if (!this.plugin.settings.enableWeeklyNotes) return;
        this.existingWeeklyNotes.clear();
        const folderPath = this.plugin.settings.weeklyNoteFolder;
        const folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (folder instanceof TFolder) {
            for (const file of folder.children) {
                if (file instanceof TFile && file.extension === 'md') {
                    this.existingWeeklyNotes.add(file.path);
                }
            }
        }
    }

    async refreshIcsEvents() {
        const { requestUrl, Notice } = require('obsidian');

        // This check is now redundant since ICAL is bundled, but it's safe to keep.
        if (!ICALmodule) {
            console.error("ical.js library not bundled correctly.");
            return;
        }

        this.icsEventsByDate.clear();
        this.processedEventSignatures.clear();

        const icsUrl = this.plugin.settings.icsUrl;
        if (!icsUrl) {
            if (this.isCalendarRendered) this.renderCalendar();
            return;
        }

        try {
            const response = await requestUrl({ url: icsUrl });
            const icalData = response.text;
            const calendar = new ICALmodule.Component(ICALmodule.parse(icalData));
            const icalEndDate = ICALmodule.Time.fromJSDate(moment().add(2, 'years').toDate());
            const icalStartDate = ICALmodule.Time.fromJSDate(moment().subtract(1, 'year').toDate());

            const events = calendar.getAllSubcomponents('vevent');
            for (const vevent of events) {
                const event = new ICALmodule.Event(vevent);

                // --- FINAL FIX ---
                // Add a check to skip any null or undefined event objects
                // that result from malformed data in the ICS feed.
                if (!event) {
                    continue;
                }
                // --- END OF FIX ---

                if (event.recurrenceId) {
                    this.addParsedEvent({ item: event }, false);
                } else if (event.isRecurring()) {
                    const iterator = event.iterator();
                    let next;
                    while ((next = iterator.next()) && next.compare(icalEndDate) <= 0) {
                        if (next.compare(icalStartDate) < 0) continue;

                        const occurrence = event.getOccurrenceDetails(next);
                        this.addParsedEvent(occurrence, true);
                    }
                } else {
                    this.addParsedEvent({ item: event }, false);
                }
            }
        } catch (error) {
            new Notice(`Calendar Period Week Notes - ICS error: ${error.message}`, 10000);
            console.error("A detailed ICS parsing error occurred:", error);
        }

        if (this.isCalendarRendered) this.renderCalendar();
    }


    /**
     *  Adds a parsed ICAL event occurrence to the events map, handling de-duplication.
     *  This method uses a hybrid approach to de-duplication:
     *  - For recurring instances, it uses a combination of UID and recurrenceId.
     *  - For single events, it uses a content-based signature (summary, start, end).   
     * 
     * @param {*} occurrence 
     * @param {*} isRecurringInstance 
     * @returns 
     */
    addParsedEvent(occurrence, isRecurringInstance) {
        const { item } = occurrence;
        if (!item) return;

        // --- HYBRID DE-DUPLICATION ---
        if (isRecurringInstance) {
            // For recurring instances, the UID is the UID of the parent event, and the
            // recurrenceId makes it unique. We create a signature from both.
            const recurrenceSignature = `${item.uid}:${occurrence.recurrenceId.toString()}`;
            if (this.processedEventSignatures.has(recurrenceSignature)) {
                return; // Skip duplicate recurring instance
            }
            this.processedEventSignatures.add(recurrenceSignature);
        } else {
            // For single events (like the duplicate 'Tim Holiday'), use the content signature.
            const singleEventSignature = `${item.summary}:${item.startDate.toString()}:${item.endDate.toString()}`;
            if (this.processedEventSignatures.has(singleEventSignature)) {
                return; // Skip duplicate single event
            }
            this.processedEventSignatures.add(singleEventSignature);
        }

        const startMoment = moment(occurrence.startDate ? occurrence.startDate.toJSDate() : item.startDate.toJSDate());
        const endMoment = moment(occurrence.endDate ? occurrence.endDate.toJSDate() : item.endDate.toJSDate());

        const isAllDay = item.startDate.isDate;
        if (isAllDay) {
            endMoment.subtract(1, 'second');
        }

        const eventData = {
            uid: item.uid,
            summary: item.summary,
            isAllDay: isAllDay,
            startTime: isAllDay ? null : startMoment.format('HH:mm'),
            endTime: isAllDay ? null : endMoment.format('HH:mm')
        };

        let currentDay = startMoment.clone().startOf('day');
        while (currentDay.isSameOrBefore(endMoment.startOf('day'))) {
            const dateKey = currentDay.format('YYYY-MM-DD');

            if (!this.icsEventsByDate.has(dateKey)) {
                this.icsEventsByDate.set(dateKey, []);
            }

            // Final simple check to prevent adding the exact same object twice in the loop
            if (!this.icsEventsByDate.get(dateKey).some(e => e.uid === eventData.uid && e.summary === eventData.summary)) {
                this.icsEventsByDate.get(dateKey).push(eventData);
            }

            currentDay.add(1, 'day');
        }
    }

    async openWeeklyNote(dateInfo) {
        // --- Start of Debugging ---
        if (!dateInfo || typeof dateInfo.year === 'undefined') {
            console.error("Weekly Note Error: Invalid dateInfo object received.", dateInfo);
            new Notice("Could not create weekly note due to an internal error. Check console for details.");
            return;
        }
        // --- End of Debugging ---

        if (!this.plugin.settings.enableWeeklyNotes) return;

        const { weeklyNoteFolder, weeklyNoteTemplate, weeklyNoteFormat } = this.plugin.settings;

        // 1. Calculate all possible placeholder values from the data object
        const pweek = ((dateInfo.weekSinceStart - 1) % 52) + 1; // Calculate the week (1-52) in the period year
        const replacements = {
            YYYY: dateInfo.year,
            MM: String(dateInfo.month + 1).padStart(2, '0'),
            PN: "P" + dateInfo.period,
            PW: "W" + dateInfo.week,
            WKP: String(pweek).padStart(2, '0'),
            WKC: String(dateInfo.calendarWeek).padStart(2, '0')
        };

        // 2. Build the filename by replacing placeholders in the format string
        const fileName = weeklyNoteFormat.replace(/YYYY|MM|PN|PW|WKP|WKC/g, (match) => {
            // This ensures that if a value is somehow undefined, it won't break the filename.
            return replacements[match] !== undefined ? replacements[match] : match;
        });

        // 3. The rest of the file creation/opening logic remains the same
        const path = `${weeklyNoteFolder}/${fileName}.md`;
        const file = this.app.vault.getAbstractFileByPath(path);

        if (file) {
            const leaf = this.app.workspace.getLeaf(false);
            await leaf.openFile(file);
        } else {
            new ConfirmationModal(this.app,
                "Create weekly note?",
                `A weekly note for "${fileName}" does not exist. Would you like to create it?`,
                async () => {
                    let fileContent = "";
                    const templateFile = this.app.vault.getAbstractFileByPath(weeklyNoteTemplate);
                    if (templateFile instanceof TFile) fileContent = await this.app.vault.read(templateFile);

                    if (!this.app.vault.getAbstractFileByPath(weeklyNoteFolder)) {
                        await this.app.vault.createFolder(weeklyNoteFolder);
                    }

                    const newFile = await this.app.vault.create(path, fileContent);
                    await this.buildWeeklyNotesCache();
                    this.renderCalendar();
                    const leaf = this.app.workspace.getLeaf(false);
                    await leaf.openFile(newFile);
                },
                "Yes, create it"
            ).open();
        }
    }

    generateMonthGrid(dateForMonth, targetBodyEl) {
        const { settings } = this.plugin;
        const today = new Date();
        const year = dateForMonth.getFullYear();
        const month = dateForMonth.getMonth();
        const firstDayOfMonth = new Date(year, month, 1);
        const folder = settings.dailyNotesFolder || "";
        const format = settings.dailyNoteDateFormat || "YYYY-MM-DD";
        const existingNotes = new Set(this.app.vault.getMarkdownFiles().filter(file => !folder || file.path.startsWith(folder + "/")).map(file => file.basename));

        // This new logic correctly calculates the first day to show on the calendar
        const startDayNumber = this.plugin.settings.weekStartDay === 'monday' ? 1 : 0; // Mon=1, Sun=0
        moment.updateLocale('en', { week: { dow: startDayNumber } });

        let dayOfWeek = firstDayOfMonth.getDay(); // JS standard: Sun=0, Mon=1...

        let diff = dayOfWeek - startDayNumber;
        if (diff < 0) {
            diff += 7; // Ensure we go back to the previous week
        }

        let currentDay = new Date(firstDayOfMonth);
        currentDay.setDate(firstDayOfMonth.getDate() - diff);

        const requiredRows = 6;
        for (let i = 0; i < requiredRows; i++) {
            const row = targetBodyEl.createEl("tr");

            if (settings.highlightCurrentWeek) {
                const todayMoment = moment();
                const startOfWeekMoment = moment(currentDay);
                if (todayMoment.weekYear() === startOfWeekMoment.weekYear() && todayMoment.week() === startOfWeekMoment.week()) {
                    row.addClass('current-week-row');
                }
            }

            const weekMoment = moment(new Date(currentDay));
            const isoWeek = weekMoment.isoWeek();
            const isoYear = weekMoment.isoWeekYear();
            const isoMonth = weekMoment.month();
            const periodWeekData = getPeriodWeek(new Date(currentDay), settings.startOfPeriod1Date);

            const dateInfoForWeek = {
                year: isoYear,
                month: isoMonth,
                period: periodWeekData.period,
                week: periodWeekData.week,
                calendarWeek: isoWeek,
                weekSinceStart: periodWeekData.weekSinceStart
            };

            const clickHandler = () => {
                this.openWeeklyNote(dateInfoForWeek);
            };

            let weeklyNoteExists = false;
            if (settings.enableWeeklyNotes) {
                const pweek = ((dateInfoForWeek.weekSinceStart - 1) % 52) + 1;
                const replacements = {
                    YYYY: dateInfoForWeek.year,
                    MM: String(dateInfoForWeek.month + 1).padStart(2, '0'),
                    PN: "P" + dateInfoForWeek.period,
                    PW: "W" + dateInfoForWeek.week,
                    WKP: String(pweek).padStart(2, '0'),
                    WKC: String(dateInfoForWeek.calendarWeek).padStart(2, '0')
                };
                const expectedFileName = settings.weeklyNoteFormat.replace(/YYYY|WKP|WKC|MM|PN|PW/g, match => replacements[match]);
                const expectedPath = `${settings.weeklyNoteFolder}/${expectedFileName}.md`;
                weeklyNoteExists = this.existingWeeklyNotes.has(expectedPath);
            }

            if (settings.showPWColumn) {
                const pwCell = row.createEl("td", { cls: "pw-label-cell" });
                const pwContent = pwCell.createDiv({ cls: "day-content" });
                pwContent.createDiv({ cls: "day-number" }).setText(this.formatPW(periodWeekData.period, periodWeekData.week));

                pwCell.style.cursor = "pointer";

                if (this.plugin.settings.highlightTodayPWLabel) {
                    for (let d = 0; d < 7; d++) {
                        const checkDate = new Date(currentDay);
                        checkDate.setDate(currentDay.getDate() + d);
                        if (isSameDay(checkDate, today)) {
                            pwCell.addClass("today-pw-label");
                            break;
                        }
                    }
                }

                if (weeklyNoteExists && settings.showWeeklyNoteDot && !settings.showWeekNumbers) {
                    const dotsContainer = pwContent.createDiv({ cls: 'dots-container' });
                    dotsContainer.createDiv({ cls: 'calendar-dot weekly-note-dot' });
                }
                pwCell.addEventListener('click', clickHandler);
                pwCell.addEventListener('mouseenter', () => { if (this.plugin.settings.enableRowHighlight) { const highlightColor = document.body.classList.contains('theme-dark') ? this.plugin.settings.rowHighlightColorDark : this.plugin.settings.rowHighlightColorLight; row.style.backgroundColor = highlightColor; } });
                pwCell.addEventListener('mouseleave', () => { row.style.backgroundColor = ''; });
            }

            if (settings.showWeekNumbers) {
                const weekNum = settings.weekNumberType === 'period' ? periodWeekData.weekSinceStart : isoWeek;
                const weekCell = row.createEl("td", { cls: "week-number-cell" });
                const weekContent = weekCell.createDiv({ cls: "day-content" });
                weekContent.createDiv({ cls: "day-number" }).setText(weekNum.toString());

                weekCell.style.cursor = "pointer";

                if (this.plugin.settings.highlightTodayPWLabel) {
                    for (let d = 0; d < 7; d++) {
                        const checkDate = new Date(currentDay);
                        checkDate.setDate(currentDay.getDate() + d);
                        if (isSameDay(checkDate, today)) {
                            weekCell.addClass("today-pw-label");
                            break;
                        }
                    }
                }

                if (weeklyNoteExists && settings.showWeeklyNoteDot) {
                    const dotsContainer = weekContent.createDiv({ cls: 'dots-container' });
                    dotsContainer.createDiv({ cls: 'calendar-dot weekly-note-dot' });
                }
                weekCell.addEventListener('click', clickHandler);
                weekCell.addEventListener('mouseenter', () => { if (this.plugin.settings.enableRowHighlight) { const highlightColor = document.body.classList.contains('theme-dark') ? this.plugin.settings.rowHighlightColorDark : this.plugin.settings.rowHighlightColorLight; row.style.backgroundColor = highlightColor; } });
                weekCell.addEventListener('mouseleave', () => { row.style.backgroundColor = ''; });
            }

            for (let d = 0; d < 7; d++) {
                const dayDate = new Date(currentDay);
                dayDate.setDate(currentDay.getDate() + d);
                const isOtherMonth = dayDate.getMonth() !== month;
                const cell = row.createEl("td");

                // Add separator class to first date column
                if (d === 0 && this.plugin.settings.showPWColumnSeparator &&
                    (this.plugin.settings.showPWColumn || this.plugin.settings.showWeekNumbers)) {
                    cell.addClass('first-date-column');
                }

                const contentDiv = cell.createDiv("day-content");
                const dayNumber = contentDiv.createDiv("day-number");
                dayNumber.textContent = dayDate.getDate().toString();
                const dateKey = moment(dayDate).format("YYYY-MM-DD");


                const icsEventsForDay = this.icsEventsByDate.get(dateKey);
                const tasksForDay = this.tasksByDate.get(dateKey);

                let totalTaskCount = tasksForDay ? tasksForDay.length : 0;
                const calendarEventCount = icsEventsForDay ? icsEventsForDay.length : 0;

                const eventIndicatorStyle = this.plugin.settings.calendarEventIndicatorStyle;

                // Conditionally add calendar event count to the total count for heatmap/badge
                if (eventIndicatorStyle === 'heatmap' || eventIndicatorStyle === 'badge') {
                    totalTaskCount += calendarEventCount;
                }

                const isToday = isSameDay(dayDate, today);
                if (totalTaskCount > 0) {
                    if (settings.taskIndicatorStyle === 'badge') {
                        contentDiv.createDiv({ cls: 'task-count-badge', text: totalTaskCount.toString() });

                    } else if (settings.taskIndicatorStyle === 'heatmap') {
                        const shouldApplyHeatmap = !(isToday && settings.todayHighlightStyle === 'cell');

                        if (shouldApplyHeatmap) {

                            const startColor = parseRgbaString(settings.taskHeatmapStartColor);
                            const midColor = parseRgbaString(settings.taskHeatmapMidColor);
                            const endColor = parseRgbaString(settings.taskHeatmapEndColor);
                            const midPoint = settings.taskHeatmapMidpoint;
                            const maxPoint = settings.taskHeatmapMaxpoint;


                            if (startColor && midColor && endColor) {
                                let finalColor;
                                if (totalTaskCount >= maxPoint) { finalColor = settings.taskHeatmapEndColor; }
                                else if (totalTaskCount >= midPoint) { const factor = (totalTaskCount - midPoint) / (maxPoint - midPoint); finalColor = blendRgbaColors(midColor, endColor, factor); }
                                else { const divisor = midPoint - 1; const factor = divisor > 0 ? (totalTaskCount - 1) / divisor : 1; finalColor = blendRgbaColors(startColor, midColor, factor); }




                                contentDiv.style.setProperty('background-color', finalColor, 'important');


                                // This creates a border using the theme's background color, making a clean gap.
                                // UPDATED: Check if this cell is in the current week row
                                const isInHighlightedRow = settings.highlightCurrentWeek &&
                                    row.classList.contains('current-week-row');

                                // Use the row highlight color as border if in highlighted row
                                if (isInHighlightedRow) {
                                    const borderColor = document.body.classList.contains('theme-dark')
                                        ? settings.rowHighlightColorDark
                                        : settings.rowHighlightColorLight;
                                    contentDiv.style.border = `${this.plugin.settings.contentBorderWidth} solid ${borderColor}`;
                                } else {
                                    contentDiv.style.border = `${this.plugin.settings.contentBorderWidth} solid var(--background-secondary)`;
                                }
                                // A slightly smaller radius makes it look neatly inset.
                                contentDiv.style.borderRadius = '8px';
                                contentDiv.style.boxSizing = 'border-box';

                            }
                        }
                    }
                }


                if (isOtherMonth) dayNumber.addClass("day-number-other-month");
                if (isSameDay(dayDate, today)) cell.addClass("today-cell");
                const createdFiles = this.createdNotesMap.get(dateKey) || [];
                const modifiedFiles = this.modifiedNotesMap.get(dateKey) || [];
                const dailyNoteFileName = formatDate(dayDate, format);
                const dailyNoteExists = existingNotes.has(dailyNoteFileName);
                const dotsContainer = contentDiv.createDiv({ cls: 'dots-container' });

                if (dailyNoteExists) { dotsContainer.createDiv({ cls: "period-month-daily-note-dot calendar-dot" }); }
                if (settings.showOtherNoteDot && createdFiles.length > 0) { dotsContainer.createDiv({ cls: 'other-note-dot calendar-dot' }); }
                if (settings.showModifiedFileDot && modifiedFiles.length > 0) { dotsContainer.createDiv({ cls: 'modified-file-dot calendar-dot' }); }
                const assetsCreated = this.assetCreationMap.get(dateKey) || [];
                if (settings.showAssetDot && assetsCreated.length > 0) { dotsContainer.createDiv({ cls: 'asset-dot calendar-dot' }); }
                if (settings.showTaskDot && totalTaskCount > 0) { dotsContainer.createDiv({ cls: 'task-dot calendar-dot' }); }


                if (eventIndicatorStyle === 'dot' && calendarEventCount > 0 || settings.showIcsDot && calendarEventCount > 0) {
                    dotsContainer.createDiv({ cls: 'calendar-dot ics-event-dot' });
                }

                const hasPopupContent = dailyNoteExists || (tasksForDay && tasksForDay.length > 0) || (createdFiles && createdFiles.length > 0) || (modifiedFiles && modifiedFiles.length > 0) || (assetsCreated && assetsCreated.length > 0) || (icsEventsForDay && icsEventsForDay.length > 0);

                if (hasPopupContent) {
                    cell.addEventListener('mouseenter', () => {
                        if (this.isPopupLocked) return;
                        this.hideFilePopup();
                        clearTimeout(this.hideTimeout);
                        this.hoverTimeout = setTimeout(() => {
                            const dailyNoteFile = dailyNoteExists ? this.app.vault.getAbstractFileByPath(folder ? `${folder}/${dailyNoteFileName}.md` : `${dailyNoteFileName}.md`) : null;
                            const dataToShow = {
                                tasks: tasksForDay,
                                daily: dailyNoteFile ? [dailyNoteFile] : [],
                                created: settings.showOtherNoteDot ? createdFiles : [],
                                modified: settings.showModifiedFileDot ? modifiedFiles : [],
                                assets: settings.showAssetDot ? assetsCreated : [],
                                ics: icsEventsForDay || [],
                            };
                            this.showFilePopup(cell, dataToShow, dayDate);
                        }, this.plugin.settings.otherNoteHoverDelay);
                    });
                    cell.addEventListener('mouseleave', () => {
                        clearTimeout(this.hoverTimeout);
                        this.hideTimeout = setTimeout(() => this.hideFilePopup(), this.plugin.settings.popupHideDelay);
                    });
                }
                cell.addEventListener("click", () => this.openDailyNote(dayDate));
                cell.addEventListener('mouseenter', () => {
                    if (!this.plugin.settings.enableRowToDateHighlight) return;
                    const highlightColor = document.body.classList.contains('theme-dark')
                        ? this.plugin.settings.rowHighlightColorDark
                        : this.plugin.settings.rowHighlightColorLight;
                    const row = cell.parentElement;
                    const allRows = Array.from(row.parentElement.children);
                    const rowIndex = allRows.indexOf(row);
                    const colIndex = Array.from(row.children).indexOf(cell);
                    const table = cell.closest('table');
                    for (let j = 0; j <= colIndex; j++) {
                        const cellToHighlight = row.children[j];
                        if (cellToHighlight) cellToHighlight.style.backgroundColor = highlightColor;
                    }
                    for (let i = 0; i < rowIndex; i++) {
                        const priorRow = allRows[i];
                        const cellToHighlight = priorRow.children[colIndex];
                        if (cellToHighlight) cellToHighlight.style.backgroundColor = highlightColor;
                    }
                    if (table) {
                        const headerRow = table.querySelector('thead tr');
                        if (headerRow) {
                            const headerCell = headerRow.children[colIndex];
                            if (headerCell) headerCell.style.backgroundColor = highlightColor;
                        }
                    }
                });
                cell.addEventListener('mouseleave', () => {
                    if (!this.plugin.settings.enableRowToDateHighlight) return;
                    const table = cell.closest('table');
                    if (table) {
                        const allCells = table.querySelectorAll('tbody td, thead th');
                        allCells.forEach(c => c.style.backgroundColor = '');
                    }
                });
            }
            currentDay.setDate(currentDay.getDate() + 7);
        }
        if (settings.highlightCurrentWeek) {
            const highlightedRow = targetBodyEl.querySelector('.current-week-row');
            if (highlightedRow) {
                const highlightColor = document.body.classList.contains('theme-dark')
                    ? settings.rowHighlightColorDark
                    : settings.rowHighlightColorLight;

                const cells = highlightedRow.querySelectorAll('td');
                cells.forEach(cell => {
                    cell.style.backgroundColor = highlightColor;
                });
            }
        }
    }

    /**
     * Finds all markdown files that link to or embed the given asset file.
     * @param {TFile} assetFile - The asset file to find backlinks for.
     * @returns {Promise<TFile[]>} A promise that resolves to an array of markdown files linking to the asset.
     */
    async findAssetBacklinks(assetFile) {
        const backlinks = [];
        const markdownFiles = this.app.vault.getMarkdownFiles();

        for (const mdFile of markdownFiles) {
            const cache = this.app.metadataCache.getFileCache(mdFile);
            if (!cache) continue;

            const linksAndEmbeds = [...(cache.embeds || []), ...(cache.links || [])];

            for (const ref of linksAndEmbeds) {
                const linkedFile = this.app.metadataCache.getFirstLinkpathDest(ref.link, mdFile.path);
                if (linkedFile && linkedFile.path === assetFile.path) {
                    backlinks.push(mdFile);
                    break; // Move to the next file once a link is found
                }
            }
        }
        return backlinks;
    }

    /**
      * Adds a right-click context menu to a file row for deletion.
      * @param {HTMLElement} element The row element to attach the listener to.
      * @param {TFile} file The file associated with the row.
      * @param {() => void} refreshCallback The function to call to refresh the list after deletion.
      */
    addFileContextMenu(element, file, refreshCallback) {
        element.addEventListener('contextmenu', (event) => {
            event.preventDefault();
            const menu = new Menu();

            menu.addItem((item) =>
                item
                    .setTitle("Delete file")
                    .setIcon("trash")
                    .onClick(() => {
                        new ConfirmationModal(
                            this.app,
                            "Confirm Deletion",
                            `Are you sure you want to permanently delete "${file.name}"? This action cannot be undone.`,
                            async () => {
                                try {
                                    await this.app.vault.trash(file, true); // true for permanent system trash
                                    new Notice(`Deleted: ${file.name}`);
                                    refreshCallback(); // Refresh the specific list
                                } catch (err) {
                                    new Notice(`Error deleting file: ${err.message}`);
                                    console.error(err);
                                }
                            },
                            "Yes, delete"
                        ).open();
                    })
            );

            menu.showAtMouseEvent(event);
        });
    }

    isWeeklyNote(file) {
        if (!this.plugin.settings.enableWeeklyNotes || !(file instanceof TFile)) {
            return false;
        }
        // A file is considered a weekly note if it's inside the specified folder.
        return file.parent?.path === this.plugin.settings.weeklyNoteFolder;
    }

    /**
   * Attaches touch event listeners for mobile swipe gestures.
   * @param {HTMLElement} calendarEl The element to listen for 'swipe up' on.
   * @param {HTMLElement} headerEl The element to listen for 'swipe down' on.
   */
    attachSwipeListeners(calendarEl, headerEl) {
        const swipeThreshold = 50;
        let startY = 0;
        let startX = 0;
        let isDragging = false;
        let dragTarget = null; // To know which element started the drag

        const handleDragStart = (e) => {
            isDragging = true;
            dragTarget = e.currentTarget; // Store if drag started on calendar or header
            startY = e.touches ? e.touches[0].clientY : e.clientY;
            startX = e.touches ? e.touches[0].clientX : e.clientX;

            // Add the 'end' listeners to the window to catch drags that end outside the element
            window.addEventListener('mouseup', handleDragEnd, { once: true });
            window.addEventListener('touchend', handleDragEnd, { once: true });
        };

        const handleDragEnd = (e) => {
            if (!isDragging) return;
            isDragging = false;

            const endY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
            const endX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
            const deltaY = startY - endY;
            const deltaX = Math.abs(startX - endX);

            // Check if it's a predominantly vertical swipe
            if (Math.abs(deltaY) > swipeThreshold && Math.abs(deltaY) > deltaX) {
                // Swipe Up on Calendar Body: Hide Calendar
                if (dragTarget === calendarEl && deltaY > 0 && !this.isCalendarCollapsed) {
                    this.isCalendarCollapsed = true;
                    this.containerEl.firstElementChild.classList.add("calendar-collapsed");
                }
                // Swipe Down on Header: Show Calendar
                else if (dragTarget === headerEl && deltaY < 0 && this.isCalendarCollapsed) {
                    this.isCalendarCollapsed = false;
                    this.containerEl.firstElementChild.classList.remove("calendar-collapsed");
                }
            }
        };

        // Attach start listeners for both mouse and touch to both elements
        calendarEl.addEventListener('mousedown', handleDragStart);
        calendarEl.addEventListener('touchstart', handleDragStart, { passive: true });
        headerEl.addEventListener('mousedown', handleDragStart);
        headerEl.addEventListener('touchstart', handleDragStart, { passive: true });
    }

    /**
     * Displays a popup list of notes that link to a specific asset.
     * @param {HTMLElement} targetEl - The element to position the popup relative to.
     * @param {TFile} assetFile - The asset whose backlinks should be displayed.
     */
    async showBacklinksPopup(targetEl, assetFile) {
        this.hideFilePopup(); // Hide any other popups
        const backlinks = await this.findAssetBacklinks(assetFile);

        if (backlinks.length === 0) {
            new Notice("No backlinks found for this asset.");
            return;
        }

        this.popupEl = createDiv({ cls: 'other-notes-popup' });

        // Add header with a close button
        const headerRow = this.popupEl.createDiv({ cls: 'popup-header' });
        headerRow.createDiv({ cls: 'popup-header-title', text: 'Backlinks' });
        const closeBtn = headerRow.createDiv({ cls: 'popup-close-btn' });
        setIcon(closeBtn, 'x');
        headerRow.addEventListener('click', () => this.hideFilePopup());

        // Create a scrollable wrapper for the content
        const contentWrapper = this.popupEl.createDiv({ cls: 'popup-content-wrapper' });

        backlinks.forEach(noteFile => {
            const itemEl = contentWrapper.createDiv({ cls: 'other-notes-popup-item' });
            setIcon(itemEl, 'file-text');

            const titlePathWrapper = itemEl.createDiv({ cls: 'note-title-path-wrapper' });
            titlePathWrapper.createDiv({ text: noteFile.basename, cls: "note-title" });
            if (noteFile.parent && noteFile.parent.path !== '/') {
                titlePathWrapper.createDiv({ text: noteFile.parent.path, cls: 'note-path' });
            }

            itemEl.addEventListener('click', async () => {
                const cache = this.app.metadataCache.getFileCache(noteFile);
                let targetLine = 0;
                if (cache) {
                    const allLinks = [...(cache.embeds || []), ...(cache.links || [])];
                    for (const ref of allLinks) {
                        const linkedFile = this.app.metadataCache.getFirstLinkpathDest(ref.link, noteFile.path);
                        if (linkedFile && linkedFile.path === assetFile.path) {
                            targetLine = ref.position.start.line;
                            break;
                        }
                    }
                }
                const openInNewTab = this.plugin.settings.notesOpenAction === 'new-tab';
                const leaf = this.app.workspace.getLeaf(openInNewTab);
                await leaf.openFile(noteFile, { eState: { line: targetLine } });
                this.hideFilePopup();
            });
        });

        this.popupEl.addEventListener('mouseenter', () => clearTimeout(this.hideTimeout));
        this.popupEl.addEventListener('mouseleave', () => {
            this.hideTimeout = setTimeout(() => this.hideFilePopup(), this.plugin.settings.popupHideDelay);
        });

        document.body.appendChild(this.popupEl);

        const popupRect = this.popupEl.getBoundingClientRect();
        const targetRect = targetEl.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const margin = this.plugin.settings.popupGap;
        let finalTop = targetRect.bottom + margin;
        if (finalTop + popupRect.height > viewportHeight) finalTop = targetRect.top - popupRect.height - margin;
        if (finalTop < 0) finalTop = margin;
        let finalLeft = targetRect.left;
        if (finalLeft + popupRect.width > viewportWidth) finalLeft = targetRect.right - popupRect.width;
        if (finalLeft < 0) finalLeft = margin;

        this.popupEl.style.top = `${finalTop}px`;
        this.popupEl.style.left = `${finalLeft}px`;
    }

    /**
     * Extracts all task lines (e.g., "- [ ] ...") from a string of content.
     * @param {string} content - The markdown content to parse.
     * @returns {string[]} An array of strings, where each string is a task line.
     */
    extractTaskLines(content) {
        const taskLines = [];
        // This regex finds any line that looks like a Markdown task, completed or not.
        const taskRegex = /^\s*(?:-|\d+\.)\s*\[.\]\s*.*/;
        const lines = content.split('\n');
        for (const line of lines) {
            if (taskRegex.test(line)) {
                taskLines.push(line);
            }
        }
        return taskLines;
    }

    /**
     * Checks if a file is an image based on its extension.
     * @param {TFile} file The file to check.
     * @returns {boolean} True if the file is a common image type.
     */
    isImageAsset(file) {
        const imageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'svg', 'webp'];
        return imageExtensions.includes(file.extension.toLowerCase());
    }

    /**
     * Dynamically generates the label for a tab, including icon and/or text based on settings.
     * @param {HTMLElement} container The HTML element to populate with the label.
     * @param {string} key The key of the tab (e.g., 'notes', 'scratch').
     */
    getTabLabel(container, key) {
        container.empty(); // Clear previous content

        const isMobile = document.body.classList.contains('is-mobile');
        const displayMode = isMobile ? this.plugin.settings.mobileTabDisplayMode : this.plugin.settings.tabDisplayMode;

        const icons = this.plugin.settings.tabIcons || DEFAULT_SETTINGS.tabIcons;
        const textLabels = {
            scratch: "ScratchPad",
            notes: "Notes",
            pinned: "Pinned",
            tasks: "Tasks", // This is a fallback
            assets: "Assets"
        };

        let iconName = '';
        let text = '';

        if (key === 'notes') {
            const mode = this.notesViewMode;
            iconName = mode === 'pinned' ? icons.pinned : icons.notes;
            text = mode === 'pinned' ? textLabels.pinned : textLabels.notes;
        }
        else if (key === 'tasks') {
            const groupBy = this.plugin.settings.taskGroupBy;
            iconName = groupBy === 'tag' ? 'circle-check' : icons.tasks;
            text = groupBy === 'tag' ? "Tasks by Tag" : "Tasks by Date";
        }
        else if (key === 'assets') {
            iconName = this.isAssetsGridView ? 'image' : 'file-image';
            text = textLabels[key];
        }
        else {
            iconName = icons[key];
            text = textLabels[key];
        }

        if (displayMode.includes("icon")) {
            const iconEl = container.createDiv({ cls: 'tab-icon' });
            setIcon(iconEl, iconName || 'file-question');
        }

        if (displayMode.toLowerCase().includes("text")) {
            container.createSpan({ cls: 'tab-text', text: text || '' });
        }
    }

    /**
     * Determines if a file is a daily note based on its name format and location.
     * @param {TFile} file The file to check.
     * @returns {boolean} True if the file matches the daily note criteria.
     */
    isDailyNote(file) {
        const settings = this.plugin.settings;
        const dailyNoteFolder = settings.dailyNotesFolder;
        const format = settings.dailyNoteDateFormat || "YYYY-MM-DD";

        // Check if the filename strictly matches the daily note date format.
        const isNameCorrect = moment(file.basename, format, true).isValid();
        if (!isNameCorrect) {
            return false;
        }

        // If a daily notes folder is specified, check if the file is directly inside it.
        if (dailyNoteFolder) {
            return file.parent?.path === dailyNoteFolder;
        }

        // If no folder is set, the file must be in the vault's root directory.
        return file.parent?.path === '/';
    }

    /**
     * Toggles the scratchpad between edit and preview mode and triggers a re-render.
     */
    toggleScratchpadView() {
        this.isScratchpadPreview = !this.isScratchpadPreview;
        // The button state and content visibility are handled by the render method.
        this.renderScratchpadContent();
    }

    /**
     * Processes date placeholders in a string and replaces them with formatted dates.
     * Also handles a cursor position marker.
     * @param {string} formatString The string containing placeholders like {today}, {monday}, {date}+7, and a cursor marker '|'.
     * @returns {{text: string, cursorOffset: number}} The processed string and the calculated final cursor position.
     */
    processDatePlaceholders(formatString) {
        const cursorMarker = '|';
        let cursorOffset = -1;

        // Find the cursor marker's position and remove it for processing.
        const markerIndex = formatString.indexOf(cursorMarker);
        if (markerIndex !== -1) {
            cursorOffset = markerIndex;
            formatString = formatString.replace(cursorMarker, '');
        }

        // Process date placeholders using a regex.
        const processedText = formatString.replace(/{([^}]+)}/g, (match, tag) => {
            const now = moment();
            tag = tag.toLowerCase().trim();

            if (tag === 'today') return now.format('YYYY-MM-DD');
            if (tag === 'tomorrow') return now.add(1, 'day').format('YYYY-MM-DD');

            const weekdays = { 'sunday': 0, 'monday': 1, 'tuesday': 2, 'wednesday': 3, 'thursday': 4, 'friday': 5, 'saturday': 6 };
            if (tag in weekdays) {
                const targetDay = weekdays[tag];
                const currentDay = now.day();
                let daysToAdd = targetDay - currentDay;
                if (daysToAdd <= 0) {
                    daysToAdd += 7; // Find the *next* instance of the day.
                }
                return now.add(daysToAdd, 'days').format('YYYY-MM-DD');
            }

            const dynamicDateMatch = tag.match(/^date\s*([+-])\s*(\d+)/);
            if (dynamicDateMatch) {
                const operator = dynamicDateMatch[1];
                const amount = parseInt(dynamicDateMatch[2], 10);
                return operator === '+' ? now.add(amount, 'days').format('YYYY-MM-DD') : now.subtract(amount, 'days').format('YYYY-MM-DD');
            }

            return match; // Return original match if no placeholder is recognized.
        });

        // If the cursor marker wasn't found, set the offset to the end of the text.
        if (cursorOffset === -1) {
            cursorOffset = processedText.length;
        }

        return { text: processedText, cursorOffset: cursorOffset };
    }

    /**
     * Scans the entire vault for open tasks with due dates (e.g., üìÖYYYY-MM-DD)
     * and populates `this.tasksByDate` map for quick lookups by the calendar view.
     */
    async buildTasksByDateMap() {
        this.tasksByDate.clear();
        this.fileToTaskDates.clear(); // Also clear the tracking map

        const files = this.app.vault.getMarkdownFiles();

        for (const file of files) {
            if (this.plugin.settings.taskIgnoreFolders.some(folder => file.path.startsWith(folder))) {
                continue;
            }

            const content = await this.app.vault.cachedRead(file);
            const tasks = parseTasksFromFile(file, content); // Use the new helper

            const dateKeysForFile = new Set();

            for (const task of tasks) {
                // We only care about incomplete tasks with due dates for the calendar grid
                if (task.status.toLowerCase() !== 'x' && task.dueDate) {
                    const dateKey = moment(task.dueDate).format("YYYY-MM-DD");
                    if (!this.tasksByDate.has(dateKey)) {
                        this.tasksByDate.set(dateKey, []);
                    }
                    this.tasksByDate.get(dateKey).push(task);
                    dateKeysForFile.add(dateKey);
                }
            }

            if (dateKeysForFile.size > 0) {
                this.fileToTaskDates.set(file.path, dateKeysForFile);
            }
        }
    }

    /**
     * Shows a confirmation modal and handles the permanent deletion of an asset file.
     * @param {TFile} file - The asset file to delete.
     */
    async handleDeleteAsset(file) {
        new ConfirmationModal(
            this.app,
            "Confirm Deletion",
            `Are you sure you want to permanently delete "${file.name}"? This action cannot be undone.`,
            async () => {
                try {
                    await this.app.vault.trash(file, true); // `true` for permanent deletion.
                    new Notice(`Deleted asset: ${file.name}`);
                    // Refresh data maps and UI components that depend on asset data.
                    await this.buildAssetCreationMap();
                    await this.buildTasksByDateMap();
                    this.populateAssets();
                    this.renderCalendar();
                } catch (err) {
                    new Notice(`Error deleting file: ${err.message}`);
                    console.error(err);
                }
            }
            , "Yes, delete").open();
    }

    /**
     * Renders the content of the scratchpad, switching between an editor textarea
     * and a rendered Markdown preview based on the current view mode.
     */
    async renderScratchpadContent() {
        if (!this.scratchWrapperEl) return;

        // Preserve focus on the textarea across re-renders.
        const wasFocused = this.noteTextarea === document.activeElement;

        this.scratchWrapperEl.empty();

        // Create a container for action buttons (Preview, Add Task).
        const actionsContainer = this.scratchWrapperEl.createDiv({
            cls: "scratchpad-actions-container"
        });

        // Only show the Preview/Edit toggle button if enabled in settings.
        if (this.plugin.settings.scratchpad?.showPreviewToggle) {
            this.scratchpadViewToggleBtn = actionsContainer.createEl("button", {
                cls: "scratchpad-action-btn"
            });
            this.scratchpadViewToggleBtn.addEventListener("click", () => this.toggleScratchpadView());
        }

        // Only show the Add Task button if enabled in settings.
        if (this.plugin.settings.scratchpad?.showAddTaskButton) {
            this.addTaskBtn = actionsContainer.createEl("button", {
                cls: "scratchpad-action-btn"
            });
            setIcon(this.addTaskBtn, "plus");
            this.addTaskBtn.setAttribute("aria-label", "Add new task");
            this.addTaskBtn.addEventListener("click", () => this.addNewTaskToScratchpad());
        }

        if (this.isScratchpadPreview && this.plugin.settings.scratchpad?.showPreviewToggle) {
            // --- CONFIGURE UI FOR PREVIEW MODE ---
            if (this.scratchpadViewToggleBtn) {
                setIcon(this.scratchpadViewToggleBtn, "edit"); // Switch to Edit icon
                this.scratchpadViewToggleBtn.setAttribute("aria-label", "Edit mode");
            }
            if (this.addTaskBtn) this.addTaskBtn.style.display = 'none';

            // Disable search controls in preview mode.
            if (this.scratchpadSearchInputEl) this.scratchpadSearchInputEl.disabled = true;
            if (this.scratchpadSearchControlsEl) {
                Array.from(this.scratchpadSearchControlsEl.children).forEach(child => {
                    if (child.matches('button')) child.disabled = true;
                });
            }

            // Render the content as Markdown.
            this.scratchWrapperEl.addClass("markdown-preview-view");
            const markdownContent = await this.loadNote();
            const file = this.app.vault.getAbstractFileByPath(this.plugin.settings.fixedNoteFile);
            if (file) {
                MarkdownRenderer.render(this.app, markdownContent, this.scratchWrapperEl, file.path, this);
            }

        } else {
            // --- CONFIGURE UI FOR EDIT MODE ---
            if (this.scratchpadViewToggleBtn) {
                setIcon(this.scratchpadViewToggleBtn, "eye"); // Switch to Preview icon
                this.scratchpadViewToggleBtn.setAttribute("aria-label", "Preview mode");
            }
            if (this.addTaskBtn) this.addTaskBtn.style.display = 'block';

            // Enable search controls in edit mode.
            if (this.scratchpadSearchInputEl) this.scratchpadSearchInputEl.disabled = false;
            if (this.scratchpadSearchControlsEl) {
                Array.from(this.scratchpadSearchControlsEl.children).forEach(child => {
                    if (child.matches('button')) child.disabled = false;
                });
            }

            this.scratchWrapperEl.removeClass("markdown-preview-view");
            // The highlighter is a div that sits behind the textarea to show search matches.
            this.scratchHighlighterEl = this.scratchWrapperEl.createDiv({ cls: "scratch-base scratch-highlighter" });
            this.noteTextarea = this.scratchWrapperEl.createEl("textarea", { cls: "scratch-base scratch-content" });

            if (this.app.isMobile) {
                this.noteTextarea.addEventListener('focus', () => {
                    // When you tap the text area, add the class to create the padding.
                    this.noteTextarea.classList.add('is-editing-mobile');
                });

                this.noteTextarea.addEventListener('blur', () => {
                    // When you tap away, remove the class to restore the normal view.
                    this.noteTextarea.classList.remove('is-editing-mobile');
                });
            }

            this.noteTextarea.value = this.noteText;
            if (wasFocused) this.noteTextarea.focus();
            this.updateScratchpadHighlights();


            // Save content on input.
            this.noteTextarea.addEventListener("input", async () => {
                this.noteText = this.noteTextarea.value;
                await this.saveFixedNote(this.noteText);
                this.updateScratchpadSearchCount();
                this.updateScratchpadHighlights();
            });

            // Synchronize scroll position between textarea and highlighter.
            this.noteTextarea.addEventListener('scroll', () => {
                if (this.scratchHighlighterEl) {
                    this.scratchHighlighterEl.scrollTop = this.noteTextarea.scrollTop;
                    this.scratchHighlighterEl.scrollLeft = this.noteTextarea.scrollLeft;
                }
            });
        }
    }

    /**
     * Called when the view is first opened. It loads all initial data and registers
     * event listeners for file changes and auto-reloading.
     */
    async onOpen() {
        // --- Load all initial data ---
        await this.buildCreatedNotesMap();
        await this.buildModifiedNotesMap();
        await this.buildAssetCreationMap();
        await this.buildTasksByDateMap();
        await this.refreshIcsEvents();
        await this.buildWeeklyNotesCache();
        this.noteText = await this.loadNote();
        this.render();
        this.setupReorderMode();

        // --- Register events and intervals ---
        const intervalMs = this.plugin.settings.autoReloadInterval || 5000;
        this.registerInterval(setInterval(async () => {
            if (document.activeElement === this.noteTextarea) return;
            const latest = await this.loadNote();
            if (latest !== this.noteText && this.noteTextarea) {
                this.noteText = latest;
                this.noteTextarea.value = latest;
            }
        }, intervalMs));

        // This listener checks the date when the app window gets focus.
        // This solves a 'stale date highlight after a device sleep' issue.
        this.registerDomEvent(window, 'focus', () => {
            const now = new Date();
            // Only proceed if the day has actually changed.
            if (!isSameDay(now, this.lastKnownToday)) {
                console.log("Window focus detected: Day has changed. Refreshing calendar.");

                // Update our tracker to the new date.
                this.lastKnownToday = now;

                // Efficiently re-render just the calendar grid.
                this.renderCalendar();
            }
        });

        const themeChangeCallback = (mutationsList) => {
            for (const mutation of mutationsList) {
                // We only care about changes to the 'class' attribute
                if (mutation.attributeName === 'class') {
                    const wasDark = mutation.oldValue?.includes('theme-dark');
                    const isDark = document.body.classList.contains('theme-dark');

                    // If the dark theme status has changed, trigger a re-render
                    if (wasDark !== isDark) {
                        console.log("Theme changed. Refreshing calendar view.");
                        this.render();
                    }
                }
            }
        };

        // Create and start the observer
        this.themeObserver = new MutationObserver(themeChangeCallback);
        this.themeObserver.observe(document.body, {
            attributes: true,
            attributeFilter: ['class'],
            attributeOldValue: true // We need the old value to detect the change
        });
        // Use metadataCache for modifications - it's more efficient
        this.registerEvent(this.app.metadataCache.on('changed', async (file) => {
            if (this.isWeeklyNote(file)) {
                this.existingWeeklyNotes.add(file.path);
            }

            // Incrementally update maps
            this.removeFileFromMaps(file.path);
            this.addFileToMaps(file);
            await this.updateTasksForFile(file);

            // Trigger a targeted UI refresh
            this.refreshUI(file);
        }));

        // Vault event for new files
        this.registerEvent(this.app.vault.on("create", async (file) => {
            if (!(file instanceof TFile)) return;
            if (this.isWeeklyNote(file)) this.existingWeeklyNotes.add(file.path);

            if (file.path.toLowerCase().endsWith('.md')) {
                this.addFileToMaps(file);
                await this.updateTasksForFile(file);
            } else {
                this.addFileToAssetMap(file);
            }
            this.refreshUI(file);
        }));

        // Vault event for deleted files
        this.registerEvent(this.app.vault.on("delete", async (file) => {
            if (!(file instanceof TFile)) return;
            if (this.existingWeeklyNotes.has(file.path)) this.existingWeeklyNotes.delete(file.path);

            if (file.path.toLowerCase().endsWith('.md')) {
                this.removeFileFromMaps(file.path);
                // Also remove tasks from the deleted file
                const oldDateKeys = this.fileToTaskDates.get(file.path) || new Set();
                for (const dateKey of oldDateKeys) {
                    const tasks = this.tasksByDate.get(dateKey);
                    if (tasks) {
                        const remaining = tasks.filter(t => t.file.path !== file.path);
                        if (remaining.length > 0) this.tasksByDate.set(dateKey, remaining);
                        else this.tasksByDate.delete(dateKey);
                    }
                }
                this.fileToTaskDates.delete(file.path);
            } else {
                this.removeFileFromAssetMap(file.path);
            }
            this.refreshUI(file);
        }));

        // Vault event for renamed files
        this.registerEvent(this.app.vault.on("rename", async (file, oldPath) => {
            if (!(file instanceof TFile)) return;
            if (this.existingWeeklyNotes.has(oldPath)) {
                this.existingWeeklyNotes.delete(oldPath);
            }
            if (this.isWeeklyNote(file)) {
                this.existingWeeklyNotes.add(file.path);
            }

            if (file.path.toLowerCase().endsWith('.md')) {
                this.removeFileFromMaps(oldPath);
                this.addFileToMaps(file);
                // Re-point tasks to the new file path
                await this.updateTasksForFile(file);
            } else {
                this.removeFileFromAssetMap(oldPath);
                this.addFileToAssetMap(file);
            }
            this.refreshUI(file);
        }));


        const PULL_THRESHOLD = 70; // How far the user needs to pull down to trigger a refresh

        const resetPullStyles = () => {
            this.taskRefreshIndicator.removeClass('is-ready', 'is-pulling', 'is-refreshing');
            this.tasksContentEl.style.transform = `translateY(0px)`;
            this.taskRefreshIndicator.style.transform = `translateY(-50px) scale(0.7)`;
            setIcon(this.taskRefreshIndicator, 'arrow-down');
        };

        this.registerDomEvent(this.tasksContentEl, 'touchstart', (e) => {
            if (this.tasksContentEl.scrollTop === 0) {
                this.isTaskPulling = true;
                this.taskPullStartY = e.touches[0].clientY;
            }
        }, { passive: false });

        this.registerDomEvent(this.tasksContentEl, 'touchmove', (e) => {
            if (!this.isTaskPulling) return;

            const currentY = e.touches[0].clientY;
            // We only care about the downward pull distance from the start
            this.taskPullDistance = Math.max(0, currentY - this.taskPullStartY);

            // Only interfere if the list is scrolled to the top AND the user is pulling down.
            if (this.tasksContentEl.scrollTop === 0 && this.taskPullDistance > 0) {
                // Prevent the browser from scrolling the page
                e.preventDefault();

                const pullRatio = Math.min(this.taskPullDistance, PULL_THRESHOLD);
                this.tasksContentEl.style.transform = `translateY(${pullRatio}px)`;

                this.taskRefreshIndicator.addClass('is-pulling');
                this.taskRefreshIndicator.style.transform = `translateY(${pullRatio - 50}px) scale(0.7)`;

                if (this.taskPullDistance > PULL_THRESHOLD) {
                    this.taskRefreshIndicator.addClass('is-ready');
                    setIcon(this.taskRefreshIndicator, 'check');
                } else {
                    this.taskRefreshIndicator.removeClass('is-ready');
                    setIcon(this.taskRefreshIndicator, 'arrow-down');
                }
            } else {
                // If we've started scrolling down the list, stop tracking the pull
                this.isTaskPulling = false;
            }

        }, { passive: false });

        this.registerDomEvent(this.tasksContentEl, 'touchend', async (e) => {
            if (!this.isTaskPulling) return;
            this.isTaskPulling = false;

            if (this.taskPullDistance > PULL_THRESHOLD) {
                // Trigger the refresh
                this.taskRefreshIndicator.addClass('is-refreshing', 'is-ready');
                setIcon(this.taskRefreshIndicator, 'loader');

                await this.populateTasks();

                // Reset styles after refresh is complete
                setTimeout(() => {
                    resetPullStyles();
                }, 300); // Small delay for user to see the end of the spin

            } else {
                // Snap back if not pulled far enough
                resetPullStyles();
            }

            this.taskPullDistance = 0;

        });



        this.scheduleDailyRefresh();

    }

    /**
     * Forces a full rebuild of all data maps and a complete re-render of the view.
     * Useful after major setting changes.
     */
    async rebuildAndRender() {
        await this.buildCreatedNotesMap();
        await this.buildModifiedNotesMap();
        await this.buildAssetCreationMap();
        await this.refreshIcsEvents();
        await this.buildWeeklyNotesCache();
        this.render();
    }

    /**
     * Performs a more targeted UI refresh based on which file was changed,
     * avoiding a full re-render when possible.
     * @param {TFile} file The file that was changed.
     */
    async refreshUI(file) {
        // Debounce calendar render as it's the most common update
        clearTimeout(this.calendarRefreshDebounceTimer);
        this.calendarRefreshDebounceTimer = setTimeout(() => {
            // If in vertical view, a full re-render is needed to update all visible months.
            if (this.isVerticalView) {
                this.render();
            } else {
                // Otherwise, just re-render the single calendar grid.
                this.renderCalendar();
            }
        }, 300);

        // Refresh active tab if it's open and relevant
        switch (this.activeTab) {
            case 'scratch':
                if (file?.path === this.plugin.settings.fixedNoteFile) {
                    this.noteText = await this.loadNote();
                    if (this.noteTextarea) this.noteTextarea.value = this.noteText;
                }
                break;
            case 'notes':
                clearTimeout(this.notesRefreshDebounceTimer);
                this.notesRefreshDebounceTimer = setTimeout(() => this.populateNotes(), 250);
                break;
            case 'tasks':
                clearTimeout(this.taskRefreshDebounceTimer);
                this.taskRefreshDebounceTimer = setTimeout(() => this.populateTasks(), 250);
                break;
            case 'assets':
                // Invalidate asset cache and refresh
                this.isUnusedAssetCacheValid = false;
                this.populateAssets();
                break;
        }
    }

    async updateTasksForFile(file) {
        if (!file || !(file instanceof TFile) || !file.path.toLowerCase().endsWith('.md')) {
            return; // Do nothing if it's not a markdown file
        }

        // 1. Efficiently remove all old tasks from this file
        const oldDateKeys = this.fileToTaskDates.get(file.path) || new Set();
        for (const dateKey of oldDateKeys) {
            const tasksOnDate = this.tasksByDate.get(dateKey);
            if (tasksOnDate) {
                const remainingTasks = tasksOnDate.filter(task => task.file.path !== file.path);
                if (remainingTasks.length > 0) {
                    this.tasksByDate.set(dateKey, remainingTasks);
                } else {
                    this.tasksByDate.delete(dateKey); // Clean up empty date entries
                }
            }
        }
        this.fileToTaskDates.delete(file.path);

        // 2. Re-process the single file and add its new tasks
        if (this.plugin.settings.taskIgnoreFolders.some(folder => file.path.startsWith(folder))) {
            return; // Don't re-add if it's in an ignored folder
        }

        const content = await this.app.vault.cachedRead(file);
        const tasks = parseTasksFromFile(file, content);
        const newDateKeys = new Set();

        for (const task of tasks) {
            if (task.status.toLowerCase() !== 'x' && task.dueDate) {
                const dateKey = moment(task.dueDate).format("YYYY-MM-DD");
                if (!this.tasksByDate.has(dateKey)) {
                    this.tasksByDate.set(dateKey, []);
                }
                this.tasksByDate.get(dateKey).push(task);
                newDateKeys.add(dateKey);
            }
        }

        if (newDateKeys.size > 0) {
            this.fileToTaskDates.set(file.path, newDateKeys);
        }
    }

    /**
     * Updates the highlighter div with <mark> tags to show search term matches.
     */
    updateScratchpadHighlights() {
        if (!this.scratchHighlighterEl || !this.noteTextarea) return;

        const text = this.noteTextarea.value;
        const term = this.scratchpadSearchTerm;

        if (!term) {
            this.scratchHighlighterEl.innerHTML = '';
            return;
        }

        // Sanitize text to prevent HTML injection before inserting it into the highlighter.
        const sanitizedText = text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");

        const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regex = new RegExp(escapedTerm, 'gi');

        const highlightedHtml = sanitizedText.replace(regex, (match) => `<mark>${match}</mark>`);
        this.scratchHighlighterEl.innerHTML = highlightedHtml;
    }

    /**
     * Counts and displays the number of search matches in the scratchpad.
     */
    updateScratchpadSearchCount() {
        if (!this.scratchpadSearchCountEl || !this.noteTextarea) return;

        const term = this.scratchpadSearchTerm;
        const text = this.noteTextarea.value;
        let matchCount = 0;

        if (term) {
            const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const regex = new RegExp(escapedTerm, 'gi');
            matchCount = (text.match(regex) || []).length;
        }

        this.scratchpadSearchCountEl.setText(`(${matchCount})`);
    }

    /**
     * Checks if a file path should be ignored based on user settings.
     * @param {string} filePath The path of the file to check.
     * @param {string} settingKey The key for the ignore list in the plugin settings.
     * @returns {boolean} True if the path should be ignored.
     */
    isPathIgnored(filePath, settingKey = 'otherNoteIgnoreFolders') {
        // Normalize folder paths to end with a slash for consistent matching.
        const ignoreFolders = (this.plugin.settings[settingKey] || []).map(f => f.toLowerCase().endsWith('/') ? f.toLowerCase() : f.toLowerCase() + '/');
        const dailyNoteFolder = this.plugin.settings.dailyNotesFolder;
        const filePathLower = filePath.toLowerCase();

        // Always ignore files inside the daily notes folder for "other note" calculations.
        if (dailyNoteFolder && filePathLower.startsWith(dailyNoteFolder.toLowerCase() + "/")) {
            return true;
        }
        return ignoreFolders.some(folder => folder && filePathLower.startsWith(folder));
    }

    /**
     * Adds a file to the createdNotesMap and modifiedNotesMap.
     * @param {TFile} file The file to add.
     */
    addFileToMaps(file) {
        if (this.isPathIgnored(file.path)) return;

        // Add to createdNotesMap.
        const cdate = new Date(file.stat.ctime);
        const cdateKey = moment(cdate).format("YYYY-MM-DD");
        if (!this.createdNotesMap.has(cdateKey)) {
            this.createdNotesMap.set(cdateKey, []);
        }
        const createdFiles = this.createdNotesMap.get(cdateKey);
        if (!createdFiles.some(f => f.path === file.path)) {
            createdFiles.push(file);
        }

        // Add to modifiedNotesMap if modified date is on a different day than creation date.
        const mdate = new Date(file.stat.mtime);
        if (!isSameDay(cdate, mdate)) {
            const mdateKey = moment(mdate).format("YYYY-MM-DD");
            if (!this.modifiedNotesMap.has(mdateKey)) {
                this.modifiedNotesMap.set(mdateKey, []);
            }
            const modifiedFiles = this.modifiedNotesMap.get(mdateKey);
            if (!modifiedFiles.some(f => f.path === file.path)) {
                modifiedFiles.push(file);
            }
        }
    }

    /**
     * Removes a file from all internal note data maps by its path.
     * @param {string} filePath The path of the file to remove.
     */
    removeFileFromMaps(filePath) {
        // Iterate through maps and remove any entries with the given file path.
        for (const [key, files] of this.createdNotesMap.entries()) {
            const updatedFiles = files.filter(f => f.path !== filePath);
            if (updatedFiles.length < files.length) {
                if (updatedFiles.length === 0) {
                    this.createdNotesMap.delete(key);
                } else {
                    this.createdNotesMap.set(key, updatedFiles);
                }
            }
        }
        for (const [key, files] of this.modifiedNotesMap.entries()) {
            const updatedFiles = files.filter(f => f.path !== filePath);
            if (updatedFiles.length < files.length) {
                if (updatedFiles.length === 0) {
                    this.modifiedNotesMap.delete(key);
                } else {
                    this.modifiedNotesMap.set(key, updatedFiles);
                }
            }
        }
    }

    /**
     * Formats a file size in bytes into a human-readable string (B, KB, MB, GB).
     * @param {number} bytes The file size in bytes.
     * @returns {string} The formatted file size.
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        const fixed = i < 2 ? 0 : 1;
        return parseFloat((bytes / Math.pow(k, i)).toFixed(fixed)) + ' ' + sizes[i];
    }

    /**
     * Adds a new task to the scratchpad note using the format defined in settings.
     */
    async addNewTaskToScratchpad() {
        if (this.isScratchpadPreview || !this.noteTextarea) {
            return;
        }

        const taskFormatSetting = this.plugin.settings.scratchpad?.taskFormat || "- [ ] ";
        const processed = this.processDatePlaceholders(taskFormatSetting);
        const textToInsert = processed.text;
        const ta = this.noteTextarea;

        // 1. Capture current state
        const selectionStart = ta.selectionStart;
        const textBeforeCursor = ta.value.substring(0, selectionStart);
        const textAfterCursor = ta.value.substring(selectionStart);

        // 2. Prepare new text and update the value
        const needsLeadingNewline = textBeforeCursor.length > 0 && !textBeforeCursor.endsWith("\n");
        const finalInsertionText = needsLeadingNewline ? "\n" + textToInsert : textToInsert;
        const newText = textBeforeCursor + finalInsertionText + textAfterCursor;
        ta.value = newText;

        // 3. Set the new cursor position
        const newCursorPosition = selectionStart + finalInsertionText.length - (textToInsert.length - processed.cursorOffset);
        ta.setSelectionRange(newCursorPosition, newCursorPosition);

        // 4. Give the textarea focus
        ta.focus();

        // 5. Save the new content immediately
        this.noteText = newText;
        await this.saveFixedNote(this.noteText);
        this.updateScratchpadSearchCount();
        this.updateScratchpadHighlights();

        // --- FINAL SCROLL FIX ---
        // 6. Use an awaited Promise with a longer delay to ensure this runs LAST.
        await new Promise(resolve => setTimeout(resolve, 50)); // 50ms delay

        const lineHeight = parseFloat(getComputedStyle(ta).lineHeight) || 20;
        const linesToCaret = ta.value.slice(0, newCursorPosition).split("\n").length;
        const targetScrollTop = (linesToCaret - 1) * lineHeight;

        // Directly set the scroll position as the final action.
        ta.scrollTop = targetScrollTop;
    }


    /**
     * Scans all Markdown files in the vault to build the initial `createdNotesMap`.
     */
    async buildCreatedNotesMap() {
        this.createdNotesMap.clear();
        const allNotes = this.app.vault.getMarkdownFiles();
        for (const file of allNotes) {
            if (this.isPathIgnored(file.path)) continue;

            const cdate = new Date(file.stat.ctime);
            const dateKey = moment(cdate).format("YYYY-MM-DD");
            if (!this.createdNotesMap.has(dateKey)) {
                this.createdNotesMap.set(dateKey, []);
            }
            this.createdNotesMap.get(dateKey).push(file);
        }
    }

    /**
     * Scans all Markdown files in the vault to build the initial `modifiedNotesMap`.
     */
    async buildModifiedNotesMap() {
        this.modifiedNotesMap.clear();
        const allNotes = this.app.vault.getMarkdownFiles();
        for (const file of allNotes) {
            if (this.isPathIgnored(file.path)) continue;

            const cdate = new Date(file.stat.ctime);
            const mdate = new Date(file.stat.mtime);
            if (!isSameDay(cdate, mdate)) {
                const dateKey = moment(mdate).format("YYYY-MM-DD");
                if (!this.modifiedNotesMap.has(dateKey)) {
                    this.modifiedNotesMap.set(dateKey, []);
                }
                if (!this.modifiedNotesMap.get(dateKey).some(f => f.path === file.path)) {
                    this.modifiedNotesMap.get(dateKey).push(file);
                }
            }
        }
    }

    /**
     * Scans all non-Markdown files in the vault to build the `assetCreationMap`.
     */
    async buildAssetCreationMap() {
        this.assetCreationMap.clear();
        const allFiles = this.app.vault.getFiles();
        const ignoreFolders = (this.plugin.settings.assetIgnoreFolders || []).map(f => f.toLowerCase().endsWith('/') ? f.toLowerCase() : f.toLowerCase() + '/');
        const hiddenTypes = (this.plugin.settings.hiddenAssetTypes || "")
            .split(',')
            .map(ext => ext.trim().toLowerCase())
            .filter(ext => ext.length > 0);

        for (const file of allFiles) {
            if (file.path.toLowerCase().endsWith('.md')) continue;
            if (hiddenTypes.includes(file.extension.toLowerCase())) continue; // Filter by extension

            const filePathLower = file.path.toLowerCase();
            if (ignoreFolders.some(folder => folder && filePathLower.startsWith(folder))) continue;

            const cdate = new Date(file.stat.ctime);
            const dateKey = moment(cdate).format("YYYY-MM-DD");
            if (!this.assetCreationMap.has(dateKey)) {
                this.assetCreationMap.set(dateKey, []);
            }
            this.assetCreationMap.get(dateKey).push(file);
        }
    }

    /**
     * Finds all asset files in the vault that are not linked to from any Markdown file.
     * @returns {Promise<Set<string>>} A promise that resolves to a Set of unused asset paths.
     */
    async getUnusedAssetPaths() {
        const allMarkdownFiles = this.app.vault.getMarkdownFiles();
        const referencedAssetPaths = new Set();

        for (const mdFile of allMarkdownFiles) {
            const cache = this.app.metadataCache.getFileCache(mdFile);
            if (!cache) continue;

            const linksAndEmbeds = [...(cache.embeds || []), ...(cache.links || [])];

            for (const ref of linksAndEmbeds) {
                const linkedFile = this.app.metadataCache.getFirstLinkpathDest(ref.link, mdFile.path);
                if (linkedFile && !linkedFile.path.toLowerCase().endsWith('.md')) {
                    referencedAssetPaths.add(linkedFile.path);
                }
            }
        }
        const allAssetPaths = this.app.vault.getFiles()
            .filter(file => !file.path.toLowerCase().endsWith('.md'))
            .map(file => file.path);

        const unusedAssetPaths = new Set(allAssetPaths.filter(assetPath => !referencedAssetPaths.has(assetPath)));
        return unusedAssetPaths;
    }

    /**
     * Renders the list of recent assets in the "Assets" tab.
     */
    async populateAssets() {
        if (!this.assetsContentEl) return;
        this.assetsContentEl.empty();

        const settings = this.plugin.settings;
        let unusedAssetPaths = new Set();
        if (settings.showUnusedAssetsIndicator) {
            if (!this.isUnusedAssetCacheValid) {
                this.unusedAssetPathsCache = await this.getUnusedAssetPaths();
                this.isUnusedAssetCacheValid = true;
            }
            unusedAssetPaths = this.unusedAssetPathsCache;
        }
        const cutoff = moment().startOf('day').subtract(settings.assetsLookbackDays - 1, 'days').valueOf();
        const ignoreFolders = (settings.assetIgnoreFolders || []).map(f => f.toLowerCase().endsWith('/') ? f.toLowerCase() : f.toLowerCase() + '/');
        const hiddenTypes = (settings.hiddenAssetTypes || "").split(',').map(ext => ext.trim().toLowerCase()).filter(ext => ext.length > 0);

        const allAssets = this.app.vault.getFiles()
            .filter(file =>
                !file.path.toLowerCase().endsWith('.md') &&
                !hiddenTypes.includes(file.extension.toLowerCase()) &&
                !ignoreFolders.some(f => file.path.toLowerCase().startsWith(f)) &&
                (file.stat.mtime >= cutoff || file.stat.ctime >= cutoff)
            )
            .sort((a, b) => b.stat.mtime - a.stat.mtime);

        const searchTerm = this.assetsSearchTerm.toLowerCase();
        const filteredAssets = searchTerm ? allAssets.filter(file => file.name.toLowerCase().includes(searchTerm)) : allAssets;
        const searchInputEl = this.assetsSearchInputEl;

        const groups = { today: [], yesterday: [], thisWeek: [], lastWeek: [], thisMonth: [], older: [] };
        const now = moment();
        filteredAssets.forEach(file => {
            const modTime = moment(file.stat.mtime);
            if (modTime.isSame(now, 'day')) groups.today.push(file);
            else if (modTime.isSame(now.clone().subtract(1, 'day'), 'day')) groups.yesterday.push(file);
            else if (modTime.isSame(now, 'week')) groups.thisWeek.push(file);
            else if (modTime.isSame(now.clone().subtract(1, 'week'), 'week')) groups.lastWeek.push(file);
            else if (modTime.isSame(now, 'month')) groups.thisMonth.push(file);
            else groups.older.push(file);
        });

        const groupOrder = [
            { key: 'today', label: 'Today' }, { key: 'yesterday', label: 'Yesterday' },
            { key: 'thisWeek', label: 'This Week' }, { key: 'lastWeek', label: 'Last Week' },
            { key: 'thisMonth', label: 'This Month' }, { key: 'older', label: 'Older' },
        ];

        if (filteredAssets.length === 0) {
            this.assetsContentEl.createDiv({ text: 'No assets found', cls: 'task-group-empty-message' });
            return;
        }

        groupOrder.forEach(groupInfo => {
            const assetsInGroup = groups[groupInfo.key];
            if (assetsInGroup.length > 0) {
                const groupContainer = this.assetsContentEl.createDiv({ cls: 'note-group-container' });
                const isCollapsed = this.collapsedAssetGroups[groupInfo.key];
                if (isCollapsed) groupContainer.addClass('is-collapsed');

                const header = groupContainer.createDiv({ cls: 'note-group-header' });
                const headerContent = header.createDiv({ cls: 'note-group-header-content' });
                const collapseIcon = headerContent.createDiv({ cls: 'note-group-collapse-icon' });
                setIcon(collapseIcon, 'chevron-down');
                headerContent.createSpan({ text: groupInfo.label });
                header.createDiv({ cls: 'note-group-count', text: assetsInGroup.length });


                header.addEventListener('click', () => {
                    // Toggle the collapsed state
                    const isCurrentlyCollapsed = groupContainer.classList.toggle('is-collapsed');

                    // Update and save the state
                    this.collapsedAssetGroups[groupInfo.key] = isCurrentlyCollapsed;
                    this.plugin.saveSettings();
                });

                /*header.addEventListener('click', () => {
                    const currentlyCollapsed = groupContainer.classList.toggle('is-collapsed');
                    this.collapsedAssetGroups[groupInfo.key] = currentlyCollapsed;
                    this.plugin.saveSettings();
                });
                */

                const listWrapper = groupContainer.createDiv({ cls: 'note-list-wrapper' });

                if (this.isAssetsGridView) {
                    listWrapper.addClass('assets-grid-view');
                    assetsInGroup.forEach(file => {
                        const item = listWrapper.createDiv("asset-grid-item");
                        item.setAttribute('aria-label', file.path);

                        const preview = item.createDiv("asset-grid-preview");
                        if (this.isImageAsset(file)) {
                            const thumbnail = preview.createEl('img');
                            thumbnail.src = this.app.vault.getResourcePath(file);
                        } else {
                            setIcon(preview, 'file-question');
                        }
                        const nameEl = item.createDiv({ text: file.name, cls: "asset-grid-name" });

                        // 1. Clicking the image preview opens the asset file.
                        preview.addEventListener("click", (e) => {
                            e.stopPropagation();
                            this.handleFileClick(file, e);
                        });

                        // 2. Clicking the name finds and opens the note the asset is on.
                        nameEl.addEventListener("click", async (e) => {
                            e.stopPropagation();
                            const backlinks = await this.findAssetBacklinks(file);
                            if (backlinks.length === 1) {
                                const noteFile = backlinks[0];
                                const cache = this.app.metadataCache.getFileCache(noteFile);
                                let targetLine = 0;
                                if (cache) {
                                    const allLinks = [...(cache.embeds || []), ...(cache.links || [])];
                                    for (const ref of allLinks) {
                                        const linkedFile = this.app.metadataCache.getFirstLinkpathDest(ref.link, noteFile.path);
                                        if (linkedFile && linkedFile.path === file.path) {
                                            targetLine = ref.position.start.line;
                                            break;
                                        }
                                    }
                                }
                                const openInNewTab = this.plugin.settings.notesOpenAction === 'new-tab';
                                const leaf = this.app.workspace.getLeaf(openInNewTab);
                                await leaf.openFile(noteFile, { eState: { line: targetLine } });
                            } else if (backlinks.length > 1) {
                                this.showBacklinksPopup(nameEl, file);
                            } else {
                                new Notice("This asset is not used in any notes.");
                            }
                        });

                        this.addFileContextMenu(item, file, () => this.populateAssets());
                    });
                } else {
                    listWrapper.removeClass('assets-grid-view');
                    assetsInGroup.forEach(file => {
                        const row = listWrapper.createDiv("note-row");
                        const isUnused = unusedAssetPaths.has(file.path);

                        const titleWrapper = row.createDiv({ cls: 'note-title-wrapper' });

                        const iconContainer = titleWrapper.createDiv({ cls: 'asset-icon-container' });
                        if (this.isImageAsset(file)) {
                            const thumbnail = iconContainer.createEl('img', { cls: 'asset-thumbnail' });
                            thumbnail.src = this.app.vault.getResourcePath(file);
                        }

                        // --- CLICK ICON TO OPEN ASSET ---
                        iconContainer.addEventListener('click', (e) => {
                            e.stopPropagation(); // Prevents the row's click listener from also firing
                            this.handleFileClick(file, e);
                        });

                        if (isUnused && settings.showUnusedAssetsIndicator) {
                            const actionIconContainer = titleWrapper.createDiv({ cls: 'asset-action-icon' });
                            const unlinkIcon = actionIconContainer.createDiv();
                            setIcon(unlinkIcon, 'unlink');
                            const deleteIcon = actionIconContainer.createDiv();
                            setIcon(deleteIcon, 'trash');
                            actionIconContainer.addEventListener('click', (e) => {
                                e.stopPropagation();
                                this.handleDeleteAsset(file);
                            });
                        }

                        const titleEl = titleWrapper.createDiv({ text: file.name, cls: "note-title" });
                        titleEl.setAttribute('aria-label', file.path);

                        const metaContainer = row.createDiv({ cls: 'note-meta-container' });
                        metaContainer.createSpan({ text: this.formatFileSize(file.stat.size), cls: "note-file-size" });
                        metaContainer.createSpan({ text: formatDateTime(new Date(file.stat.mtime)), cls: "note-mod-date" });

                        // --- CLICK ROW TO FIND NOTE(S) ---
                        row.addEventListener("click", async () => {
                            const backlinks = await this.findAssetBacklinks(file);
                            if (backlinks.length === 1) {
                                // If there's only one backlink, find its line number and scroll to it.
                                const noteFile = backlinks[0];
                                const cache = this.app.metadataCache.getFileCache(noteFile);
                                let targetLine = 0;
                                if (cache) {
                                    const allLinks = [...(cache.embeds || []), ...(cache.links || [])];
                                    for (const ref of allLinks) {
                                        const linkedFile = this.app.metadataCache.getFirstLinkpathDest(ref.link, noteFile.path);
                                        if (linkedFile && linkedFile.path === file.path) {
                                            targetLine = ref.position.start.line;
                                            break;
                                        }
                                    }
                                }
                                const openInNewTab = this.plugin.settings.notesOpenAction === 'new-tab';
                                const leaf = this.app.workspace.getLeaf(openInNewTab);
                                await leaf.openFile(noteFile, { eState: { line: targetLine } });

                            } else if (backlinks.length > 1) {
                                this.showBacklinksPopup(row, file);
                            } else {
                                new Notice("This asset is not used in any notes.");
                            }
                        });

                        this.addKeydownListeners(row, searchInputEl);
                        this.addFileContextMenu(row, file, () => this.populateAssets());
                    });
                }
            }
        });
    }

    /**
     * Gets the final, ordered list of tabs to display, combining user-defined order
     * with the full list of possible tabs to ensure none are missing.
     * @returns {string[]} An array of tab keys in the correct order.
     */
    getFinalTabOrder() {
        const allPossibleTabs = Object.keys(this.plugin.settings.tabVisibility);
        const userTabOrder = this.plugin.settings.tabOrder || allPossibleTabs;
        // Use a Set to merge the user's order with all possible tabs, ensuring no duplicates and that new tabs are appended.
        const finalTabOrder = [...new Set([...userTabOrder, ...allPossibleTabs])];
        return finalTabOrder;
    }

    /**
     * Adds a non-Markdown file to the `assetCreationMap`.
     * @param {TFile} file The asset file to add.
     */
    addFileToAssetMap(file) {
        if (file.path.toLowerCase().endsWith('.md')) return;

        const ignoreFolders = (this.plugin.settings.assetIgnoreFolders || []).map(f => f.toLowerCase().endsWith('/') ? f.toLowerCase() : f.toLowerCase() + '/');
        const filePathLower = file.path.toLowerCase();
        if (ignoreFolders.some(folder => folder && filePathLower.startsWith(folder))) return;

        const cdate = new Date(file.stat.ctime);
        const dateKey = moment(cdate).format("YYYY-MM-DD");
        if (!this.assetCreationMap.has(dateKey)) {
            this.assetCreationMap.set(dateKey, []);
        }
        const assets = this.assetCreationMap.get(dateKey);
        if (!assets.some(f => f.path === file.path)) {
            assets.push(file);
        }
    }

    /**
     * Removes a non-Markdown file from the `assetCreationMap` by its path.
     * @param {string} filePath The path of the asset file to remove.
     */
    removeFileFromAssetMap(filePath) {
        if (filePath.toLowerCase().endsWith('.md')) return;

        for (const [key, files] of this.assetCreationMap.entries()) {
            const updatedFiles = files.filter(f => f.path !== filePath);
            if (updatedFiles.length < files.length) {
                if (updatedFiles.length === 0) {
                    this.assetCreationMap.delete(key);
                } else {
                    this.assetCreationMap.set(key, updatedFiles);
                }
            }
        }
    }

    /**
     * Adds mouse hover listeners to calendar header cells to highlight the entire column.
     * @param {HTMLTableRowElement} headerRow The <thead> row element.
     * @param {HTMLTableSectionElement} tableBody The <tbody> element.
     */
    addColumnHighlighting(headerRow, tableBody) {
        if (!this.plugin.settings.enableColumnHighlight) return;
        const headerCells = headerRow.querySelectorAll('th');
        headerCells.forEach((th, colIndex) => {
            if (th.textContent.trim() === "") return;

            th.addEventListener('mouseenter', () => {
                const highlightColor = document.body.classList.contains('theme-dark')
                    ? this.plugin.settings.rowHighlightColorDark
                    : this.plugin.settings.rowHighlightColorLight;
                th.style.backgroundColor = highlightColor;
                const rows = tableBody.querySelectorAll('tr');
                rows.forEach(row => {
                    const cell = row.children[colIndex];
                    if (cell) cell.style.backgroundColor = highlightColor;
                });
            });
            th.addEventListener('mouseleave', () => {
                th.style.backgroundColor = ''; // Always clear the header's highlight
                const rows = tableBody.querySelectorAll('tr');
                rows.forEach(row => {
                    const cell = row.children[colIndex];
                    if (cell) {
                        // Check if the cell is in the permanently highlighted row
                        if (this.plugin.settings.highlightCurrentWeek && row.classList.contains('current-week-row')) {
                            // If yes, restore the permanent highlight color
                            const permanentColor = document.body.classList.contains('theme-dark')
                                ? this.plugin.settings.rowHighlightColorDark
                                : this.plugin.settings.rowHighlightColorLight;
                            cell.style.backgroundColor = permanentColor;
                        } else {
                            // Otherwise, clear the hover highlight as before
                            cell.style.backgroundColor = '';
                        }
                    }
                });
            });
        });
    }

    /**
     * Formats the period and week numbers according to the user's preference.
     * @param {number} period The period number.
     * @param {number} week The week number.
     * @returns {string} The formatted string.
     */
    formatPW(period, week) { return this.plugin.settings.pwFormat.replace('#', period).replace('#', week); }

    /**
     * Renders the infinite-scrolling vertical calendar view.
     * @param {HTMLElement} container The parent element to render into.
     */
    renderVerticalCalendar(container) {
        this.intersectionObserver?.disconnect();

        // FIX 1: The variable is now a class property `this.verticalScrollerEl`
        this.verticalScrollerEl = container.createDiv("vertical-calendar-scroller");

        const initialMonthId = `month-${this.displayedMonth.getFullYear()}-${this.displayedMonth.getMonth()}`;
        const numMonthsAfter = 12;
        for (let i = -6; i <= numMonthsAfter; i++) {
            const monthDate = new Date(this.displayedMonth.getFullYear(), this.displayedMonth.getMonth() + i, 1);

            // FIX 2: Use the new class property here
            const monthWrapper = this.verticalScrollerEl.createDiv({ cls: "vertical-month-wrapper" });

            monthWrapper.id = `month-${monthDate.getFullYear()}-${monthDate.getMonth()}`;
            monthWrapper.createEl("h3", {
                cls: "vertical-month-title",
                text: formatMonthTitle(monthDate, this.plugin.settings.monthTitleFormat)
            });
            const table = monthWrapper.createEl("table", { cls: "period-calendar-table" });
            const thead = table.createEl("thead");
            const headerRow = thead.createEl("tr");

            if (this.plugin.settings.showPWColumn) {
                headerRow.createEl("th", { text: " " });
            }
            if (this.plugin.settings.showWeekNumbers) {
                headerRow.createEl("th", { text: this.plugin.settings.weekNumberColumnLabel });
            }
            const startDayOffset = this.plugin.settings.weekStartDay === 'monday' ? 1 : 0;
            for (let d = 0; d < 7; d++) {
                const dayIndex = (d + startDayOffset) % 7;
                headerRow.createEl("th", { text: moment().day(dayIndex).format("ddd").toUpperCase() });
            }

            // Add today's header highlight
            if (this.plugin.settings.highlightTodayDayHeader) {
                const today = new Date();
                if (monthDate.getFullYear() === today.getFullYear() && monthDate.getMonth() === today.getMonth()) {
                    const todayHeaderIndex = Array.from(headerRow.children).findIndex(th => th.textContent.toLowerCase() === moment(today).format("ddd").toLowerCase());
                    if (todayHeaderIndex !== -1) {
                        headerRow.children[todayHeaderIndex].addClass("today-day-header");
                    }
                }
            }

            const tbody = table.createEl("tbody");
            this.generateMonthGrid(monthDate, tbody);
            this.addColumnHighlighting(headerRow, tbody);
        }

        // After the layout is ready, scroll the initial month into view.
        this.app.workspace.onLayoutReady(() => {
            // SET FLAG before scrolling
            this.isProgrammaticScroll = true;

            const initialEl = this.verticalScrollerEl.querySelector(`#${initialMonthId}`);
            if (initialEl) {
                initialEl.scrollIntoView({ block: 'start' });
            }

            // CLEAR FLAG after scroll completes
            setTimeout(() => {
                this.isProgrammaticScroll = false;
            }, 300);
        });

        // Use a scroll listener to update the main header title.
        // FIX 4: Use the new class property here
        this.verticalScrollerEl.addEventListener('scroll', () => {

            // if programmatic scroll is in progress, do nothing
            if (this.isProgrammaticScroll) {
                return;
            }

            clearTimeout(this.titleUpdateTimeout);
            this.titleUpdateTimeout = setTimeout(() => {
                let topmostVisibleMonth = null;
                let smallestTopValue = Infinity;

                // FIX 5 & 6: Use the new class property here
                const scrollerTop = this.verticalScrollerEl.getBoundingClientRect().top;
                const monthElements = this.verticalScrollerEl.querySelectorAll('.vertical-month-wrapper');

                for (const monthEl of monthElements) {
                    const monthTop = monthEl.getBoundingClientRect().top;
                    if (monthTop >= scrollerTop && monthTop < smallestTopValue) {
                        smallestTopValue = monthTop;
                        topmostVisibleMonth = monthEl;
                    }
                }
                if (topmostVisibleMonth) {
                    const [_, year, month] = topmostVisibleMonth.id.split('-').map(Number);
                    if (this.displayedMonth.getFullYear() !== year || this.displayedMonth.getMonth() !== month) {
                        this.displayedMonth = new Date(year, month, 1);
                        this.updateMonthTitle();
                        this.updateTodayBtnAriaLabel();
                    }
                }
            }, 100);
        });
    }



    async onclose() {
        this.intersectionObserver?.disconnect();
        if (this.dailyRefreshTimeout) clearTimeout(this.dailyRefreshTimeout);
        if (this.themeObserver) this.themeObserver.disconnect();
    }

    /**
    * A helper function to create a standardized search input with a clear button.
    * @param {HTMLElement} container The parent element.
    * @param {string} placeholder The placeholder text for the input.
    * @param {(term: string) => void} onInput The callback function to execute on input.
    * @returns {HTMLInputElement} The created input element.
    */
    setupSearchInput(container, placeholder, onInput) {
        const inputEl = container.createEl("input", {
            type: "text",
            placeholder: placeholder,
            cls: "pm-search-input" // Use a consistent class
        });

        // Create the clear button inside this function
        const clearButton = container.createDiv({ cls: "search-input-clear-btn" });
        setIcon(clearButton, "x");

        clearButton.addEventListener('click', () => {
            inputEl.value = "";
            inputEl.dispatchEvent(new Event('input'));
            inputEl.focus();
        });

        inputEl.addEventListener("input", (e) => {
            const term = e.target.value;
            clearButton.style.visibility = term ? 'visible' : 'hidden';
            onInput(term);
        });

        inputEl.addEventListener("keydown", (e) => {
            if (e.key === 'Escape') {
                e.preventDefault();
                inputEl.value = "";
                inputEl.dispatchEvent(new Event('input'));
            } else if (e.key === 'ArrowDown') {
                e.preventDefault();
                const contentEl = this.activeTab === 'notes' ? this.notesContentEl : this.tasksContentEl;
                const firstItem = contentEl.querySelector('.note-row, .task-row');
                if (firstItem) firstItem.focus();
            }
        });
        return inputEl;
    }

    /**
     * Sets up the tab container, creating draggable tabs with click and double-click behaviors.
     * @param {HTMLElement} tabContainer The parent element for the tabs.
     * @param {(tab: string) => void} switchTabs The function to call when a tab is clicked.
     * @returns {Object.<string, HTMLElement>} A map of tab keys to their corresponding HTML elements.
     */
    setupDraggableTabs(tabContainer, switchTabs) {
        tabContainer.empty();
        const tabOrder = this.getFinalTabOrder()
            .filter(key => this.plugin.settings.tabVisibility[key]);

        const tabElements = {};
        const tooltipLabels = {
            scratch: "ScratchPad",
            notes: "Recent Notes",
            pinned: "Pinned Notes",
            tasks: "Tasks",
            assets: "Assets"
        };

        for (const key of tabOrder) {
            const tabEl = tabContainer.createDiv({ cls: "note-tab" });
            this.getTabLabel(tabEl, key);
            tabEl.dataset.tabKey = key;

            const initialTooltip = key === 'notes'
                ? (this.notesViewMode === 'pinned' ? tooltipLabels.pinned : tooltipLabels.notes)
                : tooltipLabels[key];
            tabEl.setAttribute('aria-label', initialTooltip);

            tabElements[key] = tabEl;

            tabEl.addEventListener("click", async () => {
                if (this.activeTab === key) {
                    // This is a second click on an already active tab, which triggers a special action.
                    if (key === 'scratch') {
                        this.openScratchpadFile();
                    } else if (key === 'tasks') {
                        const currentGroupBy = this.plugin.settings.taskGroupBy;
                        const newGroupBy = currentGroupBy === 'date' ? 'tag' : 'date';
                        this.plugin.settings.taskGroupBy = newGroupBy;

                        await this.plugin.saveData(this.plugin.settings);
                        this.getTabLabel(tabEl, 'tasks');
                        await this.populateTasks();

                    } else if (key === 'assets') {
                        this.isAssetsGridView = !this.isAssetsGridView;
                        this.getTabLabel(tabEl, 'assets');
                        await this.populateAssets();
                        this.isAssetsGridView ? 'grid' : 'list';
                    } else if (key === 'notes') {
                        this.notesViewMode = this.notesViewMode === 'recent' ? 'pinned' : 'recent';
                        this.plugin.settings.notesViewMode = this.notesViewMode;
                        await this.plugin.saveData(this.plugin.settings);

                        this.getTabLabel(tabEl, 'notes');
                        const newTooltip = this.notesViewMode === 'pinned' ? tooltipLabels.pinned : tooltipLabels.notes;
                        tabEl.setAttribute('aria-label', newTooltip);

                        await this.populateNotes();
                    }
                } else {
                    // This is a first click, just switch to the tab.
                    switchTabs(key);
                }
            });

            // --- HTML5 Drag and Drop Listeners for reordering tabs ---
            tabEl.draggable = true;

            tabEl.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', key);
                e.dataTransfer.effectAllowed = 'move';
                setTimeout(() => tabEl.classList.add('dragging'), 0);
            });

            tabEl.addEventListener('dragend', () => tabEl.classList.remove('dragging'));

            tabEl.addEventListener('dragover', (e) => {
                e.preventDefault();
                const target = e.currentTarget;
                const rect = target.getBoundingClientRect();
                const isAfter = e.clientX > rect.left + rect.width / 2;

                target.classList.remove('drag-over-indicator-before', 'drag-over-indicator-after');
                if (isAfter) {
                    target.classList.add('drag-over-indicator-after');
                } else {
                    target.classList.add('drag-over-indicator-before');
                }
            });

            tabEl.addEventListener('dragleave', (e) => {
                e.currentTarget.classList.remove('drag-over-indicator-before', 'drag-over-indicator-after');
            });

            tabEl.addEventListener('drop', async (e) => {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over-indicator-before', 'drag-over-indicator-after');

                const draggedKey = e.dataTransfer.getData('text/plain');
                const targetKey = e.currentTarget.dataset.tabKey;
                if (draggedKey === targetKey) return;

                const rect = e.currentTarget.getBoundingClientRect();
                const isAfter = e.clientX > rect.left + rect.width / 2;

                let currentOrder = this.plugin.settings.tabOrder;
                const newOrder = currentOrder.filter(k => k !== draggedKey);
                const targetIndex = newOrder.indexOf(targetKey);

                if (isAfter) {
                    newOrder.splice(targetIndex + 1, 0, draggedKey);
                } else {
                    newOrder.splice(targetIndex, 0, draggedKey);
                }

                this.plugin.settings.tabOrder = newOrder;
                await this.plugin.saveData(this.plugin.settings);

                newOrder.forEach(k => tabContainer.appendChild(tabElements[k]));
            });
        }
        return tabElements;
    }

    updateDayHeaderHighlight() {
        // 1. If the header row doesn't exist yet, do nothing.
        if (!this.calendarHeaderRowEl) return;

        // 2. Get all the header cells ('th' elements).
        const headers = this.calendarHeaderRowEl.querySelectorAll('th');
        const today = new Date();

        // 3. IMPORTANT: Remove the highlight from every header first to reset them.
        headers.forEach(th => th.classList.remove('today-day-header'));

        // 4. If the user has this feature turned off in settings, stop here.
        if (!this.plugin.settings.highlightTodayDayHeader) {
            return;
        }

        // 5. Check if the month/year being displayed is the actual current month/year.
        const isCurrentMonth = this.displayedMonth.getFullYear() === today.getFullYear() &&
            this.displayedMonth.getMonth() === today.getMonth();

        // 6. Only if it IS the current month, apply the highlight.
        if (isCurrentMonth) {
            const todayDayOfWeek = today.getDay(); // Sunday=0, Monday=1...
            const weekStartsOnMonday = this.plugin.settings.weekStartDay === 'monday';

            let todayColumnIndex;
            if (weekStartsOnMonday) {
                todayColumnIndex = (todayDayOfWeek === 0) ? 6 : todayDayOfWeek - 1; // Mon=0, Tue=1..Sun=6
            } else {
                todayColumnIndex = todayDayOfWeek; // Sun=0, Mon=1...
            }

            // Account for the extra columns you might have (PW, WeekNr)
            let offset = 0;
            if (this.plugin.settings.showPWColumn) offset++;
            if (this.plugin.settings.showWeekNumbers) offset++;

            const targetTh = headers[todayColumnIndex + offset];
            if (targetTh) {
                targetTh.classList.add('today-day-header');
            }
        }
    }

    /**
     * The main render function for the entire view. It builds the DOM from scratch.
     */
    render() {
        // Determine the first visible tab to be the default active tab.
        const finalTabOrder = this.getFinalTabOrder();
        const visibleTabs = finalTabOrder.filter(key => this.plugin.settings.tabVisibility[key]);

        // Only reset the active tab if it's not set or has become invisible
        if (!this.activeTab || !visibleTabs.includes(this.activeTab)) {
            this.activeTab = visibleTabs[0] || null;
        }

        this.containerEl.empty();
        const container = this.containerEl.createDiv("period-month-container");
        container.addClass(`layout-${this.plugin.settings.calendarLayout}`);
        container.addClass(`today-style-${this.plugin.settings.todayHighlightStyle}`);
        container.toggleClass("hide-grid", !this.plugin.settings.showCalendarGridLines);
        container.classList.toggle("calendar-collapsed", this.isCalendarCollapsed);
        container.toggleClass("vertical-view-active", this.isVerticalView);
        container.toggleClass('monday-start', this.plugin.settings.weekStartDay === 'monday');



        // Add weekend shading classes
        if (this.plugin.settings.highlightWeekends) {
            container.addClass('weekend-shading-enabled');
        }

        if (this.plugin.settings.showPWColumn) {
            container.addClass('has-pw-column');
        }

        if (this.plugin.settings.showWeekNumbers) {
            container.addClass('has-week-numbers');
        }

        // --- Header and Navigation ---
        const headerDiv = container.createDiv("month-header");
        this.monthNameEl = headerDiv.createDiv({ cls: "month-header-title" });
        this.updateMonthTitle();
        this.monthNameEl.addEventListener('click', () => {
            // SET THE FLAG before switching views
            this.isProgrammaticScroll = true;

            this.isVerticalView = !this.isVerticalView;
            this.render();

            // CLEAR THE FLAG after render and initial scroll complete
            setTimeout(() => {
                this.isProgrammaticScroll = false;
            }, 800);  // Longer delay for initial view render on mobile
        });
        const navDiv = headerDiv.createDiv({ cls: "month-header-nav" });

        const backBtn = navDiv.createEl("button");
        backBtn.setAttribute("aria-label", "Previous month");
        setIcon(backBtn, "chevron-left");
        backBtn.addEventListener('click', () => {
            if (this.isVerticalView) {
                // SET FLAG
                this.isProgrammaticScroll = true;

                this.displayedMonth.setMonth(this.displayedMonth.getMonth() - 1, 1);

                const targetMonthId = `month-${this.displayedMonth.getFullYear()}-${this.displayedMonth.getMonth()}`;
                const targetEl = this.verticalScrollerEl?.querySelector(`#${targetMonthId}`);

                if (targetEl) {
                    targetEl.scrollIntoView({ block: 'start', behavior: 'smooth' });
                    this.updateMonthTitle();
                    this.updateTodayBtnAriaLabel();

                    // CLEAR FLAG
                    setTimeout(() => {
                        this.isProgrammaticScroll = false;
                    }, 500);
                }
            } else {
                this.changeMonth(-1);
            }
        });
        // Store reference and add new event listener for the "Today" button
        const todayBtn = navDiv.createEl('button');
        this.todayBtn = todayBtn;
        setIcon(todayBtn, 'calendar-clock');

        // Apply initial style and ARIA label on render
        if (this.isPopupLocked) {
            this.todayBtn.classList.add('popup-locked');
        }
        this.updateTodayBtnAriaLabel();

        todayBtn.addEventListener('click', () => {
            // Primary Action: Unlock popups if they are locked.
            if (this.isPopupLocked) {
                this.isPopupLocked = false;
                this.todayBtn.classList.remove('popup-locked');
                //new Notice('Calendar popups re-enabled.');
                this.updateTodayBtnAriaLabel();
                return;
            }

            const now = new Date();
            const isAlreadyCurrentMonth = this.displayedMonth.getFullYear() === now.getFullYear() && this.displayedMonth.getMonth() === now.getMonth();

            if (!isAlreadyCurrentMonth) {
                // ACTION A: If not on the current month, navigate there.
                if (this.isVerticalView) {
                    // SET THE FLAG TO PREVENT SCROLL LISTENER INTERFERENCE
                    this.isProgrammaticScroll = true;

                    // Set state to today
                    this.displayedMonth = new Date();
                    const initialMonthId = `month-${this.displayedMonth.getFullYear()}-${this.displayedMonth.getMonth()}`;

                    // Use the stored scroller reference to find the element
                    if (this.verticalScrollerEl) {
                        const initialEl = this.verticalScrollerEl.querySelector(`#${initialMonthId}`);
                        if (initialEl) {
                            // Scroll to the element
                            initialEl.scrollIntoView({ block: 'start', behavior: 'smooth' });

                            // Update the UI immediately
                            this.updateMonthTitle();
                            this.updateTodayBtnAriaLabel();

                            // CLEAR THE FLAG AFTER SCROLL ANIMATION COMPLETES
                            // The timeout should match or exceed the smooth scroll duration
                            setTimeout(() => {
                                this.isProgrammaticScroll = false;
                            }, 500);  // Adjust timing if needed (600-800ms for longer scrolls)
                        }
                    }
                } else {
                    // This handles the standard single-month view
                    this.changeMonth(0, true);
                }
                return;
            }

            // ACTION B: If already on the current month, lock the popups.
            this.isPopupLocked = true;
            this.todayBtn.classList.add('popup-locked');
            //new Notice('Calendar popups disabled.');
            this.updateTodayBtnAriaLabel();
        });



        // Ensure the button style is correct on re-render
        if (this.isPopupLocked) {
            this.todayBtn.classList.add('popup-locked');
        }

        const forwardBtn = navDiv.createEl("button");
        forwardBtn.setAttribute("aria-label", "Next month");
        setIcon(forwardBtn, "chevron-right");
        forwardBtn.addEventListener('click', () => {
            if (this.isVerticalView) {
                // SET FLAG
                this.isProgrammaticScroll = true;

                this.displayedMonth.setMonth(this.displayedMonth.getMonth() + 1, 1);

                const targetMonthId = `month-${this.displayedMonth.getFullYear()}-${this.displayedMonth.getMonth()}`;
                const targetEl = this.verticalScrollerEl?.querySelector(`#${targetMonthId}`);

                if (targetEl) {
                    targetEl.scrollIntoView({ block: 'start', behavior: 'smooth' });
                    this.updateMonthTitle();
                    this.updateTodayBtnAriaLabel();

                    // CLEAR FLAG
                    setTimeout(() => {
                        this.isProgrammaticScroll = false;
                    }, 500);
                }
            } else {
                this.changeMonth(1);
            }
        });

        const collapseBtn = navDiv.createEl("button");
        this.collapseBtn = collapseBtn;
        collapseBtn.setAttribute("aria-label", "Toggle calendar visibility");

        setIcon(this.collapseBtn, this.isCalendarCollapsed ? "chevron-up" : "chevron-down");

        this.collapseBtn.addEventListener("click", () => {
            this.isCalendarCollapsed = !this.isCalendarCollapsed;
            this.containerEl.firstElementChild.classList.toggle("calendar-collapsed", this.isCalendarCollapsed);
        });

        // --- Calendar Rendering (Vertical or Horizontal) ---
        if (this.isVerticalView) {
            this.renderVerticalCalendar(container);
        } else {
            const tableWrapper = container.createDiv({ cls: "calendar-table-wrapper" });
            const table = tableWrapper.createEl("table", { cls: "period-calendar-table" });
            this.attachSwipeListeners(tableWrapper, headerDiv);
            const thead = table.createEl('thead');
            // Use 'this.' to store the header row so we can access it later
            this.calendarHeaderRowEl = thead.createEl('tr');

            if (this.plugin.settings.showPWColumn) {
                this.calendarHeaderRowEl.createEl('th', { text: '' });
            }
            if (this.plugin.settings.showWeekNumbers) {
                this.calendarHeaderRowEl.createEl('th', { text: this.plugin.settings.weekNumberColumnLabel });
            }

            const startDayOffset = this.plugin.settings.weekStartDay === 'monday' ? 1 : 0;
            for (let d = 0; d < 7; d++) {
                const dayIndex = (d + startDayOffset) % 7;
                // Note: The highlighting logic has been completely removed from this loop
                this.calendarHeaderRowEl.createEl('th', { text: moment().day(dayIndex).format('ddd').toUpperCase() });
            }

            // ... the next line in your code should be this.calendarBodyEl = table.createEl("tbody");
            this.calendarBodyEl = table.createEl("tbody");
            this.renderCalendar();
            this.addColumnHighlighting(this.calendarHeaderRowEl, this.calendarBodyEl);

            // Add this line right here to set the highlight correctly on the first load
            this.updateDayHeaderHighlight();


            // --- Tabs and Content Panels ---
            const tabWrapper = container.createDiv("tabs-content-wrapper");
            const areTabsVisible = Object.values(this.plugin.settings.tabVisibility).some(visible => visible);
            if (!areTabsVisible) {
                tabWrapper.style.display = 'none';
            } else {
                container.addClass("tabs-are-visible");
            }

            const tabHeader = tabWrapper.createDiv("note-tab-header");
            const tabContainer = tabHeader.createDiv("tab-container");
            const searchWrapper = tabHeader.createDiv("search-wrapper");

            const scratchpadSearchContainer = searchWrapper.createDiv({ cls: "pm-search-container" });
            const notesSearchContainer = searchWrapper.createDiv({ cls: "pm-search-container" });
            const assetsSearchContainer = searchWrapper.createDiv({ cls: "pm-search-container" });
            const tasksSearchContainer = searchWrapper.createDiv({ cls: "pm-search-container" });

            // -- CONTENT PANELS --
            this.scratchWrapperEl = tabWrapper.createDiv({ cls: "scratchpad-wrapper" });
            this.renderScratchpadContent();

            this.notesContentEl = tabWrapper.createDiv({ cls: "notes-container" });
            this.assetsContentEl = tabWrapper.createDiv({ cls: "notes-container" });
            this.tasksContentEl = tabWrapper.createDiv({ cls: "tasks-container" });

            this.taskRefreshIndicator = tabWrapper.createDiv({ cls: 'pm-refresh-indicator' });
            setIcon(this.taskRefreshIndicator, 'arrow-down');

            // Function to handle switching between tabs.
            const switchTabs = (tab) => {
                this.activeTab = tab;
                Object.values(tabElements).forEach(el => el.removeClass("active"));
                if (tabElements[tab]) tabElements[tab].addClass("active");

                // Toggle visibility of content panels and their corresponding search bars.
                this.scratchWrapperEl.style.display = (tab === "scratch") ? "grid" : "none";
                this.notesContentEl.style.display = (tab === "notes") ? "block" : "none";
                this.assetsContentEl.style.display = (tab === "assets") ? "" : "none";
                this.tasksContentEl.style.display = (tab === "tasks") ? "block" : "none";

                scratchpadSearchContainer.style.display = (tab === "scratch") ? "flex" : "none";
                notesSearchContainer.style.display = (tab === "notes") ? "flex" : "none";
                assetsSearchContainer.style.display = (tab === "assets") ? "flex" : "none";
                tasksSearchContainer.style.display = (tab === "tasks") ? "flex" : "none";

                // Populate the content of the newly activated tab.
                if (tab === "notes") this.populateNotes();
                if (tab === "assets") this.populateAssets();
                if (tab === "tasks") this.populateTasks();
            };

            const tabElements = this.setupDraggableTabs(tabContainer, switchTabs);

            // -- SEARCH LOGIC --
            this.scratchpadSearchInputEl = this.setupSearchInput(scratchpadSearchContainer, "Search ScratchPad...", (term) => {
                this.scratchpadSearchTerm = term;
                this.updateScratchpadHighlights();
            });

            // This is a logic bug from the original code; this needs to be inside the "else" block of the preview mode
            if (!this.isScratchpadPreview) {
                this.noteTextarea.value = this.noteText;
                this.noteTextarea.addEventListener("input", async () => {
                    this.noteText = this.noteTextarea.value;
                    await this.saveFixedNote(this.noteText);
                    this.updateScratchpadHighlights();
                });

                this.noteTextarea.addEventListener('scroll', () => {
                    if (this.scratchHighlighterEl) {
                        this.scratchHighlighterEl.scrollTop = this.noteTextarea.scrollTop;
                        this.scratchHighlighterEl.scrollLeft = this.noteTextarea.scrollLeft;
                    }
                });
            }

            const notesPlaceholder = this.notesViewMode === 'pinned' ? 'Filter notes...' : 'Filter notes...';
            this.notesSearchInputEl = this.setupSearchInput(notesSearchContainer, notesPlaceholder, (term) => {
                this.notesSearchTerm = term;
                this.populateNotes();
            });

            this.assetsSearchInputEl = this.setupSearchInput(assetsSearchContainer, "Filter assets...", (term) => {
                this.assetsSearchTerm = term;
                this.populateAssets();
            });

            this.tasksSearchInputEl = this.setupSearchInput(tasksSearchContainer, "Filter tasks...", (term) => {
                this.tasksSearchTerm = term;
                this.populateTasks();
            });

            this.updateScratchpadSearchCount();
            switchTabs(this.activeTab);
        }

    }

    /**
     * Finds and highlights the next or previous occurrence of the search term in the scratchpad textarea.
     * @param {'next' | 'prev'} direction The direction to search.
     */
    highlightInScratchpad(direction = 'next') {
        this.noteTextarea.focus();
        const text = this.noteTextarea.value;
        const term = this.scratchpadSearchTerm;
        if (!term) return;

        const lowerText = text.toLowerCase();
        const lowerTerm = term.toLowerCase();
        let matchIndex = -1;

        if (direction === 'next') {
            const searchFrom = this.noteTextarea.selectionEnd;
            matchIndex = lowerText.indexOf(lowerTerm, searchFrom);
            if (matchIndex === -1) { // Wrap around to the start if no match is found.
                matchIndex = lowerText.indexOf(lowerTerm);
            }
        } else { // 'prev'
            const searchFrom = this.noteTextarea.selectionStart > 0 ? this.noteTextarea.selectionStart - 1 : text.length;
            matchIndex = lowerText.lastIndexOf(lowerTerm, searchFrom);
            if (matchIndex === -1) { // Wrap around to the end.
                matchIndex = lowerText.lastIndexOf(lowerTerm);
            }
        }

        if (matchIndex !== -1) {
            // Select the found text and scroll it into view.
            this.noteTextarea.setSelectionRange(matchIndex, matchIndex + term.length);
            const lineHeight = parseFloat(getComputedStyle(this.noteTextarea).lineHeight);
            const lines = text.substring(0, matchIndex).split('\n').length;
            this.noteTextarea.scrollTop = (lines - 1) * lineHeight;
        } else {
            new Notice("No matches found");
        }
    }

    /**
     * Helper to re-render just the calendar grid.
     */
    renderCalendar() {
        if (this.calendarBodyEl) {
            this.calendarBodyEl.empty();
            this.generateMonthGrid(this.displayedMonth, this.calendarBodyEl);
        }
    }

    /**
     * Shows a popup listing all notes, tasks, and assets associated with a specific day.
     * @param {HTMLElement} targetEl The calendar day element to position the popup near.
     * @param {object} dataByType An object containing arrays of items to display, keyed by type.
     * @param {Date} date The date for which the popup is being shown.
     */
    showFilePopup(targetEl, dataByType, date) {
        this.hideFilePopup();
        this.popupEl = createDiv({ cls: 'other-notes-popup' });
        const { settings } = this.plugin;

        // Add header with a close button and dynamic date title
        const headerRow = this.popupEl.createDiv({ cls: 'popup-header' });
        const formattedDate = moment(date).format("dddd, D MMMM YYYY");
        headerRow.createDiv({ cls: 'popup-header-title', text: formattedDate });
        const closeBtn = headerRow.createDiv({ cls: 'popup-close-btn' });
        setIcon(closeBtn, 'x');
        // Make the entire header row clickable to close the popup
        headerRow.addEventListener('click', () => this.hideFilePopup());

        // Create a scrollable wrapper for the content
        const contentWrapper = this.popupEl.createDiv({ cls: 'popup-content-wrapper' });

        if (dataByType.ics && dataByType.ics.length > 0) {
            contentWrapper.createEl('h6', { text: "Calendar Events", cls: "popup-section-header" });

            dataByType.ics.forEach(event => {
                const itemEl = contentWrapper.createDiv({ cls: "other-notes-popup-item" });

                // Add an icon for visual distinction
                const iconEl = itemEl.createDiv({ cls: 'note-icon' });
                setIcon(iconEl, 'calendar');

                const titleWrapper = itemEl.createDiv({ cls: 'note-title-wrapper' });
                titleWrapper.createDiv({ cls: 'note-title' }).setText(event.summary);

                // If the event is NOT all-day, add a sub-line with the time
                if (!event.isAllDay && event.startTime && event.endTime) {
                    const timeString = `${event.startTime} - ${event.endTime}`;
                    titleWrapper.createDiv({ text: timeString, cls: 'note-path' }); // Re-use 'note-path' for styled sub-text
                }
            });

            // Add a separator if other content follows
            const hasOtherContent = (dataByType.tasks && dataByType.tasks.length > 0) || (dataByType.daily && dataByType.daily.length > 0);
            if (hasOtherContent) {
                contentWrapper.createDiv({ cls: "popup-separator" });
            }
        }

        const addFileToList = (container, file, type) => {
            const itemEl = container.createDiv({ cls: 'other-notes-popup-item' });
            if (type === 'asset' && this.isImageAsset(file)) {
                const thumbnail = itemEl.createEl('img', { cls: 'popup-asset-thumbnail' });
                thumbnail.src = this.app.vault.getResourcePath(file);
            } else {
                const dot = itemEl.createDiv({ cls: 'popup-file-dot' });
                if (type === 'daily') dot.style.backgroundColor = settings.dailyNoteDotColor;
                else if (type === 'created') dot.style.backgroundColor = settings.otherNoteDotColor;
                else if (type === 'modified') dot.style.backgroundColor = settings.calendarModifiedDotColor;
                else if (type === 'asset') dot.style.backgroundColor = settings.assetDotColor;
            }
            const titlePathWrapper = itemEl.createDiv({ cls: 'note-title-path-wrapper' });
            const displayName = file.path.toLowerCase().endsWith('.md') ? file.basename : file.name;
            titlePathWrapper.createDiv({ text: displayName, cls: "note-title" });
            if (file.parent && file.parent.path !== '/') {
                titlePathWrapper.createDiv({ text: file.parent.path, cls: 'note-path' });
            }
            itemEl.addEventListener('click', () => {
                this.app.workspace.openLinkText(file.path, "", settings.notesOpenAction === 'new-tab');
                this.hideFilePopup();
            });
        };

        const addTaskToList = (container, task) => {
            const itemEl = container.createDiv({ cls: 'other-notes-popup-item' });
            itemEl.dataset.taskStatus = task.status;
            const checkbox = itemEl.createDiv({ cls: 'task-checkbox-symbol' });
            this._renderTaskSymbol(checkbox, task);
            checkbox.addEventListener('click', async (e) => {
                e.stopPropagation();
                await this.toggleTaskCompletion(task);
                task.status = (task.status.toLowerCase() === 'x') ? ' ' : 'x';
                this._renderTaskSymbol(checkbox, task);
                await this.buildTasksByDateMap();
                this.renderCalendar();
            });
            const textSpan = itemEl.createSpan({ cls: 'task-text' });
            MarkdownRenderer.render(this.app, task.text, textSpan, task.file.path, this);
            itemEl.addEventListener('click', () => {
                this.app.workspace.openLinkText(task.file.path, '', false, { eState: { line: task.lineNumber } });
                this.hideFilePopup();
            });
        };

        const allFiles = [...(dataByType.daily || []), ...(dataByType.created || []), ...(dataByType.modified || []), ...(dataByType.assets || [])];
        const hasTasks = dataByType.tasks && dataByType.tasks.length > 0;
        const hasFiles = allFiles.length > 0;

        if (hasTasks) {
            contentWrapper.createEl('h6', { text: 'Tasks', cls: 'popup-section-header' });
            dataByType.tasks.forEach(task => addTaskToList(contentWrapper, task));
        }
        if (hasTasks && hasFiles) {
            contentWrapper.createDiv({ cls: 'popup-separator' });
        }
        if (hasFiles) {
            contentWrapper.createEl('h6', { text: 'Notes & Assets', cls: 'popup-section-header' });
            (dataByType.daily || []).forEach(file => addFileToList(contentWrapper, file, 'daily'));
            (dataByType.created || []).forEach(file => addFileToList(contentWrapper, file, 'created'));
            (dataByType.modified || []).forEach(file => addFileToList(contentWrapper, file, 'modified'));
            (dataByType.assets || []).forEach(file => addFileToList(contentWrapper, file, 'asset'));
        }

        if (!contentWrapper.hasChildNodes()) {
            this.hideFilePopup();
            return;
        }

        this.popupEl.addEventListener('mouseenter', () => clearTimeout(this.hideTimeout));
        this.popupEl.addEventListener('mouseleave', () => {
            this.hideTimeout = setTimeout(() => this.hideFilePopup(), this.plugin.settings.popupHideDelay);
        });

        document.body.appendChild(this.popupEl);

        const popupRect = this.popupEl.getBoundingClientRect();
        const targetRect = targetEl.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const margin = this.plugin.settings.popupGap;
        let finalTop = targetRect.bottom + margin;
        if (finalTop + popupRect.height > viewportHeight) finalTop = targetRect.top - popupRect.height - margin;
        if (finalTop < margin) finalTop = margin;
        let finalLeft = targetRect.left;
        if (finalLeft + popupRect.width > viewportWidth - margin) finalLeft = targetRect.right - popupRect.width;
        if (finalLeft < margin) finalLeft = margin;
        this.popupEl.style.top = `${finalTop}px`;
        this.popupEl.style.left = `${finalLeft}px`;
        this.popupEl.style.visibility = 'visible';
    }

    /**
     * Hides and destroys the file popup element.
     */
    hideFilePopup() {
        clearTimeout(this.hoverTimeout);
        clearTimeout(this.hideTimeout);
        if (this.popupEl) {
            this.popupEl.remove();
            this.popupEl = null;
            this.taskRefreshDebounceTimer = null;
            this.taskCache = new Map();
        }
    }

    updateMonthTitle() { if (this.monthNameEl) this.monthNameEl.textContent = formatMonthTitle(this.displayedMonth, this.plugin.settings.monthTitleFormat); }
    changeMonth(offset, toToday = false) {
        if (toToday) {
            this.displayedMonth = new Date();
        } else {
            this.displayedMonth.setMonth(this.displayedMonth.getMonth() + offset, 1);
        }

        this.updateMonthTitle();
        this.renderCalendar();
        this.updateTodayBtnAriaLabel();

        this.updateDayHeaderHighlight();
    }

    updateTodayBtnAriaLabel() {
        if (!this.todayBtn) return;

        const now = new Date();
        const isCurrentMonth = this.displayedMonth.getFullYear() === now.getFullYear() && this.displayedMonth.getMonth() === now.getMonth();

        if (this.isPopupLocked) {
            // If popups are locked (accent on), the only action is to enable them.
            this.todayBtn.setAttribute('aria-label', 'Tap to enable calendar popups');
        } else {
            // If popups are unlocked (accent off)...
            if (isCurrentMonth) {
                // ...and we're on the current month, the next action is to disable them.
                this.todayBtn.setAttribute('aria-label', 'Tap to disable calendar popups');
            } else {
                // ...and we're on a different month, the action is to navigate.
                this.todayBtn.setAttribute('aria-label', 'Go to today');
            }
        }
    }

    /**
     * Adds keyboard event listeners to a row element for list navigation.
     * @param {HTMLElement} row The row element (e.g., a `.note-row` or `.task-row`).
     * @param {HTMLInputElement} searchInputEl The search input associated with the list.
     */
    addKeydownListeners(row, searchInputEl) {
        row.setAttribute('tabindex', -1); // Make the row focusable.
        row.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                row.click();
                return;
            }

            if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') return;

            e.preventDefault();

            const container = row.closest('.notes-container, .tasks-container');
            if (!container) return;

            const items = Array.from(container.querySelectorAll('.note-row, .task-row'));
            const currentIndex = items.indexOf(row);

            let nextIndex = e.key === 'ArrowDown' ? currentIndex + 1 : currentIndex - 1;

            if (nextIndex >= 0 && nextIndex < items.length) {
                items[nextIndex].focus();
            } else if (e.key === 'ArrowUp' && searchInputEl) {
                // If at the top of the list, focus the search input.
                searchInputEl.focus();
            }
        });
    }

    /**
     * Populates the "Notes" tab with either recent or pinned notes.
     */
    async populateNotes() {
        if (!this.notesContentEl) return;
        this.notesContentEl.empty();

        const settings = this.plugin.settings;
        let notesToShow;

        // --- 1. FILTER AND SORT NOTES ---
        if (this.notesViewMode === 'pinned') {
            const pinValue = settings.pinTag.toLowerCase();
            notesToShow = this.app.vault.getMarkdownFiles().filter(file => {
                const cache = this.app.metadataCache.getFileCache(file);
                if (!cache) return false;

                if (cache.tags?.some(tag => tag.tag.toLowerCase().includes(pinValue))) {
                    return true;
                }

                const frontmatter = cache.frontmatter;
                if (frontmatter) {
                    for (const key in frontmatter) {
                        const value = frontmatter[key];
                        if (typeof value === 'string' && value.toLowerCase().includes(pinValue)) {
                            return true;
                        }
                        if (Array.isArray(value) && value.some(item => typeof item === 'string' && item.toLowerCase().includes(pinValue))) {
                            return true;
                        }
                    }
                }
                return false;
            });

            if (this.pinnedSortOrder === 'z-a') {
                notesToShow.sort((a, b) => b.basename.localeCompare(a.basename));
            } else if (this.pinnedSortOrder === 'custom') {
                const customOrder = settings.pinnedNotesCustomOrder;
                // This robust sort handles new items not yet in the custom order array.
                notesToShow.sort((a, b) => {
                    const indexA = customOrder.indexOf(a.path);
                    const indexB = customOrder.indexOf(b.path);

                    // If both items are in the custom order, sort by their position.
                    if (indexA !== -1 && indexB !== -1) {
                        return indexA - indexB;
                    }
                    // If only A is in the order, it comes first.
                    if (indexA !== -1) {
                        return -1;
                    }
                    // If only B is in the order, it comes first.
                    if (indexB !== -1) {
                        return 1;
                    }
                    // If neither is in the order (e.g., new pinned notes), sort them alphabetically.
                    return a.basename.localeCompare(b.basename);
                });
            } else { // a-z
                notesToShow.sort((a, b) => a.basename.localeCompare(b.basename));
            }
        } else { // recent notes mode
            const cutoff = moment().subtract(settings.notesLookbackDays, 'days').valueOf();
            notesToShow = this.app.vault.getMarkdownFiles()
                .filter(file => !settings.ignoreFolders.some(f => file.path.startsWith(f)) && (file.stat.mtime >= cutoff || file.stat.ctime >= cutoff))
                .sort((a, b) => b.stat.mtime - a.stat.mtime);
        }

        // --- 2. APPLY SEARCH TERM ---
        const searchTerm = this.notesSearchTerm.toLowerCase();
        const filteredNotes = searchTerm ?
            notesToShow.filter(file => file.basename.toLowerCase().includes(searchTerm)) :
            notesToShow;

        if (filteredNotes.length === 0) {
            const message = this.notesViewMode === 'pinned' ? 'No pinned notes found.' : 'No recent notes found.';
            this.notesContentEl.createDiv({ text: message, cls: 'task-group-empty-message' });
            return;
        }

        // --- 3. RENDER THE VIEW ---
        if (this.notesViewMode === 'pinned') {
            const groupContainer = this.notesContentEl.createDiv({ cls: 'note-group-container' });
            const header = groupContainer.createDiv({ cls: 'note-group-header' });
            const headerContent = header.createDiv({ cls: 'note-group-header-content', attr: { 'aria-live': 'polite' } });
            setIcon(headerContent, settings.tabIcons.pinned || 'pin');
            headerContent.createSpan({ text: 'Pinned Notes' });

            const sortIndicator = headerContent.createSpan({ cls: 'pinned-sort-indicator' });
            const updateSortVisuals = () => {
                if (this.pinnedSortOrder === 'z-a') {
                    sortIndicator.setText('Z-A');
                    headerContent.setAttribute('aria-label', 'Current sort: Z-A. Click for Custom sort.');
                } else if (this.pinnedSortOrder === 'custom') {
                    sortIndicator.setText('Custom');
                    headerContent.setAttribute('aria-label', 'Current sort: Custom. Click for A-Z sort.');
                } else { // a-z
                    sortIndicator.setText('A-Z');
                    headerContent.setAttribute('aria-label', 'Current sort: A-Z. Click for Z-A sort.');
                }
            };
            updateSortVisuals();

            headerContent.addEventListener('click', () => {
                if (this.pinnedSortOrder === 'a-z') this.pinnedSortOrder = 'z-a';
                else if (this.pinnedSortOrder === 'z-a') this.pinnedSortOrder = 'custom';
                else this.pinnedSortOrder = 'a-z';
                this.populateNotes(); // Re-render
            });

            header.createDiv({ cls: 'note-group-count', text: filteredNotes.length.toString() });

            const listWrapper = groupContainer.createDiv({ cls: 'note-list-wrapper' });

            // MODIFICATION START: Add a single robust drop handler to the container
            listWrapper.addEventListener('drop', async (e) => {
                e.preventDefault();
                await this.savePinnedOrder(listWrapper);
            });
            // MODIFICATION END

            filteredNotes.forEach(file => {
                this.renderNoteItem(file, listWrapper);
            });

        } else { // Your original rendering logic for recent notes
            const groups = { today: [], yesterday: [], thisWeek: [], lastWeek: [], thisMonth: [], older: [] };
            const now = moment();

            filteredNotes.forEach(file => {
                const modTime = moment(file.stat.mtime);
                if (modTime.isSame(now, 'day')) groups.today.push(file);
                else if (modTime.isSame(now.clone().subtract(1, 'day'), 'day')) groups.yesterday.push(file);
                else if (modTime.isSame(now, 'week')) groups.thisWeek.push(file);
                else if (modTime.isSame(now.clone().subtract(1, 'week'), 'week')) groups.lastWeek.push(file);
                else if (modTime.isSame(now, 'month')) groups.thisMonth.push(file);
                else groups.older.push(file);
            });

            const groupOrder = [
                { key: 'today', label: 'Today' },
                { key: 'yesterday', label: 'Yesterday' },
                { key: 'thisWeek', label: 'This Week' },
                { key: 'lastWeek', label: 'Last Week' },
                { key: 'thisMonth', label: 'This Month' },
                { key: 'older', label: 'Older' },
            ];

            groupOrder.forEach(groupInfo => {
                const notesInGroup = groups[groupInfo.key];
                if (notesInGroup.length > 0) {
                    const groupContainer = this.notesContentEl.createDiv({ cls: 'note-group-container' });
                    const isCollapsed = this.collapsedNoteGroups[groupInfo.key];
                    if (isCollapsed) groupContainer.addClass('is-collapsed');

                    const header = groupContainer.createDiv({ cls: 'note-group-header' });
                    const headerContent = header.createDiv({ cls: 'note-group-header-content' });
                    const collapseIcon = headerContent.createDiv({ cls: 'note-group-collapse-icon' });
                    setIcon(collapseIcon, 'chevron-down');
                    headerContent.createSpan({ text: groupInfo.label });
                    header.createDiv({ cls: 'note-group-count', text: notesInGroup.length.toString() });

                    header.addEventListener('click', () => {
                        const currentlyCollapsed = groupContainer.classList.toggle('is-collapsed');
                        this.collapsedNoteGroups[groupInfo.key] = currentlyCollapsed;
                        this.plugin.saveSettings();
                    });

                    const listWrapper = groupContainer.createDiv({ cls: 'note-list-wrapper' });
                    notesInGroup.forEach(file => {
                        this.renderNoteItem(file, listWrapper);
                    });
                }
            });
        }
    }




    /**
     * Scans the vault for tasks, filters and sorts them, and populates the "Tasks" tab.
     */
    async populateTasks() {
        if (!this.tasksContentEl) return;

        const settings = this.plugin.settings;
        this.tasksContentEl.toggleClass('show-full-text', !settings.taskTextTruncate);

        if (this.taskCache) { this.taskCache.clear(); } else { this.taskCache = new Map(); }

        const taskIgnoreFolders = (settings.taskIgnoreFolders || []).map(f => f.toLowerCase().endsWith('/') ? f.toLowerCase() : f.toLowerCase() + '/');
        const files = this.app.vault.getMarkdownFiles().filter(file => {
            const filePathLower = file.path.toLowerCase();
            return !taskIgnoreFolders.some(folder => folder && filePathLower.startsWith(folder));
        });


        let allTasks = [];
        const taskRegex = /^\s*(?:-|\d+\.)\s*\[(.)\]\s*(.*)/;
        const dueDateRegex = /üìÖ\s*(\d{4}-\d{2}-\d{2})/;
        const completionDateRegex = /‚úÖ\s*(\d{4}-\d{2}-\d{2})/;
        const tagRegex = /#([a-zA-Z0-9_\-\/]+)/g;

        for (const file of files) {
            const content = await this.app.vault.cachedRead(file);
            const lines = content.split('\n');

            this.taskCache.set(file.path, this.extractTaskLines(content));

            lines.forEach((line, index) => {
                const match = line.match(taskRegex);
                if (match) {
                    const status = match[1];
                    const text = match[2];
                    const isCompleted = status.toLowerCase() === 'x';
                    const completionDateMatch = text.match(completionDateRegex);
                    const completionDate = completionDateMatch ? moment(completionDateMatch[1], "YYYY-MM-DD").toDate() : null;

                    if (isCompleted && !(settings.showCompletedTasksToday && completionDate && isSameDay(completionDate, new Date()))) {
                        return;
                    }

                    const dueDateMatch = text.match(dueDateRegex);
                    const dueDate = dueDateMatch ? moment(dueDateMatch[1], "YYYY-MM-DD").toDate() : null;
                    const tags = Array.from(text.matchAll(tagRegex)).map(m => m[1]);
                    let displayText = text.trim();
                    if (!isCompleted) {
                        displayText = displayText.replace(completionDateRegex, '').trim();
                    }
                    allTasks.push({ text: displayText, file, lineNumber: index, dueDate, tags, status, completionDate });
                }
            });
        }

        const searchTerm = this.tasksSearchTerm.toLowerCase();
        let filteredTasks = allTasks.filter(task => !searchTerm || task.text.toLowerCase().includes(searchTerm));

        filteredTasks.sort((a, b) => {
            if (settings.taskSortOrder === 'a-z') return a.text.localeCompare(b.text);
            if (settings.taskSortOrder === 'z-a') return b.text.localeCompare(a.text);
            if (a.dueDate && b.dueDate) return a.dueDate - b.dueDate;
            return a.dueDate ? -1 : (b.dueDate ? 1 : a.text.localeCompare(b.text));
        });

        // 2. MAP EXISTING DOM GROUPS
        const existingGroups = new Map();
        this.tasksContentEl.querySelectorAll('.task-group-container').forEach(groupEl => {
            if (groupEl.dataset.groupKey) {
                existingGroups.set(groupEl.dataset.groupKey, groupEl);
            }
        });

        // 3. GET NEW GROUP DATA
        const newGroupData = settings.taskGroupBy === 'tag'
            ? this.groupTasksByTag(filteredTasks)
            : this.groupTasksByDate(filteredTasks);

        const groupOrder = Object.keys(newGroupData);

        // 4. RECONCILE GROUPS
        let lastElement = null;
        groupOrder.forEach(groupKey => {
            const groupData = newGroupData[groupKey];
            let groupEl = existingGroups.get(groupKey);

            if (groupEl) {
                const headerContent = groupEl.querySelector('.task-group-header-content span:last-child');
                if (headerContent) headerContent.textContent = `${groupData.title} (${groupData.tasks.length})`;

                this.reconcileTaskList(groupEl.querySelector('.task-list-wrapper'), groupData.tasks);
                existingGroups.delete(groupKey);
            } else {
                groupEl = this.renderTaskGroup(groupKey, groupData);
            }

            if (lastElement) {
                lastElement.after(groupEl);
            } else {
                this.tasksContentEl.prepend(groupEl);
            }
            lastElement = groupEl;
        });

        // 5. REMOVE OLD GROUPS
        existingGroups.forEach(groupEl => groupEl.remove());

        if (this.tasksContentEl.children.length === 0) {
            // Clear any old message and add a new one
            this.tasksContentEl.empty();
            const message = searchTerm ? 'No tasks match your search term.' : 'No tasks found';
            this.tasksContentEl.createDiv({ text: message, cls: 'task-group-empty-message' });
        } else {
            // Remove any "no tasks" message if it exists
            const emptyMessage = this.tasksContentEl.querySelector('.task-group-empty-message');
            if (emptyMessage) emptyMessage.remove();
        }
    }


    // In your PeriodMonthView class
    getTaskKey(task) {
        return `${task.file.path}:${task.lineNumber}`;
    }

    updateTaskItem(taskRowEl, task) {
        if (taskRowEl.dataset.taskStatus !== task.status) {
            const checkbox = taskRowEl.querySelector('.task-checkbox-symbol');
            if (checkbox) {
                this._renderTaskSymbol(checkbox, task);
            }
            taskRowEl.dataset.taskStatus = task.status;
        }

        const textEl = taskRowEl.querySelector('.task-text');
        const existingText = textEl ? textEl.textContent : '';
        if (textEl && existingText !== task.text) {
            textEl.empty();
            MarkdownRenderer.render(this.app, task.text, textEl, task.file.path, this);
        }
    }

    groupTasksByDate(tasks) {
        const settings = this.plugin.settings;
        const now = moment().startOf('day');
        const groupsData = { overdue: [], today: [], tomorrow: [], next7days: [], future: [], noDate: [] };

        tasks.forEach(task => {
            if (!task.dueDate) { groupsData.noDate.push(task); return; }
            const due = moment(task.dueDate).startOf('day');
            if (due.isBefore(now)) groupsData.overdue.push(task);
            else if (due.isSame(now)) groupsData.today.push(task);
            else if (due.isSame(now.clone().add(1, 'day'))) groupsData.tomorrow.push(task);
            else if (due.isSameOrBefore(now.clone().add(7, 'days'))) groupsData.next7days.push(task);
            else groupsData.future.push(task);
        });

        const icons = settings.taskGroupIcons || DEFAULT_SETTINGS.taskGroupIcons;
        const groupOrder = [
            { key: 'overdue', title: 'Overdue', icon: icons.overdue, color: settings.taskGroupColorOverdue },
            { key: 'today', title: 'Today', icon: icons.today, color: settings.taskGroupColorToday },
            { key: 'tomorrow', title: 'Tomorrow', icon: icons.tomorrow, color: settings.taskGroupColorTomorrow },
            { key: 'next7days', title: 'Next 7 Days', icon: icons.next7days, color: settings.taskGroupColorNext7Days },
            { key: 'future', title: 'Future', icon: icons.future, color: settings.taskGroupColorFuture },
            { key: 'noDate', title: 'No Due Date', icon: icons.noDate, color: settings.taskGroupColorNoDate }
        ];

        const finalGroups = {};
        groupOrder.forEach(g => {
            if (settings.taskDateGroupsToShow.includes(g.key) || g.key === 'noDate') {
                if (groupsData[g.key].length > 0) {
                    finalGroups[g.key] = { ...g, tasks: groupsData[g.key] };
                }
            }
        });
        return finalGroups;
    }

    groupTasksByTag(tasks) {
        const settings = this.plugin.settings;
        const groupedByTag = tasks.reduce((acc, task) => {
            const tags = task.tags.length > 0 ? task.tags : ['#untagged'];
            tags.forEach(tag => {
                const key = tag.toLowerCase();
                if (!acc[key]) acc[key] = {
                    title: tag,
                    icon: settings.taskGroupIcons?.tag || 'tag',
                    color: settings.taskGroupColorTag,
                    tasks: []
                };
                acc[key].tasks.push(task);
            });
            return acc;
        }, {});

        // Sort groups alphabetically by tag name
        const sortedKeys = Object.keys(groupedByTag).sort((a, b) => a.localeCompare(b));
        const sortedGroups = {};
        for (const key of sortedKeys) {
            sortedGroups[key] = groupedByTag[key];
        }
        return sortedGroups;
    }

    renderTaskGroup(key, groupData) {
        const groupContainer = createDiv({ cls: 'task-group-container', attr: { style: `background-color: ${groupData.color}` } });
        groupContainer.dataset.groupKey = key;

        const isCollapsed = this.plugin.settings.collapsedTaskGroups[key];
        if (isCollapsed) groupContainer.addClass('is-collapsed');

        const header = groupContainer.createDiv({ cls: 'task-group-header' });

        header.addEventListener('click', () => {
            // Find the wrapper element for the list
            const taskListWrapper = groupContainer.querySelector('.task-list-wrapper');
            if (!taskListWrapper) return;

            // Check the current state
            const isCurrentlyCollapsed = groupContainer.classList.contains('is-collapsed');

            if (isCurrentlyCollapsed) {
                // --- EXPANDING ---
                // 1. Set the CSS variable to the element's full scroll height.
                //    This gives the 'height' property a specific value to animate *to*.
                const scrollHeight = taskListWrapper.scrollHeight;
                taskListWrapper.style.setProperty('--task-list-height', `${scrollHeight}px`);

                // 2. Remove the class to trigger the transition.
                groupContainer.classList.remove('is-collapsed');

                // After the animation, remove the explicit height to allow for dynamic content.
                setTimeout(() => {
                    taskListWrapper.style.removeProperty('--task-list-height');
                }, 350); // Match this to your CSS transition duration

            } else {
                // --- COLLAPSING ---
                // 1. Set the CSS variable to the element's current rendered height.
                //    This gives the 'height' property a specific value to animate *from*.
                const currentHeight = taskListWrapper.offsetHeight;
                taskListWrapper.style.setProperty('--task-list-height', `${currentHeight}px`);

                // This is a micro-delay to ensure the browser registers the starting height
                // before being told to transition to 0. This is the key to fixing the "instant collapse".
                requestAnimationFrame(() => {
                    // 2. Add the class to trigger the transition to height: 0.
                    groupContainer.classList.add('is-collapsed');
                });
            }

            // Update and save the state
            this.collapsedTaskGroups[key] = !isCurrentlyCollapsed;
            this.plugin.saveSettings();
        });
        /*
        header.addEventListener('click', () => {
            const currentlyCollapsed = groupContainer.classList.toggle('is-collapsed');
            this.plugin.settings.collapsedTaskGroups[key] = currentlyCollapsed;
            this.plugin.saveSettings();
        });
        */
        const headerContent = header.createSpan({ cls: 'task-group-header-content' });
        const iconEl = headerContent.createSpan({ cls: 'icon' });
        setIcon(iconEl, groupData.icon);
        headerContent.createSpan({ text: `${groupData.title} (${groupData.tasks.length})` });

        const collapseIcon = header.createSpan({ cls: 'task-group-collapse-icon' });
        setIcon(collapseIcon, 'chevron-down');

        const taskListWrapper = groupContainer.createDiv('task-list-wrapper');
        groupData.tasks.forEach(task => {
            const taskEl = this.renderTaskItem(task); // Use the modified renderTaskItem
            taskListWrapper.appendChild(taskEl);
        });

        return groupContainer;
    }

    reconcileTaskList(listWrapperEl, newTasks) {
        const existingTaskRows = new Map();
        listWrapperEl.querySelectorAll('.task-row').forEach(row => {
            if (row.dataset.key) {
                existingTaskRows.set(row.dataset.key, row);
            }
        });

        let lastElement = null;
        newTasks.forEach(task => {
            const taskKey = this.getTaskKey(task);
            let taskEl = existingTaskRows.get(taskKey);

            if (taskEl) {
                this.updateTaskItem(taskEl, task);
                existingTaskRows.delete(taskKey);
            } else {
                taskEl = this.renderTaskItem(task);
            }

            // Ensure the element is in the correct position
            if (lastElement) {
                lastElement.after(taskEl);
            } else {
                listWrapperEl.prepend(taskEl);
            }
            lastElement = taskEl;
        });

        existingTaskRows.forEach(row => row.remove());
    }


    renderTasksByTag(tasks, settings) { // Receives 'settings' as an argument
        // The duplicate declaration that caused the error has been removed.
        tasks = tasks.filter(task => {
            const isCompleted = task.status && task.status.toLowerCase() === 'x';
            if (!isCompleted) return true;
            return settings.showCompletedTasksToday && task.completionDate && isSameDay(task.completionDate, new Date());
        });

        const groupedByTag = tasks.reduce((acc, task) => {
            const tags = task.tags.length > 0 ? task.tags : ['#untagged'];
            tags.forEach(tag => {
                if (!acc[tag]) acc[tag] = [];
                acc[tag].push(task);
            });
            return acc;
        }, {});

        Object.keys(groupedByTag).sort().forEach(tag => {
            const tasksInGroup = groupedByTag[tag];

            const groupContainer = this.tasksContentEl.createDiv({ cls: 'task-group-container', attr: { style: `background-color: ${settings.taskGroupColorTag}` } });

            const isCollapsed = this.collapsedTaskGroups[tag];
            if (isCollapsed) groupContainer.addClass('is-collapsed');

            const header = groupContainer.createDiv({ cls: 'task-group-header' });

            header.addEventListener('click', () => {
                // Find the wrapper element for the list
                const taskListWrapper = groupContainer.querySelector('.task-list-wrapper');
                if (!taskListWrapper) return;

                // Check the current state
                const isCurrentlyCollapsed = groupContainer.classList.contains('is-collapsed');

                if (isCurrentlyCollapsed) {
                    // --- EXPANDING ---
                    // 1. Set the CSS variable to the element's full scroll height.
                    //    This gives the 'height' property a specific value to animate *to*.
                    const scrollHeight = taskListWrapper.scrollHeight;
                    taskListWrapper.style.setProperty('--task-list-height', `${scrollHeight}px`);

                    // 2. Remove the class to trigger the transition.
                    groupContainer.classList.remove('is-collapsed');

                    // After the animation, remove the explicit height to allow for dynamic content.
                    setTimeout(() => {
                        taskListWrapper.style.removeProperty('--task-list-height');
                    }, 350); // Match this to your CSS transition duration

                } else {
                    // --- COLLAPSING ---
                    // 1. Set the CSS variable to the element's current rendered height.
                    //    This gives the 'height' property a specific value to animate *from*.
                    const currentHeight = taskListWrapper.offsetHeight;
                    taskListWrapper.style.setProperty('--task-list-height', `${currentHeight}px`);

                    // This is a micro-delay to ensure the browser registers the starting height
                    // before being told to transition to 0. This is the key to fixing the "instant collapse".
                    requestAnimationFrame(() => {
                        // 2. Add the class to trigger the transition to height: 0.
                        groupContainer.classList.add('is-collapsed');
                    });
                }

                // Update and save the state
                this.collapsedTaskGroups[tag] = !isCurrentlyCollapsed;
                this.plugin.saveSettings();
            });
            /*
            header.addEventListener('click', () => {
                const currentlyCollapsed = groupContainer.classList.toggle('is-collapsed');
                this.collapsedTaskGroups[tag] = currentlyCollapsed;
                this.plugin.saveSettings();
            });
            */

            const headerContent = header.createSpan({ cls: 'task-group-header-content' });
            const tagIconName = settings.taskGroupIcons?.tag || 'tag';
            const iconEl = headerContent.createSpan({ cls: 'icon' });
            setIcon(iconEl, tagIconName);
            headerContent.createSpan({ text: `${tag} (${tasksInGroup.length})` });

            const collapseIcon = header.createSpan({ cls: 'task-group-collapse-icon' });
            setIcon(collapseIcon, 'chevron-down');

            const taskListWrapper = groupContainer.createDiv('task-list-wrapper');

            if (tasksInGroup.length > 0) {
                tasksInGroup.forEach(task => this.renderTaskItem(task, taskListWrapper));
            } else {
                taskListWrapper.createDiv({ text: 'No tasks with this tag.', cls: 'task-group-empty-message' });
                groupContainer.addClass('is-collapsed');
                taskListWrapper.style.display = 'none';
            }
        });

        if (tasks.length === 0) this.tasksContentEl.createDiv({ text: 'No tasks found', cls: 'task-group-empty-message' });
    }

    renderTasksByDate(tasks, settings) { // Receives 'settings' as an argument
        // The duplicate declaration that caused the error has been removed.
        const now = moment().startOf('day');
        let groups = { overdue: [], today: [], tomorrow: [], next7days: [], future: [], noDate: [] };

        tasks.forEach(task => {
            if (!task.dueDate) {
                groups.noDate.push(task);
                return;
            }
            const due = moment(task.dueDate).startOf('day');
            if (due.isBefore(now)) groups.overdue.push(task);
            else if (due.isSame(now)) groups.today.push(task);
            else if (due.isSame(now.clone().add(1, 'day'))) groups.tomorrow.push(task);
            else if (due.isSameOrBefore(now.clone().add(7, 'days'))) groups.next7days.push(task);
            else groups.future.push(task);
        });

        for (const groupKey in groups) {
            groups[groupKey] = groups[groupKey].filter(task => {
                const isCompleted = task.status && task.status.toLowerCase() === 'x';
                if (!isCompleted) return true;
                return settings.showCompletedTasksToday && task.completionDate && isSameDay(task.completionDate, new Date());
            });
        }

        const icons = settings.taskGroupIcons || DEFAULT_SETTINGS.taskGroupIcons;
        const groupOrder = [
            { key: 'overdue', title: 'Overdue', icon: icons.overdue, color: settings.taskGroupColorOverdue },
            { key: 'today', title: 'Today', icon: icons.today, color: settings.taskGroupColorToday },
            { key: 'tomorrow', title: 'Tomorrow', icon: icons.tomorrow, color: settings.taskGroupColorTomorrow },
            { key: 'next7days', title: 'Next 7 Days', icon: icons.next7days, color: settings.taskGroupColorNext7Days },
            { key: 'future', title: 'Future', icon: icons.future, color: settings.taskGroupColorFuture },
            { key: 'noDate', title: 'No Due Date', icon: icons.noDate, color: settings.taskGroupColorNoDate }
        ];

        let totalTasksRendered = 0;
        groupOrder.forEach(g => {
            if (settings.taskDateGroupsToShow.includes(g.key) || g.key === 'noDate') {
                const tasksInGroup = groups[g.key];
                totalTasksRendered += tasksInGroup.length;

                const groupContainer = this.tasksContentEl.createDiv({ cls: 'task-group-container', attr: { style: `background-color: ${g.color}` } });

                const isCollapsed = this.collapsedTaskGroups[g.key];
                if (isCollapsed) groupContainer.addClass('is-collapsed');

                const header = groupContainer.createDiv({ cls: 'task-group-header' });

                header.addEventListener('click', () => {
                    // Find the wrapper element for the list
                    const taskListWrapper = groupContainer.querySelector('.task-list-wrapper');
                    if (!taskListWrapper) return;

                    // Check the current state
                    const isCurrentlyCollapsed = groupContainer.classList.contains('is-collapsed');

                    if (isCurrentlyCollapsed) {
                        // --- EXPANDING ---
                        // 1. Set the CSS variable to the element's full scroll height.
                        //    This gives the 'height' property a specific value to animate *to*.
                        const scrollHeight = taskListWrapper.scrollHeight;
                        taskListWrapper.style.setProperty('--task-list-height', `${scrollHeight}px`);

                        // 2. Remove the class to trigger the transition.
                        groupContainer.classList.remove('is-collapsed');

                        // After the animation, remove the explicit height to allow for dynamic content.
                        setTimeout(() => {
                            taskListWrapper.style.removeProperty('--task-list-height');
                        }, 350); // Match this to your CSS transition duration

                    } else {
                        // --- COLLAPSING ---
                        // 1. Set the CSS variable to the element's current rendered height.
                        //    This gives the 'height' property a specific value to animate *from*.
                        const currentHeight = taskListWrapper.offsetHeight;
                        taskListWrapper.style.setProperty('--task-list-height', `${currentHeight}px`);

                        // This is a micro-delay to ensure the browser registers the starting height
                        // before being told to transition to 0. This is the key to fixing the "instant collapse".
                        requestAnimationFrame(() => {
                            // 2. Add the class to trigger the transition to height: 0.
                            groupContainer.classList.add('is-collapsed');
                        });
                    }

                    // Update and save the state
                    this.collapsedTaskGroups[g.key] = !isCurrentlyCollapsed;
                    this.plugin.saveSettings();
                });
                /*
                header.addEventListener('click', () => {
                    const currentlyCollapsed = groupContainer.classList.toggle('is-collapsed');
                    this.collapsedTaskGroups[g.key] = currentlyCollapsed;
                    this.plugin.saveSettings();
                });
                */

                const headerContent = header.createSpan({ cls: 'task-group-header-content' });
                const iconEl = headerContent.createSpan({ cls: 'icon' });
                setIcon(iconEl, g.icon);
                headerContent.createSpan({ text: `${g.title} (${tasksInGroup.length})` });

                const collapseIcon = header.createSpan({ cls: 'task-group-collapse-icon' });
                setIcon(collapseIcon, 'chevron-down');

                const taskListWrapper = groupContainer.createDiv('task-list-wrapper');
                if (tasksInGroup.length > 0) {
                    tasksInGroup.forEach(task => this.renderTaskItem(task, taskListWrapper));
                } else {
                    taskListWrapper.createDiv({ text: `No ${g.title.toLowerCase()} tasks.`, cls: 'task-group-empty-message' });
                    groupContainer.addClass('is-collapsed');
                    taskListWrapper.style.display = 'none';
                }
            }
        });

        if (totalTasksRendered === 0 && this.tasksSearchTerm) {
            this.tasksContentEl.createDiv({ text: 'No tasks match your search term.', cls: 'task-group-empty-message' });
        }
    }

    /**
     * Renders a single task item row in a task group.
     * @param {object} task The task object.
     * @param {HTMLElement} container The parent container for the task row.
     */
    renderTaskItem(task) {
        const taskRow = createDiv({ cls: 'task-row' });
        taskRow.dataset.key = this.getTaskKey(task);
        taskRow.dataset.taskStatus = task.status;
        const searchInputEl = this.tasksSearchInputEl;

        const checkbox = taskRow.createDiv({ cls: 'task-checkbox-symbol' });
        this._renderTaskSymbol(checkbox, task);
        const textEl = taskRow.createSpan({ cls: 'task-text' });

        // On initial render, check if the task is already completed and apply the style.
        if (task.status.toLowerCase() === 'x') {
            textEl.classList.add('completed');
        }

        checkbox.addEventListener('click', async (e) => {
            e.stopPropagation();

            // Determine the state *before* the change is made
            const wasCompleted = task.status.toLowerCase() === 'x';

            // Modify the file. This also triggers the background file watcher
            // which will correctly refresh the entire task list after a short delay.
            await this.toggleTaskCompletion(task);

            // --- Provide Instant UI Feedback ---
            // We update the local task object and the DOM immediately so the user
            // sees the change without waiting for the file watcher to finish.

            if (wasCompleted) {
                // If it WAS completed, its new state is INCOMPLETE
                task.status = ' ';
                textEl.classList.remove('completed');
            } else {
                // If it was NOT completed, its new state is COMPLETE
                task.status = 'x';
                textEl.classList.add('completed');
            }

            // Finally, re-render the checkbox symbol itself using the new status
            this._renderTaskSymbol(checkbox, task);
        });

        MarkdownRenderer.render(this.app, task.text, textEl, task.file.path, this);

        taskRow.addEventListener('click', () => this.app.workspace.openLinkText(task.file.path, '', false, { eState: { line: task.lineNumber } }));
        this.addKeydownListeners(taskRow, searchInputEl);

        setTimeout(() => {
            if (this.plugin.settings.taskTextTruncate && textEl.scrollWidth > textEl.clientWidth) {
                const tooltipText = `Task: ${task.text}\n\nFile: ${task.file.path}\nDue: ${task.dueDate ? moment(task.dueDate).format('YYYY-MM-DD') : 'None'}\nTags: ${task.tags.length > 0 ? task.tags.map(t => '#' + t).join(' ') : 'None'}`;
                textEl.setAttribute('aria-label', tooltipText);
            }
        }, 0);

        return taskRow;
    }

    /**
     * Toggles the completion state of a task by modifying the source Markdown file.
     * @param {object} task The task object to toggle.
     */
    async toggleTaskCompletion(task) {
        const content = await this.app.vault.read(task.file);
        const lines = content.split('\n');
        let line = lines[task.lineNumber];

        const completionDateRegex = /\s*‚úÖ\s*\d{4}-\d{2}-\d{2}/;
        const today = moment().format("YYYY-MM-DD");
        const isCompleted = task.status.toLowerCase() === 'x';

        // Find the task marker [.] and replace the character inside
        const taskMarkerRegex = /\[.\]/;

        if (isCompleted) {
            // Mark as incomplete: [x] -> [ ] and remove completion date
            let newLine = line.replace(taskMarkerRegex, '[ ]');
            lines[task.lineNumber] = newLine.replace(completionDateRegex, '').trim();
        } else {
            // Mark as complete: [ ] or [/] or [-] -> [x] and add completion date
            let newLine = line.replace(taskMarkerRegex, '[x]');
            newLine = newLine.replace(completionDateRegex, ''); // Remove any old one first
            lines[task.lineNumber] = `${newLine} ‚úÖ ${today}`;
        }
        await this.app.vault.modify(task.file, lines.join('\n'));
    }

    /**
     * Updates an existing task row in the DOM with new data.
     * @param {HTMLElement} taskRowEl The .task-row element to update.
     * @param {object} task The new task object with updated data.
     */
    updateTaskItem(taskRowEl, task) {
        // Only update if the text content has changed
        const textEl = taskRowEl.querySelector('.task-text');

        // Only update if the status has changed
        if (taskRowEl.dataset.taskStatus !== task.status) {
            const checkbox = taskRowEl.querySelector('.task-checkbox-symbol');
            if (checkbox) {
                this._renderTaskSymbol(checkbox, task);
            }
            taskRowEl.dataset.taskStatus = task.status;

            if (textEl) {
                if (task.status.toLowerCase() === 'x') {
                    textEl.classList.add('completed');
                } else {
                    textEl.classList.remove('completed');
                }
            }
        }

        // A simple check to see if the rendered HTML might be different
        if (textEl && textEl.textContent !== task.text) {
            textEl.empty(); // Clear existing rendered markdown
            MarkdownRenderer.render(this.app, task.text, textEl, task.file.path, this);
        }
    }

    /**
     * Opens the scratchpad note in a new or current tab.
     */
    async openScratchpadFile() {
        const path = this.plugin.settings.fixedNoteFile;
        // First, try to find an already open leaf for this file.
        let targetLeaf = this.app.workspace.getLeavesOfType("markdown").find(leaf => leaf.view.file?.path === path);
        if (targetLeaf) { this.app.workspace.revealLeaf(targetLeaf); return; }

        let file = this.app.vault.getAbstractFileByPath(path);
        // If the file doesn't exist, create it.
        if (!file) file = await this.app.vault.create(path, "").catch(() => new Notice(`Failed to create scratchpad: ${path}`));

        if (file instanceof TFile) this.app.workspace.getLeaf(this.plugin.settings.scratchpadOpenAction === 'new-tab').openFile(file);
    }

    /**
     * Saves text content to the scratchpad note file.
     * @param {string} text The text to save.
     */
    async saveFixedNote(text) {
        const path = this.plugin.settings.fixedNoteFile;
        const folderPath = path.substring(0, path.lastIndexOf("/"));
        // Create parent folder if it doesn't exist.
        if (folderPath && !this.app.vault.getAbstractFileByPath(folderPath)) {
            await this.app.vault.createFolder(folderPath).catch(err => console.error("Error creating folder:", err));
        }
        let file = this.app.vault.getAbstractFileByPath(path);
        if (!file) await this.app.vault.create(path, text);
        else if (file instanceof TFile) await this.app.vault.modify(file, text);
    }

    /**
     * Loads the content of the scratchpad note file.
     * @returns {Promise<string>} The content of the note, or an empty string if it doesn't exist.
     */
    async loadNote() {
        const path = this.plugin.settings.fixedNoteFile;
        const file = this.app.vault.getAbstractFileByPath(path);
        if (file instanceof TFile) return await this.app.vault.read(file);
        return "";
    }

    /**
     * Opens a daily note for a given date, creating it from a template if it doesn't exist.
     * @param {Date} date The date for the daily note.
     */
    async openDailyNote(date) {
        const {
            dailyNotesFolder,
            dailyNoteDateFormat,
            dailyNoteTemplatePath,
            dailyNoteOpenAction
        } = this.plugin.settings;
        const filename = formatDate(date, dailyNoteDateFormat);
        const path = dailyNotesFolder ? `${dailyNotesFolder}/${filename}.md` : `${filename}.md`;

        let file = this.app.vault.getAbstractFileByPath(path);
        if (file) {
            // File already exists, just open it
            const leaf = this.app.workspace.getLeaf(dailyNoteOpenAction === 'new-tab');
            await leaf.openFile(file);
            return;
        }
        // --- File does NOT exist, proceed with creation ---

        // This inner function is now updated to handle Templater correctly
        const createNote = async (includeEvents = false) => {
            //console.log("--- Starting Daily Note Creation ---");
            //console.log(`Creating note with includeEvents: ${includeEvents}`);

            let templateContent = "";
            const templateFile = dailyNoteTemplatePath ? this.app.vault.getAbstractFileByPath(dailyNoteTemplatePath) : null;

            if (templateFile instanceof TFile) {
                templateContent = await this.app.vault.read(templateFile);
                //console.log("Successfully read template file.");
            } else {
                console.warn(`Template file not found at: ${dailyNoteTemplatePath}`);
            }

            // Create the note with the placeholder first
            const newFile = await this.app.vault.create(path, templateContent);
            //console.log(`Created new note at: ${newFile.path}`);

            // Open the note
            const leaf = this.app.workspace.getLeaf(dailyNoteOpenAction === "new-tab");
            await leaf.openFile(newFile);

            const placeholder = this.plugin.settings.calendarEventsPlaceholder || '%%CALENDAR_EVENTS%%';

            // If including events, proceed with injection
            if (includeEvents) {
                //console.log("Waiting for Templater to process...");
                await new Promise(resolve => setTimeout(resolve, 200)); // Delay
                //console.log("...resuming event injection.");

                // 1. Check for events in the map
                const dateKey = moment(date).format("YYYY-MM-DD");
                const eventsForDay = this.icsEventsByDate.get(dateKey);
                //console.log(`Date Key: ${dateKey}`);
                //console.log("Events found for this key:", eventsForDay);

                if (eventsForDay && eventsForDay.length > 0) {
                    // 2. Format the events into a string
                    const eventContent = this.formatEventsForTemplate(eventsForDay) || "";
                    //console.log("Formatted Event Content:\n", eventContent);

                    // 3. Read the file *after* Templater has run
                    let currentContent = await this.app.vault.read(newFile);
                    //console.log(`File content before injection contains placeholder: ${currentContent.includes("%%CALENDAR_EVENTS%%")}`);


                    // 4. Replace placeholder and save
                    if (currentContent.includes(placeholder)) {
                        const finalContent = currentContent.replace(placeholder, eventContent);
                        await this.app.vault.modify(newFile, finalContent);
                        //console.log("Successfully injected events and saved the file.");
                    } else {
                        console.error(`Placeholder "${placeholder}" not found in the note after creation. Templater might be removing it.`);
                    }
                } else {
                    console.warn("No events found for this date, so nothing to inject.");
                }
            }
            // Logic for removing placeholder when includeEvents is false can be added here if needed
            else {
                //console.log("Cleaning up placeholder...");
                await new Promise(resolve => setTimeout(resolve, 200));
                let currentContent = await this.app.vault.read(newFile);
                if (currentContent.includes(placeholder)) {
                    const finalContent = currentContent.replace(placeholder, "").trim();
                    await this.app.vault.modify(newFile, finalContent);
                    //console.log("Placeholder removed.");
                }
            }

            //console.log("--- Daily Note Creation Finished ---");
        };

        const hasTemplate = !!dailyNoteTemplatePath && dailyNoteTemplatePath.length > 0;
        // The rest of your existing logic remains unchanged.
        const dateKey = moment(date).format('YYYY-MM-DD');
        const eventsForDay = this.icsEventsByDate.get(dateKey);
        const friendlyDate = date.toLocaleDateString(undefined, {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        if (eventsForDay && eventsForDay.length > 0) {
            // --- Case 1: Events exist for the selected day ---
            new ActionChoiceModal(this.app,
                `Create daily note for ${friendlyDate}?`,
                "This day has calendar events. How would you like to proceed?",
                [{
                    // Button 1: Always includes events
                    text: hasTemplate ? 'Create with Events & Template' : 'Create with Events',
                    cls: 'mod-cta',
                    action: () => createNote(true)
                }, {
                    // Button 2: Excludes events
                    text: hasTemplate ? 'Create from Template Only' : 'Create Blank Note',
                    action: () => createNote(false)
                }, {
                    text: 'Cancel',
                    action: () => { }
                }]
            ).open();
        } else {
            // --- Case 2: No events exist for the selected day ---
            new ActionChoiceModal(this.app,
                'Create daily note?',
                `A daily note for ${friendlyDate} does not exist. Would you like to create it?`,
                [{
                    // The main action button
                    text: hasTemplate ? 'Create from Template' : 'Create Blank Note',
                    cls: 'mod-cta',
                    action: () => createNote(false) // No events to include, so always false
                }, {
                    text: 'Cancel',
                    action: () => { }
                }]
            ).open();
        }
    }

}


/**
 * The main plugin class that registers the view and settings tab.
 */
class PeriodMonthPlugin extends Plugin {


    async onload() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
        this.addStyle();
        this.updateStyles();
        this.registerView(VIEW_TYPE_PERIOD, leaf => new PeriodMonthView(leaf, this));
        this.addRibbonIcon("calendar-check", "Open Calendar Period Week Notes", () => this.activateView());
        this.addCommand({ id: "open-period-month-view", name: "Open Calendar Period Week Notes", callback: () => this.activateView() });
        await this.resetIcsRefreshInterval();
        this.addSettingTab(new PeriodSettingsTab(this.app, this));
        this.activateView();
        this.icsRefreshIntervalId = null;
    }

    async saveSettings() {
        await this.saveData(this.settings);
    }

    /**
     * Injects the plugin's CSS into the document head.
     */
    addStyle() {
        const styleEl = document.createElement('style');
        styleEl.id = 'period-month-plugin-styles';
        styleEl.textContent = PLUGIN_STYLES;
        document.head.appendChild(styleEl);
    }

    /**
     * Updates CSS custom properties (variables) based on the current plugin settings.
     */
    updateStyles() {
        const styleProps = {
            '--header-font-size': this.settings.fontSize,
            '--day-number-font-size': this.settings.dayNumberFontSize,
            '--header-row-font-weight': this.settings.headerRowBold ? 'bold' : 'normal',
            '--pw-column-font-weight': this.settings.pwColumnBold ? 'bold' : 'normal',
            '--month-color-light': this.settings.monthColorLight,
            '--month-color-dark': this.settings.monthColorDark,
            '--pw-separator-color': this.settings.pwColumnSeparatorColor,
            '--pw-column-font-color-light': this.settings.pwColumnFontColorLight,
            '--pw-column-font-color-dark': this.settings.pwColumnFontColorDark,
            '--week-number-font-color-light': this.settings.weekNumberFontColorLight,
            '--week-number-font-color-dark': this.settings.weekNumberFontColorDark,
            '--day-header-font-color-light': this.settings.dayHeaderFontColorLight,
            '--day-header-font-color-dark': this.settings.dayHeaderFontColorDark,
            '--day-cell-font-color-light': this.settings.dayCellFontColorLight,
            '--day-cell-font-color-dark': this.settings.dayCellFontColorDark,
            '--other-month-font-color-light': this.settings.otherMonthFontColorLight,
            '--other-month-font-color-dark': this.settings.otherMonthFontColorDark,
            '--scratch-font-family': this.settings.scratchFontFamily,
            '--scratch-font-size': this.settings.scratchFontSize,
            '--scratch-bold': this.settings.scratchBold ? 'bold' : 'normal',
            '--notes-font-size': this.settings.notesFontSize,
            '--notes-bold': this.settings.notesBold ? 'bold' : 'normal',
            '--tab-title-font-size': this.settings.tabTitleFontSize,
            '--tab-title-bold': this.settings.tabTitleBold ? 'bold' : 'normal',
            '--notes-line-height': this.settings.notesLineHeight,
            '--selected-tab-color': this.settings.selectedTabColor,
            '--today-highlight-color-light': this.settings.todayHighlightColorLight,
            '--today-highlight-color-dark': this.settings.todayHighlightColorDark,
            '--notes-hover-color': this.settings.notesHoverColor,
            '--daily-note-dot-color': this.settings.dailyNoteDotColor,
            '--note-created-color': this.settings.noteCreatedColor,
            '--note-modified-color': this.settings.noteModifiedColor,
            '--other-note-dot-color': this.settings.otherNoteDotColor,
            '--calendar-grid-gap-width': this.settings.calendarGridGapWidth,
            '--calendar-modified-dot-color': this.settings.calendarModifiedDotColor,
            '--other-note-popup-font-size': this.settings.otherNotePopupFontSize,
            '--calendar-dot-size': this.settings.calendarDotSize + 'px',
            '--nav-button-height': this.settings.navButtonHeight,
            '--date-cell-hover-color-light': this.settings.dateCellHoverColorLight,
            '--date-cell-hover-color-dark': this.settings.dateCellHoverColorDark,
            '--main-month-year-title-font-size': this.settings.mainMonthYearTitleFontSize,
            '--main-month-year-title-weight': this.settings.mainMonthYearTitleBold ? 'bold' : 'normal',
            '--task-heading-font-size': this.settings.taskHeadingFontSize,
            '--task-text-font-size': this.settings.taskTextFontSize,
            '--scratchpad-highlight-color': this.settings.scratchpadHighlightColor,
            '--asset-dot-color': this.settings.assetDotColor,
            '--calendar-event-dot-color': this.settings.calendarEventDotColor,
            '--task-dot-color': this.settings.taskDotColor,
            '--task-badge-color': this.settings.taskBadgeColor,
            '--task-badge-font-color': this.settings.taskBadgeFontColor,
            '--task-badge-font-size': this.settings.taskBadgeFontSize,
            '--today-circle-color': this.settings.todayCircleColor,
            '--weekly-note-dot-color': this.settings.weeklyNoteDotColor,
            '--weekend-shade-color-light': this.settings.weekendShadeColorLight,
            '--weekend-shade-color-dark': this.settings.weekendShadeColorDark,
            '--weekly-note-dot-color': this.settings.weeklyNoteDotColor,
        };

        for (const key in styleProps) {
            document.documentElement.style.setProperty(key, styleProps[key]);
        }
    }

    /**
     * Opens the plugin view in a new leaf or reveals it if it's already open.
     */
    async activateView() {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_PERIOD);
        if (leaves.length > 0) {
            this.app.workspace.revealLeaf(leaves[0]);
            return;
        }
        const leaf = this.app.workspace.getRightLeaf(false);
        await leaf.setViewState({ type: VIEW_TYPE_PERIOD, active: true });
        this.app.workspace.revealLeaf(leaf);
    }

    async resetIcsRefreshInterval() {
        // If there's an old interval running, clear it first
        if (this.icsRefreshIntervalId !== null) {
            window.clearInterval(this.icsRefreshIntervalId);
        }

        const intervalMinutes = this.settings.icsRefreshInterval;

        if (intervalMinutes > 0) {
            const intervalMilliseconds = intervalMinutes * 60 * 1000;

            this.icsRefreshIntervalId = this.registerInterval(
                window.setInterval(async () => {
                    console.log(`Periodic Notes: Automatically refreshing ICS feed (interval: ${intervalMinutes} minutes).`);

                    // We need to find the view to call its refresh method
                    const views = this.app.workspace.getLeavesOfType(VIEW_TYPE_PERIOD);
                    for (const leaf of views) {
                        if (leaf.view && leaf.view.refreshIcsEvents) {
                            await leaf.view.refreshIcsEvents();
                        }
                    }
                }, intervalMilliseconds)
            );
        }
    }


    onunload() {
        // Clean up when the plugin is disabled.
        const styleEl = document.getElementById('period-month-plugin-styles');
        if (styleEl) styleEl.remove();
        this.app.workspace.getLeavesOfType(VIEW_TYPE_PERIOD).forEach(leaf => leaf.detach());
    }
}

/**
 * The settings tab class for the plugin, responsible for building the settings UI.
 */
class PeriodSettingsTab extends PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.activeTab = 'general'; // Default tab
        this.scrollPosition = 0;
    }

    refreshDisplay() {
        if (this.contentEl) {
            this.scrollPosition = this.contentEl.scrollTop;
        }
        this.display();
    }

    async hide() {
        // This function runs automatically when the user closes the settings tab.

        // Get all open views of your calendar type
        const views = this.app.workspace.getLeavesOfType(VIEW_TYPE_PERIOD);

        if (views.length > 0) {
            // Tell each open calendar view to re-render itself
            for (const leaf of views) {
                if (leaf.view instanceof PeriodMonthView) { // Assuming your view class is PeriodMonthView
                    // Calling renderCalendar() will redraw the view with the latest settings
                    await leaf.view.renderCalendar();
                }
            }
        }
    }

    /**
     * A helper function to save settings and trigger a full UI refresh in any open views.
     */
    async saveAndUpdate() {
        await this.plugin.saveData(this.plugin.settings);
        this.plugin.updateStyles();
        this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_PERIOD).forEach(leaf => {
            if (leaf.view instanceof PeriodMonthView) {
                leaf.view.rebuildAndRender();
            }
        });
    }

    /**
     * Parses an rgba() string into a hex color and an alpha value.
     * @param {string} rgbaString The input string (e.g., "rgba(255, 165, 0, 0.4)").
     * @returns {{color: string, alpha: number}}
     */
    parseRgba(rgbaString) {
        if (!rgbaString) return { color: '#000000', alpha: 1 };
        const match = rgbaString.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/);
        if (!match) return { color: '#000000', alpha: 1 };
        const toHex = (c) => ('0' + parseInt(c, 10).toString(16)).slice(-2);
        const color = `#${toHex(match[1])}${toHex(match[2])}${toHex(match[3])}`;
        const alpha = match[4] !== undefined ? parseFloat(match[4]) : 1;
        return { color, alpha };
    }

    /**
     * Builds an rgba() string from a hex color and an alpha value.
     * @param {string} hex The hex color string (e.g., "#ffa500").
     * @param {number} alpha The alpha value (0 to 1).
     * @returns {string} The rgba string.
     */
    buildRgba(hex, alpha) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha.toFixed(2)})`;
    }

    /**
     * Creates a custom setting component with a color picker and an alpha slider.
     * @param {string} name The setting name.
     * @param {string} desc The setting description.
     * @param {string} settingKey The key in the settings object to modify.
     */
    createRgbaColorSetting(containerEl, name, desc, settingKey) {
        const setting = new Setting(containerEl)
            .setName(name)
            .setDesc(desc);

        let colorPicker;
        let slider;

        const initialValue = this.plugin.settings[settingKey] || DEFAULT_SETTINGS[settingKey];
        const { color: initialColor, alpha: initialAlpha } = this.parseRgba(initialValue);

        setting.addColorPicker(picker => {
            colorPicker = picker;
            picker.setValue(initialColor)
                .onChange(async (newColor) => {
                    const currentAlpha = slider ? slider.getValue() : 1;
                    const newRgba = this.buildRgba(newColor, currentAlpha);
                    this.plugin.settings[settingKey] = newRgba;
                    if (picker.colorEl) picker.colorEl.style.backgroundColor = newRgba;
                    await this.saveAndUpdate();
                });
        });

        setting.addSlider(sliderComponent => {
            slider = sliderComponent;
            slider.setLimits(0, 1, 0.05)
                .setValue(initialAlpha)
                .setDynamicTooltip()
                .onChange(async (newAlpha) => {
                    const currentColor = colorPicker ? colorPicker.getValue() : '#000000';
                    const newRgba = this.buildRgba(currentColor, newAlpha);
                    this.plugin.settings[settingKey] = newRgba;
                    if (colorPicker && colorPicker.colorEl) {
                        colorPicker.colorEl.style.backgroundColor = newRgba;
                    }
                    await this.saveAndUpdate();
                });
        });

        if (colorPicker && colorPicker.colorEl) {
            colorPicker.colorEl.style.backgroundColor = initialValue;
        }

        setting.addExtraButton(button => {
            button.setIcon("rotate-ccw").setTooltip("Reset to default").onClick(async () => {
                const defaultValue = DEFAULT_SETTINGS[settingKey];
                this.plugin.settings[settingKey] = defaultValue;

                const { color, alpha } = this.parseRgba(defaultValue);

                if (colorPicker) {
                    colorPicker.setValue(color);
                    if (colorPicker.colorEl) {
                        colorPicker.colorEl.style.backgroundColor = defaultValue;
                    }
                }
                if (slider) {
                    slider.setValue(alpha);
                }

                await this.saveAndUpdate();
            });
        });
    }

    /**
     * Creates a simple path suggestion popup for a text input element.
     * @param {HTMLInputElement} inputEl The input element to attach the suggester to.
     * @param {(query: string) => string[]} getSuggestions A function that returns a list of suggestion strings based on a query.
     */
    createPathSuggester(inputEl, getSuggestions) {
        const suggestionEl = createDiv({ cls: 'custom-suggestion-container' });
        suggestionEl.style.display = 'none';
        inputEl.parentElement.appendChild(suggestionEl);
        const showSuggestions = () => {
            const query = inputEl.value.toLowerCase();
            const suggestions = getSuggestions(query);
            suggestionEl.empty();
            if (suggestions.length === 0) {
                suggestionEl.style.display = 'none';
                return;
            }
            suggestionEl.style.display = 'block';
            suggestions.slice(0, 10).forEach(path => {
                const item = suggestionEl.createDiv({ cls: 'custom-suggestion-item', text: path });
                item.addEventListener('mousedown', (e) => {
                    e.preventDefault();
                    inputEl.value = path;
                    inputEl.dispatchEvent(new Event('input'));
                    suggestionEl.style.display = 'none';
                });
            });
        };
        inputEl.addEventListener('input', showSuggestions);
        inputEl.addEventListener('focus', showSuggestions);
        inputEl.addEventListener('blur', () => setTimeout(() => { suggestionEl.style.display = 'none'; }, 150));
    }

    /**
     * Creates a settings section for managing a list of ignored folder paths.
     * @param {HTMLElement} containerEl The parent container for this setting section.
     * @param {string} name The heading name for the section.
     * @param {string} desc The description for the section.
     * @param {string} settingKey The key in the settings object for the ignored folder array.
     */
    createIgnoredFolderList(containerEl, name, desc, settingKey) {
        new Setting(containerEl).setName(name).setDesc(desc).setHeading();
        const ignoredFolders = this.plugin.settings[settingKey];
        if (ignoredFolders && ignoredFolders.length > 0) {
            ignoredFolders.forEach((folder, index) => {
                new Setting(containerEl).setName(folder).addButton(button => {
                    button.setIcon("trash").setTooltip("Remove folder")
                        .onClick(async () => {
                            this.plugin.settings[settingKey].splice(index, 1);
                            await this.saveAndUpdate();
                            this.refreshDisplay();
                        });
                });
            });
        } else {
            containerEl.createEl('p', { text: 'No folders are being ignored.', cls: 'setting-item-description' });
        }
        const addSetting = new Setting(containerEl);
        let textInput;
        addSetting.addText(text => {
            textInput = text;
            const getFolders = (query) => this.app.vault.getAllLoadedFiles().filter(f => f instanceof TFolder && (!query || f.path.toLowerCase().includes(query))).map(f => f.path);
            this.createPathSuggester(text.inputEl, getFolders);
            text.setPlaceholder("Enter folder path to ignore...");
        }).addButton(button => {
            button.setButtonText("Add").setTooltip("Add this folder to the ignore list")
                .onClick(async () => {
                    const newFolder = textInput.getValue();
                    if (newFolder && !this.plugin.settings[settingKey].includes(newFolder)) {
                        this.plugin.settings[settingKey].push(newFolder);
                        await this.saveAndUpdate();
                        this.refreshDisplay();
                    }
                });
        });
    }

    display() {
        const { containerEl } = this;
        containerEl.empty();

        // Main container for the tabbed layout
        const settingsContainer = containerEl.createDiv({ cls: "period-settings-container" });
        const navEl = settingsContainer.createDiv({ cls: "period-settings-nav" });
        this.contentEl = settingsContainer.createDiv({ cls: "period-settings-content" });
        this.renderPinnedNotesSettings(this.containerEl);

        const tabs = {
            general: "General Display",
            functional: "Calendar Functional",
            dots: "Calendar Dots",
            weeklyNotes: "Weekly Notes",
            tasksIndicator: "Task Indicators",
            tabs: "General Tab",
            scratchpad: "ScratchPad Tab",
            notes: "Notes Tab",
            pinned: 'Pinned Notes Tab',
            assets: "Assets Tab",
            tasks: "Tasks Tab",
            importExport: "Import / Export",
            startHere: "Help",
            about: "About"
        };

        // Create navigation buttons
        for (const [key, name] of Object.entries(tabs)) {
            const navButton = navEl.createEl('button', {
                text: name,
                cls: 'period-settings-nav-button'
            });
            if (this.activeTab === key) {
                navButton.addClass('is-active');
            }
            navButton.addEventListener('click', () => {
                this.activeTab = key;
                // Re-render the entire display to update active state and content
                this.refreshDisplay();
            });
        }

        // Render the content for the active tab
        this.renderContentForActiveTab();
        // Restore scroll position after re-rendering
        if (this.contentEl && this.scrollPosition) {
            this.contentEl.scrollTop = this.scrollPosition;
        }
    }

    /*renderPinnedNotesSettings(containerEl) {
        //v2
        containerEl.createEl('h2', { text: 'Pinned Notes' });

        // Setting to choose the default sort order
        new Setting(containerEl)
            .setName('Default sort order for pinned notes')
                .setDesc('Choose the default sort order for pinned notes when the plugin is loaded. To change the order click on the PINNED NOTES title in the main view.')

            .setDesc("Choose whether to sort pinned notes alphabetically or by your custom order by default.")
            .addDropdown(dropdown => dropdown
                .addOption('a-z', 'A-Z (Default)')
                .addOption('custom', 'Custom Order')
                .setValue(this.plugin.settings.pinnedNotesSortOrder)
                .onChange(async (value) => {
                    this.plugin.settings.pinnedNotesSortOrder = value;
                    await this.plugin.saveSettings();
                    //this.refreshDisplay(); // Refresh the settings view
                }));

        // ADD THIS NEW SETTING HERE:
        const isMac = Platform.isMacOS;
        const modifierKey = isMac ? 'Option (‚å•)' : 'Ctrl';

        new Setting(containerEl)
            .setName('Change sort order in main view')
            .setDesc(`Click the "PINNED NOTES" header in the main view to cycle between A-Z, Z-A, and Custom sort orders.\n\nWhen in Custom order, hold ${modifierKey} and drag notes to reorder them.`);


        // UI for managing the custom order
        new Setting(containerEl)
            .setName('Set Custom Order')
            .setDesc('Drag and drop notes to arrange them. This order is used when "Custom Order" is selected.');

        const draggableContainer = containerEl.createDiv('pinned-notes-order-container');
        this.renderDraggablePinnedNotes(draggableContainer);
    }
        */

    // Function to render the draggable list of pinned notes
    async renderDraggablePinnedNotes(container) {
        container.empty();

        const pinValue = this.plugin.settings.pinTag.toLowerCase();
        const allMarkdownFiles = this.app.vault.getMarkdownFiles();

        // Filter for pinned notes (using your existing logic)
        const pinnedNotes = allMarkdownFiles.filter(file => {
            const cache = this.app.metadataCache.getFileCache(file);
            if (!cache) return false;

            // Check tags
            const hasPinTag = cache.tags?.some(tag => tag.tag.toLowerCase().includes(pinValue));
            if (hasPinTag) return true;

            // Check frontmatter
            const frontmatter = cache.frontmatter;
            if (frontmatter) {
                for (const key in frontmatter) {
                    const value = frontmatter[key];
                    if (typeof value === 'string' && value.toLowerCase().includes(pinValue)) return true;
                    if (Array.isArray(value) && value.some(item => typeof item === 'string' && item.toLowerCase().includes(pinValue))) return true;
                }
            }
            return false;
        });

        const customOrder = this.plugin.settings.pinnedNotesCustomOrder || [];

        // Sort the notes based on the saved custom order, with a fallback for new notes
        pinnedNotes.sort((a, b) => {
            const indexA = customOrder.indexOf(a.path);
            const indexB = customOrder.indexOf(b.path);

            if (indexA === -1 && indexB === -1) return a.basename.localeCompare(b.basename);
            if (indexA === -1) return 1;
            if (indexB === -1) return -1;
            return indexA - indexB;
        });

        // Create draggable elements
        pinnedNotes.forEach(file => {
            const itemEl = container.createDiv({ cls: 'draggable-item' });
            itemEl.draggable = true;
            itemEl.dataset.filePath = file.path;

            const handle = itemEl.createDiv({ cls: 'drag-handle' });
            setIcon(handle, 'grip-vertical');
            itemEl.createSpan({ text: file.basename });

            // Drag-and-Drop Event Listeners
            itemEl.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', file.path);
                itemEl.classList.add('dragging');
            });

            itemEl.addEventListener('dragend', () => {
                itemEl.classList.remove('dragging');
            });

            itemEl.addEventListener('dragover', (e) => {
                e.preventDefault();
                const draggingItem = container.querySelector('.dragging');
                if (draggingItem && draggingItem !== itemEl) {
                    const rect = itemEl.getBoundingClientRect();
                    const isAfter = e.clientY > rect.top + rect.height / 2;
                    if (isAfter) {
                        itemEl.parentNode.insertBefore(draggingItem, itemEl.nextSibling);
                    } else {
                        itemEl.parentNode.insertBefore(draggingItem, itemEl);
                    }
                }
            });
        });

        // Save the new order on drop (by listening on the container)
        container.addEventListener('drop', async () => {
            const newOrder = Array.from(container.children).map(child => child.dataset.filePath);
            this.plugin.settings.pinnedNotesCustomOrder = newOrder;
            await this.plugin.saveSettings();
            new Notice('Custom pinned order saved!');
        });
    }

    renderContentForActiveTab() {
        this.contentEl.empty();
        switch (this.activeTab) {
            case 'general':
                this.renderGeneralSettings();
                break;
            case 'functional':
                this.renderFunctionalSettings();
                break;
            case 'dots':
                this.renderDotsSettings();
                break;
            case 'weeklyNotes':
                this.renderWeeklyNotesSettings();
                break;
            case 'tasksIndicator':
                this.renderTaskIndicatorSettings();
                break;
            case 'tabs':
                this.renderTabsSettings();
                break;
            case 'scratchpad':
                this.renderScratchpadSettings();
                break;
            case 'notes':
                this.renderNotesSettings();
                break;
            case 'pinned':
                this.renderPinnedNotesSettings();
                break;
            case 'assets':
                this.renderAssetsSettings();
                break;
            case 'tasks':
                this.renderTasksSettings();
                break;
            case 'importExport':
                this.renderImportExportTab();
                break;
            case 'startHere':
                this.renderStartHereTab();
                break;
            case 'about':
                this.renderAboutTab();
                break;
        }
    }

    // --- RENDER METHODS FOR EACH TAB ---
    renderGeneralSettings() {
        const containerEl = this.contentEl;
        containerEl.empty();

        containerEl.createEl("h1", { text: "General Display Settings" });

        // --- Titles & Headers Section ---
        new Setting(containerEl).setName("Titles & Headers").setHeading();
        const monthTitleSetting = new Setting(containerEl).setName("Month title format");
        monthTitleSetting.descEl.innerHTML = `
            Set the format for the calendar's month title. Uses <a href="https://momentjs.com/docs/#/displaying/format/">moment.js</a> format strings, e.g.
            <br><code>YYYY</code>: 4-digit year (e.g., 2025)
            <br><code>YY</code>: 2-digit year (e.g., 25)
            <br><code>MMMM</code>: Full month name (e.g., September)
            <br><code>MMM</code>: Short month name (e.g., Sep)
            <br><code>MM</code>: 2-digit month (e.g., 09)
            <br><code>M</code>: Month number (e.g., 9)
        `;

        monthTitleSetting.addText(text => text.setPlaceholder("MMMM YYYY").setValue(this.plugin.settings.monthTitleFormat).onChange(async (value) => { this.plugin.settings.monthTitleFormat = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Month title font size").setDesc("Font size for the main 'Month Year' title at the top of the calendar. Default is 20px.").addText(text => text.setValue(this.plugin.settings.mainMonthYearTitleFontSize).onChange(async value => { this.plugin.settings.mainMonthYearTitleFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Bold month title").setDesc("Toggles bold font weight for the main 'Month Year' title.").addToggle(toggle => toggle.setValue(this.plugin.settings.mainMonthYearTitleBold).onChange(async value => { this.plugin.settings.mainMonthYearTitleBold = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Month Title Color (Light Mode)", "Color for the main 'Month Year' title in light mode.", "monthColorLight");
        this.createRgbaColorSetting(containerEl, "Month Title Color (Dark Mode)", "Color for the main 'Month Year' title in dark mode.", "monthColorDark");
        new Setting(containerEl).setName("Navigation buttons height").setDesc("Default is 28px.").addText(text => text.setValue(this.plugin.settings.navButtonHeight).onChange(async value => { this.plugin.settings.navButtonHeight = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Bold calendar header").setDesc("Toggles bold font weight for the day names row (Mon, Tue, etc.).").addToggle(toggle => toggle.setValue(this.plugin.settings.headerRowBold).onChange(async value => { this.plugin.settings.headerRowBold = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Day header row font color (Light Mode)", "Text color for the day names (Sun, Mon, Tue, etc.) in light theme.", "dayHeaderFontColorLight");
        this.createRgbaColorSetting(containerEl, "Day header row font color (Dark Mode)", "Text color for the day names (Sun, Mon, Tue, etc.) in dark theme.", "dayHeaderFontColorDark");

        // --- Calendar Grid Section ---
        new Setting(containerEl).setName("Calendar Grid").setHeading();

        // THIS IS YOUR MISSING SETTING, NOW RESTORED
        new Setting(containerEl)
            .setName("Calendar grid layout")
            .setDesc("Choose between a spacious, normal or condensed layout for the calendar grid.")
            .addDropdown(dropdown => dropdown
                .addOption('spacious', 'Spacious')
                .addOption('normal', 'Normal')
                .addOption('condensed', 'Condensed')
                .setValue(this.plugin.settings.calendarLayout)
                .onChange(async (value) => {
                    this.plugin.settings.calendarLayout = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName('Calendar grid labels font size')
            .setDesc('Font size for calendar day lables and week, period/week columns. Default is 12px.')
            .addText(text => text
                .setValue(this.plugin.settings.fontSize)
                .onChange(async (value) => {
                    this.plugin.settings.fontSize = value;
                    await this.saveAndUpdate();
                }));
        new Setting(containerEl).setName("Calendar grid day numbers font size").setDesc("Font size for the day numbers in the calendar grid. Default is 15px.").addText(text => text.setValue(this.plugin.settings.dayNumberFontSize).onChange(async value => { this.plugin.settings.dayNumberFontSize = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Date cell font color (Light Mode)", "Text color for the date numbers in light theme.", "dayCellFontColorLight");
        this.createRgbaColorSetting(containerEl, "Date cell font color (Dark Mode)", "Text color for the date numbers in dark theme.", "dayCellFontColorDark");
        this.createRgbaColorSetting(containerEl, "Other month date font color (Light Mode)", "Text color for dates outside the current month in light theme.", "otherMonthFontColorLight");
        this.createRgbaColorSetting(containerEl, "Other month date font color (Dark Mode)", "Text color for dates outside the current month in dark theme.", "otherMonthFontColorDark");

        new Setting(containerEl).setName("Show calendar grid lines").setDesc("Toggles the visibility of border lines around each date cell.").addToggle(toggle => toggle.setValue(this.plugin.settings.showCalendarGridLines).onChange(async value => { this.plugin.settings.showCalendarGridLines = value; await this.saveAndUpdate(); }));
        new Setting(containerEl)
            .setName("Calendar grid gap width")
            .setDesc("Width of the gap/border between calendar cells. The grid lines setting above needs to be toggled on. (e.g., 1px, 2px, 0.5px). Default is 1px.")
            .addText(text => text
                .setPlaceholder("1px")
                .setValue(this.plugin.settings.calendarGridGapWidth)
                .onChange(async (value) => {
                    this.plugin.settings.calendarGridGapWidth = value || "1px";
                    await this.saveAndUpdate();
                }));



        // --- Corrected Dynamic "Today's date style" Section ---
        const todayStyleSetting = new Setting(containerEl)
            .setName("Today's date style")
            .setDesc("Choose how to indicate the current day on the calendar.");

        const highlightOptionsContainer = containerEl.createDiv();

        const renderHighlightOptions = (style) => {
            highlightOptionsContainer.empty();
            if (style === 'cell') {
                this.createRgbaColorSetting(highlightOptionsContainer, "Todays Date Highlight (Light Mode)", "Background color for the current day's cell in light mode.", "todayHighlightColorLight");
                this.createRgbaColorSetting(highlightOptionsContainer, "Todays Date Highlight (Dark Mode)", "Background color for the current day's cell in dark mode.", "todayHighlightColorDark");
            } else if (style === 'circle' || style === 'number') {
                this.createRgbaColorSetting(highlightOptionsContainer, "Today's Highlight Color", "Controls the highlight for the 'Circle' and 'Square' styles.", "todayCircleColor");
            }
        };

        todayStyleSetting.addDropdown(dropdown => {
            dropdown
                .addOption('none', 'Off (No Highlight)')
                .addOption('cell', 'Highlight Cell')
                .addOption('circle', 'Circle Around Date')
                .addOption('number', 'Square Around Date')
                .setValue(this.plugin.settings.todayHighlightStyle)
                .onChange(async (value) => {
                    this.plugin.settings.todayHighlightStyle = value;
                    await this.saveAndUpdate();
                    renderHighlightOptions(value);
                });
        });

        renderHighlightOptions(this.plugin.settings.todayHighlightStyle);
        // --- End of Corrected Section ---

        new Setting(containerEl).setName("Highlight today's day header").setDesc("Colors the day column header (Sun, Mon, etc.) containing today.").addToggle(toggle => toggle.setValue(this.plugin.settings.highlightTodayDayHeader).onChange(async value => { this.plugin.settings.highlightTodayDayHeader = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Highlight today's P/W or week number").setDesc("Colors the Period/Week or Calendar Week number for the current week.").addToggle(toggle => toggle.setValue(this.plugin.settings.highlightTodayPWLabel).onChange(async value => { this.plugin.settings.highlightTodayPWLabel = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Date Cell Hover Color (Light Mode)", "Background color when hovering over a date cell in light mode.", "dateCellHoverColorLight");
        this.createRgbaColorSetting(containerEl, "Date Cell Hover Color (Dark Mode)", "Background color when hovering over a date cell in dark mode.", "dateCellHoverColorDark");
        new Setting(containerEl).setName("Bold Period/Week column").setDesc("Toggles bold font weight for the Period/Week column.").addToggle(toggle => toggle.setValue(this.plugin.settings.pwColumnBold).onChange(async value => { this.plugin.settings.pwColumnBold = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Show P/W separator line").setDesc("Display a vertical line between the week columns and the date grid.").addToggle(toggle => toggle.setValue(this.plugin.settings.showPWColumnSeparator).onChange(async value => { this.plugin.settings.showPWColumnSeparator = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "P/W separator line color", "Color of the vertical separator line.", "pwColumnSeparatorColor");
        this.createRgbaColorSetting(containerEl, "Period/Week column font color (Light Mode)", "Text color for the Period/Week column in light theme.", "pwColumnFontColorLight");
        this.createRgbaColorSetting(containerEl, "Period/Week column font color (Dark Mode)", "Text color for the Period/Week column in dark theme.", "pwColumnFontColorDark");
        this.createRgbaColorSetting(containerEl, "Week number column font color (Light Mode)", "Text color for the week number column in light theme.", "weekNumberFontColorLight");
        this.createRgbaColorSetting(containerEl, "Week number column font color (Dark Mode)", "Text color for the week number column in dark theme.", "weekNumberFontColorDark");
    }



    renderFunctionalSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Calendar Functional Settings" });

        // --- Period/Week System Section ---
        new Setting(containerEl).setName("Period/Week System").setHeading();

        new Setting(containerEl)
            .setName("Week starts on")
            .setDesc("Choose whether the calendar week starts on Sunday or Monday.")
            .addDropdown(dropdown => dropdown
                .addOption('monday', 'Monday')
                .addOption('sunday', 'Sunday')
                .setValue(this.plugin.settings.weekStartDay)
                .onChange(async (value) => {
                    this.plugin.settings.weekStartDay = value;
                    await this.saveAndUpdate();
                    // Refresh the settings tab to show the updated validation message
                    this.refreshDisplay();
                }));

        const requiredDay = this.plugin.settings.weekStartDay === 'monday' ? 1 : 0; // Monday is 1, Sunday is 0
        const requiredDayName = this.plugin.settings.weekStartDay.charAt(0).toUpperCase() + this.plugin.settings.weekStartDay.slice(1);

        new Setting(containerEl)
            .setName("Start of Period 1 Week 1")
            .setDesc(`The date for the start of P1W1. This date MUST be a ${requiredDayName} to match your 'Week starts on' setting.`) // Dynamic description
            .addText(text => {
                text.inputEl.type = "date";
                text.setValue(this.plugin.settings.startOfPeriod1Date)
                    .onChange(async value => {
                        const selectedDate = moment(value, "YYYY-MM-DD");
                        if (selectedDate.day() !== requiredDay) {
                            new Notice(`Error: The start date must be a ${requiredDayName}.`, 5000);
                            return; // Do not save the invalid date
                        }
                        this.plugin.settings.startOfPeriod1Date = value;
                        await this.saveAndUpdate();
                    });
            });

        new Setting(containerEl).setName("Period/Week format").setDesc("Choose the display format for the P/W column.").addDropdown(dropdown => dropdown.addOption("P#W#", "P#W#").addOption("P# W#", "P# W#").addOption("# W#", "# W#").addOption("p#w#", "p#p#").addOption("p# w#", "p# w#").addOption("# w#", "# w#").addOption("#-#", "#-#").addOption("# - #", "# - #").addOption("#/#", "#/#").addOption("# / #", "# / #").addOption("#,#", "#,#").addOption("#, #", "#, #").setValue(this.plugin.settings.pwFormat).onChange(async (value) => { this.plugin.settings.pwFormat = value; await this.saveAndUpdate(); }));

        new Setting(containerEl).setName("Show Period/Week column").setDesc("Show or hide the Period/Week column on the left side of the calendar.").addToggle(toggle => toggle.setValue(this.plugin.settings.showPWColumn).onChange(async value => { this.plugin.settings.showPWColumn = value; await this.saveAndUpdate(); }));

        // --- Week Numbers Section ---
        new Setting(containerEl).setName("Week Numbers").setHeading();

        new Setting(containerEl)
            .setName("Show week number column")
            .setDesc("Display a column for week numbers on the left side of the calendar.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showWeekNumbers)
                .onChange(async (value) => {
                    this.plugin.settings.showWeekNumbers = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Week number type")
            .setDesc("Choose which week numbering system to use.")
            .addDropdown(dropdown => dropdown
                .addOption('period', 'Period System Week')
                .addOption('calendar', 'Calendar Year Week (ISO)')
                .setValue(this.plugin.settings.weekNumberType)
                .onChange(async (value) => {
                    this.plugin.settings.weekNumberType = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Week number column label")
            .setDesc("The text to display at the top of the week number column.")
            .addText(text => text
                .setValue(this.plugin.settings.weekNumberColumnLabel)
                .onChange(async (value) => {
                    this.plugin.settings.weekNumberColumnLabel = value;
                    await this.saveAndUpdate();
                }));

        // --- Daily Notes Section ---
        new Setting(containerEl).setName("Daily Notes").setHeading();
        new Setting(containerEl).setName("Daily Notes folder").setDesc("Specify the folder where your daily notes are stored and created.").addText(text => { this.createPathSuggester(text.inputEl, (q) => this.app.vault.getAllLoadedFiles().filter(f => f instanceof TFolder && (!q || f.path.toLowerCase().includes(q))).map(f => f.path)); text.setValue(this.plugin.settings.dailyNotesFolder).onChange(async value => { this.plugin.settings.dailyNotesFolder = value; await this.saveAndUpdate(); }); });
        new Setting(containerEl).setName("Daily Note open behavior").addDropdown(dropdown => dropdown.addOption('new-tab', 'Open in a new tab').addOption('current-tab', 'Open in the current tab').setValue(this.plugin.settings.dailyNoteOpenAction).onChange(async (value) => { this.plugin.settings.dailyNoteOpenAction = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Daily note template").setDesc("Path to a template file to use when creating a new daily note.").addText(text => { this.createPathSuggester(text.inputEl, (q) => this.app.vault.getMarkdownFiles().filter(f => !q || f.path.toLowerCase().includes(q)).map(f => f.path)); text.setPlaceholder("Example: Templates/Daily.md").setValue(this.plugin.settings.dailyNoteTemplatePath).onChange(async (value) => { this.plugin.settings.dailyNoteTemplatePath = value; await this.saveAndUpdate(); }); });

        // --- Grid Highlighting Section ---
        new Setting(containerEl).setName("Grid Highlighting").setHeading();
        new Setting(containerEl).setName("Enable row highlight").setDesc("Highlights the entire week's row when hovering over the P/W label.").addToggle(toggle => toggle.setValue(this.plugin.settings.enableRowHighlight).onChange(async (value) => { this.plugin.settings.enableRowHighlight = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Enable column highlight").setDesc("Highlights the entire day's column when hovering over the day name (e.g., Mon).").addToggle(toggle => toggle.setValue(this.plugin.settings.enableColumnHighlight).onChange(async (value) => { this.plugin.settings.enableColumnHighlight = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Enable complex grid highlight").setDesc("When hovering a date, highlights all cells in its row and column up to that date.").addToggle(toggle => toggle.setValue(this.plugin.settings.enableRowToDateHighlight).onChange(async (value) => { this.plugin.settings.enableRowToDateHighlight = value; await this.saveAndUpdate(); }));




        new Setting(containerEl)
            .setName("Always highlight current week")
            .setDesc("Keeps the entire row for the current week permanently highlighted.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.highlightCurrentWeek)
                .onChange(async (value) => {
                    this.plugin.settings.highlightCurrentWeek = value;
                    await this.saveAndUpdate();
                }));


        this.createRgbaColorSetting(containerEl, "Grid Highlight Color (Light Mode)", "Color for row/column highlighting on hover in light mode.", "rowHighlightColorLight");
        this.createRgbaColorSetting(containerEl, "Grid Highlight Color (Dark Mode)", "Color for row/column highlighting on hover in dark mode.", "rowHighlightColorDark");


        new Setting(containerEl)
            .setName("Highlight weekends")
            .setDesc("Shade Saturday and Sunday columns with a subtle background color.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.highlightWeekends)
                .onChange(async (value) => {
                    this.plugin.settings.highlightWeekends = value;
                    await this.saveAndUpdate();
                }));

        this.createRgbaColorSetting(
            containerEl,
            "Weekend shade color (Light Mode)",
            "Background color for Saturday and Sunday columns in light theme.",
            "weekendShadeColorLight"
        );

        this.createRgbaColorSetting(
            containerEl,
            "Weekend shade color (Dark Mode)",
            "Background color for Saturday and Sunday columns in dark theme.",
            "weekendShadeColorDark"
        );


        new Setting(containerEl).setName("Integrate External Calendar Events").setHeading();

        new Setting(containerEl)
            .setName('External calendar URL (.ics)')
            .setDesc('Integrate an external .ics feed calendar URL (e.g., from Google Calendar using the \'Secret address in iCal format\' or \'Public address in iCal Format\') to indicate events as dots in the calendar grid and event details in the date popup box.')
            .addText(text => {
                text
                    .setPlaceholder('https://calendar.google.com/calendar/ical/.../basic.ics')
                    .setValue(this.plugin.settings.icsUrl)
                    .onChange(async (value) => {
                        this.plugin.settings.icsUrl = value;
                        await this.saveAndUpdate();
                    });
                text.inputEl.style.minWidth = "300px";
                text.inputEl.style.resize = "vertical";
            })
            .settingEl.style.alignItems = "flex-start";

        new Setting(containerEl)
            .setName('Auto-refresh Interval')
            .setDesc('How often the external calendar URL should be automatically refreshed in the background.')
            .addDropdown(dropdown => {
                dropdown
                    .addOption('15', '15 minutes')
                    .addOption('30', '30 minutes')
                    .addOption('60', '1 hour')
                    .addOption('180', '3 hours')
                    .addOption('360', '6 hours')
                    .addOption('720', '12 hours')
                    .setValue(this.plugin.settings.icsRefreshInterval.toString())
                    .onChange(async (value) => {
                        this.plugin.settings.icsRefreshInterval = parseInt(value, 10);
                        await this.plugin.saveSettings();

                        // Call a method on the main plugin to reset the timer
                        this.plugin.resetIcsRefreshInterval();
                    });
            });


        new Setting(containerEl)
            .setName('Calendar Event Indicator')
            .setDesc('Choose how to display external calendar events on the calendar grid. "Dot" shows a separate colored dot, while "Heatmap" and "Badge" will add the event count to the existing task indicators. If you select "Heatmap" or "Badge", ensure that the corresponding task indicator option is also enabled in the "Task Indicators" settings tab. Settings will be applied after closing the settings window.')
            .addDropdown(dropdown => dropdown
                .addOption('dot', 'Dot Only')
                .addOption('heatmap', 'Add to Heatmap')
                .addOption('badge', 'Add to Task Badge')
                .setValue(this.plugin.settings.calendarEventIndicatorStyle || 'dot')
                .onChange(async (value) => {
                    // Step 1: Save the new value
                    this.plugin.settings.calendarEventIndicatorStyle = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('Calendar Events Placeholder')
            .setDesc('The placeholder text to use in your daily note template. The plugin will replace this text with calendar events.')
            .addText(text => {
                text
                    .setPlaceholder('%%CALENDAR_EVENTS%%')
                    .setValue(this.plugin.settings.calendarEventsPlaceholder)
                    .onChange(async (value) => {
                        this.plugin.settings.calendarEventsPlaceholder = value.trim() || '%%CALENDAR_EVENTS%%';
                        await this.plugin.saveSettings();
                    });

                // Set the minimum width for the text input field
                text.inputEl.style.minWidth = "300px";
                text.inputEl.style.resize = "vertical";
            })
            .settingEl.style.alignItems = "flex-start";


        // Create a new setting container
        const calendarFormatSetting = new Setting(containerEl)
            .setName('Calendar Event Format')
            .addTextArea(text => {
                text
                    .setPlaceholder('- {{startTime}} - {{endTime}}: {{summary}}')
                    .setValue(this.plugin.settings.calendarEventsFormat)
                    .onChange(async (value) => {
                        this.plugin.settings.calendarEventsFormat = value || '- {{startTime}} - {{endTime}}: {{summary}}';
                        await this.plugin.saveSettings();
                    });

                // Apply styles to the textarea element
                text.inputEl.style.minWidth = "300px";
                text.inputEl.style.minHeight = "100px";
                text.inputEl.style.resize = "vertical";
            });

        // --- THIS IS THE NEW, CORRECTED DESCRIPTION LOGIC ---
        // We build the description separately and append it to the setting's description element.
        const descEl = calendarFormatSetting.descEl;
        descEl.appendText('Customize the format for each calendar event. Use these placeholders:');

        const placeholderList = descEl.createEl('ul');

        const placeholders = [
            { code: '{{summary}}', text: 'The event title' },
            { code: '{{startTime}}', text: 'The event start time (or "All-day")' },
            { code: '{{endTime}}', text: 'The event end time' }
        ];

        placeholders.forEach(p => {
            const item = placeholderList.createEl('li');
            item.createEl('code', { text: p.code });
            item.appendText(` ${p.text}`);
        });

        // Align the entire setting row to the top
        calendarFormatSetting.settingEl.style.alignItems = "flex-start";





    }

    renderDotsSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Calendar Dot Indicators" });
        // --- Dot Functionality Section ---
        new Setting(containerEl).setName("Functionality & Style").setHeading();
        new Setting(containerEl).setName("Show dot for created notes").setDesc("Show a dot on days where any note (that is not a daily note) was created.").addToggle(toggle => toggle.setValue(this.plugin.settings.showOtherNoteDot).onChange(async value => { this.plugin.settings.showOtherNoteDot = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Show dot for modified notes").setDesc("Show a dot on days where any note (that is not a daily note) was modified.").addToggle(toggle => toggle.setValue(this.plugin.settings.showModifiedFileDot).onChange(async value => { this.plugin.settings.showModifiedFileDot = value; await this.saveAndUpdate(); }));
        new Setting(containerEl)
            .setName("Show dot for new assets")
            .setDesc("Show a dot on days where an asset (image, PDF, etc.) was added to the vault.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showAssetDot)
                .onChange(async (value) => {
                    this.plugin.settings.showAssetDot = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName('Show dot for external ics calendar events')
            .setDesc('Show a dot on days that have a calendard event from an external calendar source, e.g. Google Calendar.')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showIcsDot)
                .onChange(async (value) => {
                    this.plugin.settings.showIcsDot = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl).setName("Calendar dot size").setDesc("The size (in pixels) of the colored dots that appear under calendar days. Default is 4.").addText(text => text.setValue(String(this.plugin.settings.calendarDotSize)).onChange(async (value) => { this.plugin.settings.calendarDotSize = Number(value) || 4; await this.saveAndUpdate(); }));

        // --- Dot Colors Section ---
        new Setting(containerEl).setName("Dot Colors").setHeading();
        this.createRgbaColorSetting(containerEl, "Daily Note Dot", "Dot for daily notes on the calendar and note lists .", "dailyNoteDotColor");
        this.createRgbaColorSetting(containerEl, "Created Note Dot", "Dot on calendar and note lists for non-daily, newly created notes.", "otherNoteDotColor");
        this.createRgbaColorSetting(containerEl, "Modified Note Dot", "Dot on calendar and note lists for non-daily, modified notes.", "calendarModifiedDotColor");
        this.createRgbaColorSetting(containerEl, "Asset Note Dot", "Dot on calendar and note lists for newly added assets.", "assetDotColor");
        this.createRgbaColorSetting(containerEl, 'Calendar Event Dot', 'The color of the dot for events from your iCal/.ics feed.', 'calendarEventDotColor');
        // --- Popups Section ---
        new Setting(containerEl).setName("Popups").setHeading();
        new Setting(containerEl).setName("Popup hover delay").setDesc("How long to wait before showing the note list popup on hover. Default is 100.").addText(text => text.setValue(String(this.plugin.settings.otherNoteHoverDelay)).onChange(async (value) => { this.plugin.settings.otherNoteHoverDelay = Number(value) || 100; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Popup hide delay").setDesc("How long to wait before hiding the popup after the mouse leaves. Default is 100.").addText(text => text.setValue(String(this.plugin.settings.popupHideDelay)).onChange(async (value) => { this.plugin.settings.popupHideDelay = Number(value) || 100; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Popup gap").setDesc("The gap (in pixels) between a calendar day and its popup list. Can be negative. Default is -2.").addText(text => text.setValue(String(this.plugin.settings.popupGap)).onChange(async (value) => { this.plugin.settings.popupGap = Number(value) || -2; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Popup font size").setDesc("The font size for the note names inside the calendar popup. Default is 14px.").addText(text => text.setValue(this.plugin.settings.otherNotePopupFontSize).onChange(async value => { this.plugin.settings.otherNotePopupFontSize = value; await this.saveAndUpdate(); }));
        this.createIgnoredFolderList(containerEl, "Ignore folders for calendar grid dots", "Files in these folders will not create 'created' or 'modified' dots on the calendar.", 'otherNoteIgnoreFolders');
        this.createIgnoredFolderList(containerEl, "Ignore folders for asset dots", "Assets in these folders will not create dots on the calendar.", 'assetIgnoreFolders');

    }

    renderWeeklyNotesSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Weekly Notes Settings" });

        new Setting(containerEl)
            .setName("Enable Weekly Notes")
            .setDesc("Enable clicking on week numbers to open/create weekly notes and show the dot indicator.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.enableWeeklyNotes)
                .onChange(async (value) => {
                    this.plugin.settings.enableWeeklyNotes = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Weekly Note Folder")
            .setDesc("The folder where your weekly notes are stored. It will be created if it doesn't exist.")
            .addText(text => {
                this.createPathSuggester(text.inputEl, (q) => this.app.vault.getAllLoadedFiles().filter(f => f instanceof TFolder && (!q || f.path.toLowerCase().includes(q))).map(f => f.path));
                text.setValue(this.plugin.settings.weeklyNoteFolder)
                    .onChange(async value => {
                        this.plugin.settings.weeklyNoteFolder = value;
                        await this.saveAndUpdate();
                    });
            });

        // In the PeriodSettingsTab class, inside renderWeeklyNotesSettings()
        const weeklyFormatSetting = new Setting(containerEl).setName("Weekly Note Format");
        weeklyFormatSetting.descEl.innerHTML = `
            Set the filename format for weekly notes using dots, hyphens, or other separators.
            <br>The following placeholders will be replaced automatically:
            <br><code>YYYY</code> - The 4-digit year (e.g., 2025)
            <br><code>MM</code> - The 2-digit month (e.g., 08)
            <br><code>PN</code> - The Period Number with a 'P' prefix (e.g., P8)
            <br><code>PW</code> - The week number within the period with a 'W' prefix (e.g., W2)
            <br><code>WKP</code> - The week number (1-52) within your custom period year
            <br><code>WKC</code> - The standard ISO calendar week number (1-53)
            <br><br><b>Examples:</b>
            <br>Format: <code>YYYY-MM-PNPW</code> ‚Üí Filename: <code>2025-08-P8W2.md</code>
            <br>Format: <code>YYYY-MM-WKP</code> ‚Üí Filename: <code>2025-08-30.md</code>
            <br>Format: <code>YYYY-MM-WWKC</code> ‚Üí Filename: <code>2025-08-W38.md</code>
        `;
        weeklyFormatSetting.addText(text => text
            .setValue(this.plugin.settings.weeklyNoteFormat)
            .onChange(async (value) => {
                this.plugin.settings.weeklyNoteFormat = value;
                await this.saveAndUpdate();
            }));

        new Setting(containerEl)
            .setName("Weekly note template")
            .setDesc("Path to a template file to use when creating a new weekly note.")
            .addText(text => {
                this.createPathSuggester(text.inputEl, (q) => this.app.vault.getMarkdownFiles().filter(f => !q || f.path.toLowerCase().includes(q)).map(f => f.path));
                text.setPlaceholder("Example: Templates/Weekly.md")
                    .setValue(this.plugin.settings.weeklyNoteTemplate)
                    .onChange(async (value) => {
                        this.plugin.settings.weeklyNoteTemplate = value;
                        await this.saveAndUpdate();
                    });
            });

        new Setting(containerEl).setName("Dot Indicator").setHeading();

        new Setting(containerEl)
            .setName("Show dot for weekly notes")
            .setDesc("Show a dot in the week number column if a note for that week exists.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showWeeklyNoteDot)
                .onChange(async (value) => {
                    this.plugin.settings.showWeeklyNoteDot = value;
                    await this.saveAndUpdate();
                }));

        this.createRgbaColorSetting(containerEl, "Weekly Note Dot Color", "The color of the dot for existing weekly notes.", "weeklyNoteDotColor");
    }

    renderTaskIndicatorSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Calendar Task Indicators" });
        new Setting(containerEl)
            .setName("Task indicator style")
            .setDesc("Choose how to indicate days with tasks on the calendar grid.")
            .addDropdown(dropdown => dropdown
                .addOption('none', 'None')
                .addOption('badge', 'Number Badge')
                .addOption('heatmap', 'Cell Color Heatmap')
                .setValue(this.plugin.settings.taskIndicatorStyle)
                .onChange(async (value) => {
                    this.plugin.settings.taskIndicatorStyle = value;
                    await this.saveAndUpdate();
                    // We re-render the settings display to show/hide relevant options
                    this.refreshDisplay();
                }));

        new Setting(containerEl)
            .setName("Show dot for tasks")
            .setDesc("Show a single dot on days with tasks. This can be used with or instead of the heatmap/badge.")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.showTaskDot)
                .onChange(async (value) => {
                    this.plugin.settings.showTaskDot = value;
                    await this.saveAndUpdate();
                }));

        this.createRgbaColorSetting(containerEl, "Task Dot Color", "The color of the dot indicating a day has tasks.", "taskDotColor");

        // Only show the badge/heatmap settings if they are relevant
        if (this.plugin.settings.taskIndicatorStyle === 'badge') {
            new Setting(containerEl)
                .setName("Task badge font size")
                .setDesc("The font size for the number inside the task badge. Default is 9px.")
                .addText(text => text
                    .setValue(this.plugin.settings.taskBadgeFontSize)
                    .onChange(async (value) => {
                        this.plugin.settings.taskBadgeFontSize = value;
                        await this.saveAndUpdate();
                    }));

            this.createRgbaColorSetting(containerEl, "Task badge color", "The background color of the task count badge.", "taskBadgeColor");
            this.createRgbaColorSetting(containerEl, "Task badge font color", "The color of the number inside the task count badge.", "taskBadgeFontColor");
        }

        if (this.plugin.settings.taskIndicatorStyle === 'heatmap') {

            new Setting(containerEl)
                .setName("Heatmap content border width")
                .setDesc("Width of the border around the day heatmap content area (e.g., 1px, 2px, 3px). Creates visual separation inside cells. Default is 1px.")
                .addText(text => text
                    .setPlaceholder("1px")
                    .setValue(this.plugin.settings.contentBorderWidth)
                    .onChange(async (value) => {
                        this.plugin.settings.contentBorderWidth = value || "1px";
                        await this.saveAndUpdate();
                    }));

            containerEl.createEl('p', { text: 'Configure the start, middle, and end points of the dynamic color gradient. Colors will be blended smoothly between these points.', cls: 'setting-item-description' });

            new Setting(containerEl).setName("Gradient Midpoint").setDesc("The number of tasks that should have the exact 'Mid' color. Default is 5.").addText(text => text.setValue(String(this.plugin.settings.taskHeatmapMidpoint)).onChange(async (value) => { this.plugin.settings.taskHeatmapMidpoint = Number(value) || 5; await this.saveAndUpdate(); }));
            new Setting(containerEl).setName("Gradient Maxpoint").setDesc("The number of tasks that should have the exact 'End' color. Any day with more tasks will also use the end color. Default is 10.").addText(text => text.setValue(String(this.plugin.settings.taskHeatmapMaxpoint)).onChange(async (value) => { this.plugin.settings.taskHeatmapMaxpoint = Number(value) || 10; await this.saveAndUpdate(); }));

            this.createRgbaColorSetting(containerEl, "Heatmap: Start Color (1 Task)", "The color for days with 1 task.", "taskHeatmapStartColor");
            this.createRgbaColorSetting(containerEl, "Heatmap: Mid Color", "The color for days meeting the 'Midpoint' task count.", "taskHeatmapMidColor");
            this.createRgbaColorSetting(containerEl, "Heatmap: End Color", "The color for days meeting the 'Maxpoint' task count.", "taskHeatmapEndColor");
        }

        /*
        new Setting(containerEl)
            .setName("Task badge font size")
            .setDesc("The font size for the number inside the task badge. Default is 10px.")
            .addText(text => text
                .setValue(this.plugin.settings.taskBadgeFontSize)
                .onChange(async (value) => {
                    this.plugin.settings.taskBadgeFontSize = value;
                    await this.saveAndUpdate();
                }));

        this.createRgbaColorSetting(containerEl, "Task badge color", "The background color of the task count badge.", "taskBadgeColor");
        this.createRgbaColorSetting(containerEl, "Task badge font color", "The color of the number inside the task count badge.", "taskBadgeFontColor");
        */
    }

    // This function can be a method within your SettingTab class
    renderDraggableTabs(container) {
        container.empty(); // Clear the container first

        // Define labels for your tabs
        const tabLabels = {
            scratch: 'ScratchPad',
            notes: 'Notes',
            tasks: 'Tasks',
            assets: 'Assets'
            // Add other tabs if you have them
        };

        let draggedItem = null; // To keep track of the item being dragged

        this.plugin.settings.tabOrder.forEach((key, index) => {
            const settingItem = container.createDiv('draggable-item');
            settingItem.draggable = true;
            settingItem.dataset.tabKey = key;

            // Add a drag handle icon
            const handle = settingItem.createDiv('drag-handle');
            setIcon(handle, 'grip-vertical');

            // Add the tab's name
            settingItem.createSpan({ text: tabLabels[key] || key });

            // --- Drag and Drop Event Listeners ---

            settingItem.addEventListener('dragstart', (e) => {
                draggedItem = settingItem;
                setTimeout(() => settingItem.addClass('dragging'), 0);
            });

            settingItem.addEventListener('dragend', (e) => {
                draggedItem?.removeClass('dragging');
                draggedItem = null;
            });

            settingItem.addEventListener('dragover', (e) => {
                e.preventDefault();
                const draggingItem = document.querySelector('.dragging');
                if (draggingItem && draggingItem !== settingItem) {
                    // Get the bounding box of the item we're dragging over
                    const rect = settingItem.getBoundingClientRect();
                    // Check if we are in the top or bottom half of the item
                    const isAfter = e.clientY > rect.top + rect.height / 2;

                    if (isAfter) {
                        // Insert the dragged item after the current one
                        settingItem.parentNode.insertBefore(draggingItem, settingItem.nextSibling);
                    } else {
                        // Insert the dragged item before the current one
                        settingItem.parentNode.insertBefore(draggingItem, settingItem);
                    }
                }
            });

            settingItem.addEventListener('drop', async (e) => {
                e.preventDefault();
                const newOrder = Array.from(container.children).map(child => child.dataset.tabKey);
                this.plugin.settings.tabOrder = newOrder;
                await this.saveAndUpdate();
                new Notice('Tab order saved!');
            });
        });
    }

    renderTabsSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "General Tab Settings" });

        new Setting(containerEl)
            .setName("Desktop tab display style")
            .setDesc("Choose how tab names are displayed in the desktop client.")
            .addDropdown(dropdown => dropdown
                .addOption('text', 'Text Only')
                .addOption('iconAndText', 'Icon and Text')
                .addOption('iconOnly', 'Icon Only')
                .setValue(this.plugin.settings.tabDisplayMode)
                .onChange(async (value) => {
                    this.plugin.settings.tabDisplayMode = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Mobile tab display style")
            .setDesc("Choose a different, often more compact, display style for smaller mobile / tablet screens.")
            .addDropdown(dropdown => dropdown
                .addOption('text', 'Text Only')
                .addOption('iconAndText', 'Icon and Text')
                .addOption('iconOnly', 'Icon Only')
                .setValue(this.plugin.settings.mobileTabDisplayMode)
                .onChange(async (value) => {
                    this.plugin.settings.mobileTabDisplayMode = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl).setName("Tab title font size").setDesc("Font size for the tab titles (ScratchPad, Notes, Tasks). Default is 15px.").addText(text => text.setValue(this.plugin.settings.tabTitleFontSize).onChange(async value => { this.plugin.settings.tabTitleFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Bold tab titles").setDesc("Toggles bold font weight for the tab titles.").addToggle(toggle => toggle.setValue(this.plugin.settings.tabTitleBold).onChange(async value => { this.plugin.settings.tabTitleBold = value; await this.saveAndUpdate(); }));

        this.createRgbaColorSetting(containerEl, "Active Tab Indicator", "Underline color for the active tab.", "selectedTabColor");

        containerEl.createDiv('setting-spacer');

        new Setting(containerEl)
            .setName('Tab Order')
            .setDesc('Drag and drop the tabs to set their display order.');

        // Create a container for our draggable list
        const tabOrderContainer = containerEl.createDiv('tab-order-container');
        this.renderDraggableTabs(tabOrderContainer);

        containerEl.createDiv('setting-spacer');

        new Setting(containerEl).setName("Tab Visibility").setHeading();

        new Setting(containerEl)
            .setName("Show Tasks tab")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.tabVisibility.tasks)
                .onChange(async (value) => {
                    this.plugin.settings.tabVisibility.tasks = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Show ScratchPad tab")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.tabVisibility.scratch)
                .onChange(async (value) => {
                    this.plugin.settings.tabVisibility.scratch = value;
                    await this.saveAndUpdate();
                }));
        new Setting(containerEl)
            .setName("Show Notes tab")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.tabVisibility.notes)
                .onChange(async (value) => {
                    this.plugin.settings.tabVisibility.notes = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Show Assets tab")
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.tabVisibility.assets)
                .onChange(async (value) => {
                    this.plugin.settings.tabVisibility.assets = value;
                    await this.saveAndUpdate();
                }));



        containerEl.createEl('h2', { text: 'Tab Icons' });

        const tabIconSettings = [
            { key: 'scratch', name: 'ScratchPad tab icon' },
            { key: 'notes', name: 'Notes tab icon' },
            { key: 'tasks', name: 'Tasks tab icon' },
            { key: 'pinned', name: 'Pinned View tab icon' },
            { key: 'assets', name: 'Assets View tab icon' }
        ];

        // Loop through each tab icon setting to create its input field and reset button
        tabIconSettings.forEach(s => {
            let textComponent; // Variable to hold the text component reference

            new Setting(containerEl)
                .setName(s.name)
                .setDesc('Enter any Lucide icon name.')
                .addText(text => {
                    textComponent = text; // Store the text component so the button can access it
                    text
                        .setValue(this.plugin.settings.tabIcons[s.key] || DEFAULT_SETTINGS.tabIcons[s.key])
                        .onChange(async (value) => {
                            this.plugin.settings.tabIcons[s.key] = value.trim();
                            await this.saveAndUpdate();
                        });
                })
                .addExtraButton(button => {
                    button
                        .setIcon('rotate-ccw') // A fitting icon for "reset"
                        .setTooltip('Reset to default')
                        .onClick(async () => {
                            // 1. Get the default value for this specific key
                            const defaultValue = DEFAULT_SETTINGS.tabIcons[s.key];

                            // 2. Update the setting in the plugin's data
                            this.plugin.settings.tabIcons[s.key] = defaultValue;

                            // 3. Visually update the text box to show the default value
                            if (textComponent) {
                                textComponent.setValue(defaultValue);
                            }

                            // 4. Save the setting and update the plugin view
                            await this.saveAndUpdate();
                            new Notice(`'${s.name}' reset to default.`);
                        });
                });
        });

        // --- Keep your existing "Reset All" button ---
        // This button's logic does not need to change.
        new Setting(containerEl)
            .addButton(button => button
                .setButtonText('Reset All Tab Icons')
                .setTooltip('Resets all tab icons to their original values')
                .onClick(async () => {
                    // Confirm with the user before resetting all
                    if (confirm('Are you sure you want to reset all tab icons?')) {
                        this.plugin.settings.tabIcons = { ...DEFAULT_SETTINGS.tabIcons };
                        await this.saveAndUpdate();
                        new Notice('All tab icons have been reset.');

                        // Refresh the settings display to show the changes
                        //this.display(); 
                        this.refreshDisplay();
                    }
                }));

    }

    renderScratchpadSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "ScratchPad Tab Settings" });
        new Setting(containerEl).setName("Functionality").setHeading();
        new Setting(containerEl).setName("ScratchPad tab click action").setDesc("What to do when the ScratchPad tab is clicked while it's already active.").addDropdown(dropdown => dropdown.addOption('new-tab', 'Open in a new tab').addOption('current-tab', 'Open in the current tab').setValue(this.plugin.settings.scratchpadOpenAction).onChange(async (value) => { this.plugin.settings.scratchpadOpenAction = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("ScratchPad note path").setDesc("The full path to the note that the ScratchPad tab will read from and write to.").addText(text => { this.createPathSuggester(text.inputEl, (q) => this.app.vault.getMarkdownFiles().filter(f => !q || f.path.toLowerCase().includes(q)).map(f => f.path)); text.setValue(this.plugin.settings.fixedNoteFile).onChange(async value => { this.plugin.settings.fixedNoteFile = value; await this.saveAndUpdate(); }); });
        new Setting(containerEl).setName("Show preview/edit button").setDesc("Show the button to toggle between plain text editing and a rendered Markdown preview.").addToggle(toggle => toggle.setValue(this.plugin.settings.scratchpad?.showPreviewToggle ?? false).onChange(async (value) => { if (!this.plugin.settings.scratchpad) this.plugin.settings.scratchpad = {}; this.plugin.settings.scratchpad.showPreviewToggle = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Show '+ Task' button").setDesc("Show the button in the scratchpad area to quickly add a new task.").addToggle(toggle => toggle.setValue(this.plugin.settings.scratchpad?.showAddTaskButton ?? true).onChange(async (value) => { if (!this.plugin.settings.scratchpad) this.plugin.settings.scratchpad = {}; this.plugin.settings.scratchpad.showAddTaskButton = value; await this.saveAndUpdate(); }));

        const taskTitleSetting = new Setting(containerEl).setName("Task Creation Format");
        taskTitleSetting.descEl.innerHTML = `
                Use the following to insert as placeholders for the task creation date:
                <br><code>{today}</code>, <code>{tomorrow}</code>
                <br><code>{monday}</code>, <code>{tuesday}</code>, etc. for the next upcoming day.
                <br><code>{date}+7</code> or <code>{date}-3</code> for dates in the future or past.
                <br>
                <br>Use <code>|</code> to set the final cursor position.
            `;

        taskTitleSetting.addText(text => text
            .setPlaceholder("- [ ] ")
            .setValue(this.plugin.settings.scratchpad?.taskFormat || "- [ ] ")
            .onChange(async (value) => {
                if (!this.plugin.settings.scratchpad) {
                    this.plugin.settings.scratchpad = {};
                }
                this.plugin.settings.scratchpad.taskFormat = value;
                await this.saveAndUpdate();
            }));

        new Setting(containerEl).setName("Appearance").setHeading();
        new Setting(containerEl).setName("ScratchPad font size").setDesc("Font size for the text inside the ScratchPad editor. Default is 14px.").addText(text => text.setValue(this.plugin.settings.scratchFontSize).onChange(async value => { this.plugin.settings.scratchFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Bold ScratchPad text").setDesc("Toggles bold font weight for the text in the ScratchPad.").addToggle(toggle => toggle.setValue(this.plugin.settings.scratchBold).onChange(async value => { this.plugin.settings.scratchBold = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("ScratchPad font family").setDesc("Examples: monospace, Arial, 'Courier New'. Leave blank to use the editor default.").addText(text => text.setValue(this.plugin.settings.scratchFontFamily).onChange(async (value) => { this.plugin.settings.scratchFontFamily = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Search highlight color", "The background color for the selected search result in the ScratchPad.", "scratchpadHighlightColor");

    }

    renderNotesSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Notes Tab Settings" });
        new Setting(containerEl).setName("Functionality").setHeading();
        new Setting(containerEl).setName("Notes tab open behavior").setDesc("Choose how to open notes when clicked from the notes list.").addDropdown(dropdown => dropdown.addOption('new-tab', 'Open in a new tab').addOption('current-tab', 'Open in the current tab').setValue(this.plugin.settings.notesOpenAction).onChange(async (value) => { this.plugin.settings.notesOpenAction = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Notes lookback days").setDesc("How many days back the Notes tab should look for created or modified notes. Default is 7.").addText(text => text.setValue(String(this.plugin.settings.notesLookbackDays)).onChange(async value => { this.plugin.settings.notesLookbackDays = Number(value) || 7; await this.saveAndUpdate(); }));

        new Setting(containerEl).setName("Appearance").setHeading();
        new Setting(containerEl).setName("Show note status dots").setDesc("Show a colored dot next to each note, indicating if it was recently created or modified.").addToggle(toggle => toggle.setValue(this.plugin.settings.showNoteStatusDots).onChange(async value => { this.plugin.settings.showNoteStatusDots = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Created Note Dot", "Color for the dot on recently created notes in the list.", "noteCreatedColor");
        this.createRgbaColorSetting(containerEl, "Modified Note Dot", "Color for the dot on recently modified notes in the list.", "noteModifiedColor");
        new Setting(containerEl).setName("Show note tooltips").setDesc("Show a detailed tooltip on hover, containing note path, dates, size, and tags.").addToggle(toggle => toggle.setValue(this.plugin.settings.showNoteTooltips).onChange(async value => { this.plugin.settings.showNoteTooltips = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Notes list font size").setDesc("Font size for note titles in the list. Default is 14px.").addText(text => text.setValue(this.plugin.settings.notesFontSize).onChange(async value => { this.plugin.settings.notesFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Bold note titles").setDesc("Toggles bold font weight for note titles in the list.").addToggle(toggle => toggle.setValue(this.plugin.settings.notesBold).onChange(async value => { this.plugin.settings.notesBold = value; await this.saveAndUpdate(); }));
        this.createRgbaColorSetting(containerEl, "Note/Task Hover Color", "Background color when hovering a note or task in a list.", "notesHoverColor");
        this.createIgnoredFolderList(containerEl, "Ignore folders in Notes tab", "Files in these folders will not appear in the 'Notes' list.", 'ignoreFolders');

    }

    renderPinnedNotesSettings() {
        const containerEl = this.contentEl; // All settings will be rendered into this element
        containerEl.createEl('h1', { text: 'Pinned Notes Settings' });
        new Setting(containerEl).setName('Functionality').setHeading();
        new Setting(containerEl)
            .setName("Pinned notes tag")
            .setDesc("The tag to use for pinned notes, enter in the text box without the '#'. For notes to appear in the pinned tab, (accessed with another click on the notes tab icon once it has focus), and if you set 'pin' as the tag name, then in your notes add #pin in the body or properties tag section. Default is 'pin'.")
            .addText(text => text
                .setValue(this.plugin.settings.pinTag)
                .onChange(async (value) => {
                    this.plugin.settings.pinTag = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl).setName('Sort Order').setHeading();
        new Setting(containerEl)
            .setName('Default sort order')
            .setDesc("Choose the default sort order for pinned notes when the plugin is loaded. To change the order click on the PINNED NOTES title in the main view.")
            .addDropdown(dropdown => dropdown
                .addOption('a-z', 'A-Z (Default)')
                .addOption('z-a', 'Z-A')
                .addOption('custom', 'Custom Order')
                .setValue(this.plugin.settings.pinnedNotesSortOrder)
                .onChange(async (value) => {
                    this.plugin.settings.pinnedNotesSortOrder = value;
                    await this.plugin.saveSettings();
                }));

        // ADD THIS NEW SETTING HERE:
        const isMac = Platform.isMacOS;
        const modifierKey = isMac ? 'Option (‚å•)' : 'Ctrl';

        new Setting(containerEl)
            .setName('How to change the sort order in the main view')
            .setDesc(`Click the "PINNED NOTES" header in the main view to cycle between A-Z, Z-A, and Custom sort orders.\n\nWhen in Custom order, hold ${modifierKey} and drag notes to reorder them.`);


        new Setting(containerEl)
            .setName('Set Custom Order')
            .setDesc('Drag and drop the notes below to set your preferred manual order.');

        // This container will hold the draggable list
        const draggableContainer = containerEl.createDiv('pinned-notes-order-container');
        this.renderDraggablePinnedNotes(draggableContainer);
    }

    renderAssetsSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Assets Tab Settings" });
        new Setting(containerEl)
            .setName("Asset open behavior")
            .setDesc("Choose how to open assets when clicked from the Assets list.")
            .addDropdown(dropdown => dropdown
                .addOption('new-tab', 'Open in a new tab')
                .addOption('current-tab', 'Open in the current tab')
                .setValue(this.plugin.settings.assetsOpenAction)
                .onChange(async (value) => {
                    this.plugin.settings.assetsOpenAction = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName('Default assets view')
            .setDesc('Choose the default layout for the assets tab.')
            .addDropdown(dropdown => dropdown
                .addOption('list', 'List')
                .addOption('grid', 'Grid')
                .setValue(this.plugin.settings.assetsDefaultView)
                .onChange(async (value) => {
                    this.plugin.settings.assetsDefaultView = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName("Assets lookback days")
            .setDesc("How many days back the Assets tab should look for created or modified notes. Default is 7.")
            .addText(text => text
                .setValue(String(this.plugin.settings.assetsLookbackDays))
                .onChange(async value => {
                    this.plugin.settings.assetsLookbackDays = Number(value) || 7;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl)
            .setName("Hidden asset file types")
            .setDesc("A comma-separated list of file extensions to hide from the Assets tab and calendar dots (e.g., jpg,pdf,zip). Default is base,canvas.")
            .addText(text => text
                .setPlaceholder("e.g., jpg,pdf,zip")
                .setValue(this.plugin.settings.hiddenAssetTypes)
                .onChange(async (value) => {
                    this.plugin.settings.hiddenAssetTypes = value;
                    await this.saveAndUpdate();
                }));

        new Setting(containerEl).setName("Show indicator for unused assets").setDesc("An icon will appear next to assets that are not linked or embedded in any note, allowing for easier detection to delete.").addToggle(toggle => toggle.setValue(this.plugin.settings.showUnusedAssetsIndicator).onChange(async (value) => { this.plugin.settings.showUnusedAssetsIndicator = value; await this.saveAndUpdate(); }));

    }

    renderTasksSettings() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Tasks Tab Settings" });
        new Setting(containerEl).setName("Display & Sorting").setHeading();
        new Setting(containerEl).setName("Task group heading font size").setDesc("The font size for the date/tag group headings (e.g., 'Overdue', 'Today'). Default is 13px.").addText(text => text.setValue(this.plugin.settings.taskHeadingFontSize).onChange(async value => { this.plugin.settings.taskHeadingFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Task text font size").setDesc("The font size for the individual task items in the list. Default is 14px.").addText(text => text.setValue(this.plugin.settings.taskTextFontSize).onChange(async value => { this.plugin.settings.taskTextFontSize = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Truncate long task text").setDesc("If enabled, long tasks will be shortened with '...'. If disabled, they will wrap to multiple lines.").addToggle(toggle => toggle.setValue(this.plugin.settings.taskTextTruncate).onChange(async (value) => { this.plugin.settings.taskTextTruncate = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Show completed tasks for Today").setDesc("If enabled, tasks that you marked as complete today will appear in the lists (regardless of their due date).").addToggle(toggle => toggle.setValue(this.plugin.settings.showCompletedTasksToday).onChange(async (value) => { this.plugin.settings.showCompletedTasksToday = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Task sort order").setDesc("The default order for tasks within each group.").addDropdown(dropdown => dropdown.addOption('dueDate', 'By Due Date (earliest first)').addOption('a-z', 'A-Z').addOption('z-a', 'Z-A').setValue(this.plugin.settings.taskSortOrder).onChange(async (value) => { this.plugin.settings.taskSortOrder = value; await this.saveAndUpdate(); }));
        new Setting(containerEl).setName("Group tasks by").setDesc("Choose how to group tasks in the view. Second-clicking the Tasks tab will also toggle this.").addDropdown(dropdown => dropdown.addOption('date', 'Date (Overdue, Today, etc.)').addOption('tag', 'Tag').setValue(this.plugin.settings.taskGroupBy).onChange(async (value) => { this.plugin.settings.taskGroupBy = value; await this.saveAndUpdate(); this.refreshDisplay(); }));

        if (this.plugin.settings.taskGroupBy === 'date') {
            new Setting(containerEl).setName("Date Groups to Show").setHeading();
            const dateGroups = [{ key: 'overdue', name: 'Overdue' }, { key: 'today', name: 'Today' }, { key: 'tomorrow', name: 'Tomorrow' }, { key: 'next7days', name: 'Next 7 Days' }, { key: 'future', name: 'Future' },];
            dateGroups.forEach(g => { new Setting(containerEl).setName(g.name).addToggle(t => t.setValue(this.plugin.settings.taskDateGroupsToShow.includes(g.key)).onChange(async v => { const groups = this.plugin.settings.taskDateGroupsToShow; if (v && !groups.includes(g.key)) groups.push(g.key); else if (!v) this.plugin.settings.taskDateGroupsToShow = groups.filter(i => i !== g.key); await this.saveAndUpdate(); })); });
        }

        new Setting(containerEl).setName("Content & Appearance").setHeading();
        this.createIgnoredFolderList(containerEl, "Exclude folders from Task search", "Tasks in these folders will not appear in the 'Tasks' list.", 'taskIgnoreFolders');

        // Create the main heading for this section
        containerEl.createEl('h2', { text: 'Task Group Icons' });
        containerEl.createEl('p', { text: 'Customize the icon displayed next to each task group header.', cls: 'setting-item-description' });

        // Define the settings for each task group icon for easy iteration
        const taskGroupIconSettings = [
            { key: 'overdue', name: 'Overdue icon' },
            { key: 'today', name: 'Today icon' },
            { key: 'tomorrow', name: 'Tomorrow icon' },
            { key: 'next7days', name: 'Next 7 Days icon' },
            { key: 'future', name: 'Future icon' },
            { key: 'noDate', name: 'No Due Date icon' },
            { key: 'tag', name: 'Tag Group icon' }
        ];

        // Loop through the settings to create each input field and its reset button
        taskGroupIconSettings.forEach(s => {
            let textComponent; // This will hold a reference to the text input

            new Setting(containerEl)
                .setName(s.name)
                .setDesc('Enter any Lucide icon name.')
                .addText(text => {
                    textComponent = text; // Store the reference
                    text
                        .setValue(this.plugin.settings.taskGroupIcons[s.key] || DEFAULT_SETTINGS.taskGroupIcons[s.key])
                        .onChange(async (value) => {
                            this.plugin.settings.taskGroupIcons[s.key] = value.trim();
                            await this.saveAndUpdate();
                        });
                })
                .addExtraButton(button => {
                    button
                        .setIcon('rotate-ccw')
                        .setTooltip('Reset to default')
                        .onClick(async () => {
                            // 1. Get the default value for this specific icon
                            const defaultValue = DEFAULT_SETTINGS.taskGroupIcons[s.key];

                            // 2. Update the setting object
                            this.plugin.settings.taskGroupIcons[s.key] = defaultValue;

                            // 3. Update the text box on screen for instant feedback
                            if (textComponent) {
                                textComponent.setValue(defaultValue);
                            }

                            // 4. Save and trigger a UI refresh
                            await this.saveAndUpdate();
                            new Notice(`'${s.name}' reset to default.`);
                        });
                });
        });

        // Add the "Reset All" button at the end of the section
        new Setting(containerEl)
            .addButton(button => button
                .setButtonText('Reset All Task Group Icons')
                .setTooltip('Resets all task group icons to their original values')
                .onClick(async () => {
                    // Confirm with the user to prevent accidental resets
                    if (confirm('Are you sure you want to reset all task group icons?')) {
                        // Restore the entire object from default settings
                        this.plugin.settings.taskGroupIcons = { ...DEFAULT_SETTINGS.taskGroupIcons };
                        await this.saveAndUpdate();
                        new Notice('All task group icons have been reset.');

                        // Force a redraw of the settings page to show the reset values everywhere
                        this.refreshDisplay();
                    }
                }));

        new Setting(containerEl).setName("Task Group Backgrounds").setHeading();
        this.createRgbaColorSetting(containerEl, "Overdue", "Background color for the 'Overdue' task group.", "taskGroupColorOverdue");
        this.createRgbaColorSetting(containerEl, "Today", "Background color for the 'Today' task group.", "taskGroupColorToday");
        this.createRgbaColorSetting(containerEl, "Tomorrow", "Background color for the 'Tomorrow' task group.", "taskGroupColorTomorrow");
        this.createRgbaColorSetting(containerEl, "Next 7 Days", "Background color for the 'Next 7 Days' task group.", "taskGroupColorNext7Days");
        this.createRgbaColorSetting(containerEl, "Future", "Background color for 'Future' task group.", "taskGroupColorFuture");
        this.createRgbaColorSetting(containerEl, "No Due Date", "Background color for the 'No Due Date' task group.", "taskGroupColorNoDate");
        this.createRgbaColorSetting(containerEl, "Tag", "Background color for task groups when grouped by tag.", "taskGroupColorTag");
    }







    renderImportExportTab() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "Import & Export Settings" });

        // --- EXPORT ---
        new Setting(containerEl)
            .setName("Export Settings")
            .setDesc("Save your plugin settings to a JSON file. Two options: all plugin settings or theme settins only. This is useful for backing up all your settings or sharing your theme configuration with others.")
            .addButton(button => {
                button
                    .setButtonText("Export All Settings")
                    .setIcon("save")
                    .setTooltip("Save all plugin settings to a file")
                    .onClick(() => this.handleExport('all'));

                button.buttonEl.style.cursor = 'pointer';
            })
            .addButton(button => {
                button
                    .setButtonText("Export Theme Only")
                    .setIcon("palette")
                    .setTooltip("Save only colors, fonts, and sizes to a theme file")
                    .onClick(() => this.handleExport('theme'));

                button.buttonEl.style.cursor = 'pointer';
            });

        // --- IMPORT ---
        new Setting(containerEl)
            .setName("Import Settings")
            .setDesc("Load settings from a JSON file. This will overwrite your current settings after confirmation.")
            .addButton(button => {
                button
                    .setButtonText("Import from File")
                    .setIcon("upload")
                    .setTooltip("Load settings from a .json file")
                    .onClick(() => {
                        const fileInput = containerEl.createEl('input', {
                            type: 'file',
                            attr: {
                                accept: '.json',
                                style: 'display: none;'
                            }
                        });

                        fileInput.addEventListener('change', (event) => {
                            const file = event.target.files[0];
                            if (file) {
                                this.handleImport(file);
                            }
                        });

                        fileInput.click();
                    });

                button.buttonEl.style.cursor = 'pointer';
            });
    }

    /**
     * Handles the export functionality.
     * @param {'all' | 'theme'} type The type of export to perform.
     */
    handleExport(type) {
        let settingsToExport;
        let fileName = `calendar-period-week-notes-settings.json`;

        if (type === 'theme') {
            const themeKeys = [
                // General appearance settings
                "fontSize",
                "dayNumberFontSize",
                "navButtonHeight",
                "headerRowBold",
                "pwColumnBold",
                "showCalendarGridLines",
                "showPWColumnSeparator",
                "pwColumnSeparatorColor",

                // Add all the font color settings
                "pwColumnFontColorLight",
                "pwColumnFontColorDark",
                "weekNumberFontColorLight",
                "weekNumberFontColorDark",
                "dayHeaderFontColorLight",
                "dayHeaderFontColorDark",
                "dayCellFontColorLight",
                "dayCellFontColorDark",
                "otherMonthFontColorLight",
                "otherMonthFontColorDark",

                // Add the highlight toggles
                "highlightTodayDayHeader",
                "highlightTodayPWLabel",

                // Add all the highlight color settings
                "monthColorLight",
                "monthColorDark",
                "mainMonthYearTitleFontSize",
                "mainMonthYearTitleBold",

                // Other settings
                "tabTitleFontSize",
                "tabTitleBold",
                "selectedTabColor",
                "todayHighlightColorLight",
                "todayHighlightColorDark",
                "notesHoverColor",
                "dailyNoteDotColor",
                "noteCreatedColor",
                "noteModifiedColor",
                "otherNoteDotColor",
                "calendarModifiedDotColor",
                "rowHighlightColorLight",
                "rowHighlightColorDark",
                'weekendShadeColorLight',
                'weekendShadeColorDark',
                "dateCellHoverColorLight",
                "dateCellHoverColorDark",
                "assetDotColor",
                "calendarEventDotColor",
                "todayHighlightStyle",
                "todayCircleColor",
                "weeklyNoteDotColor",
                "scratchFontSize",
                "scratchBold",
                "scratchFontFamily",
                "scratchpadHighlightColor",
                "notesFontSize",
                "notesBold",
                "notesLineHeight",
                "showNoteStatusDots",
                "otherNotePopupFontSize",
                "calendarDotSize",
                // Task settings
                "taskIndicatorStyle",
                "taskBadgeFontSize",
                "taskBadgeColor",
                "taskBadgeFontColor",
                "taskHeatmapStartColor",
                "taskHeatmapMidColor",
                "taskHeatmapEndColor",
                "taskHeadingFontSize",
                "taskTextFontSize",
                "taskGroupColorOverdue",
                "taskGroupColorToday",
                "taskGroupColorTomorrow",
                "taskGroupColorNext7Days",
                "taskGroupColorFuture",
                "taskGroupColorNoDate",
                "taskGroupColorTag"
            ];
            settingsToExport = {};
            for (const key of themeKeys) {
                settingsToExport[key] = this.plugin.settings[key];
            }
            fileName = `calendar-period-week-notes-theme.json`;
        } else {
            settingsToExport = this.plugin.settings;
        }

        const data = JSON.stringify(settingsToExport, null, 2);
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        new Notice(`${type === 'theme' ? 'Theme' : 'All'} settings exported.`);
    }

    /**
     * Handles the import functionality.
     * @param {File} file The JSON file selected by the user.
     */
    handleImport(file) {
        const reader = new FileReader();
        reader.onload = (event) => {
            try {
                const importedSettings = JSON.parse(event.target.result);

                // Basic validation to see if it's a valid settings file
                if (!importedSettings.hasOwnProperty('fontSize') && !importedSettings.hasOwnProperty('fixedNoteFile')) {
                    new Notice('Error: This does not appear to be a valid settings file.', 5000);
                    return;
                }

                new ConfirmationModal(this.app,
                    'Overwrite Settings?',
                    'Are you sure you want to import these settings? Your current configuration will be overwritten.',
                    async () => {
                        // Merge imported settings into the current settings
                        this.plugin.settings = Object.assign({}, this.plugin.settings, importedSettings);
                        await this.saveAndUpdate();
                        this.refreshDisplay(); // Re-render the settings tab
                        new Notice('Settings imported successfully!');
                    }
                ).open();

            } catch (e) {
                new Notice('Error: Could not parse the JSON file. Ensure it is not corrupted.', 5000);
                console.error("Failed to parse settings JSON:", e);
            }
        };
        reader.readAsText(file);
    }

    renderAboutTab() {
        const containerEl = this.contentEl;
        containerEl.createEl("h1", { text: "About Calendar Period Week Notes" });

        containerEl.createEl("p", {
            text: "This plugin provides two comprehensive calendar views together with an integrated panel containing a scratchpad area, notes, tasks, and assets."
        });

        new Setting(containerEl)
            .setName("Support the Developer")
            .setDesc("If you find this plugin useful, please consider supporting its development. It's greatly appreciated!")
            .addButton(button => {
                button
                    .setButtonText("‚òï Buy Me a Coffee")
                    .setTooltip("https://buymeacoffee.com/fikte")
                    .onClick(() => {
                        // Make sure to replace "your-username" with your actual username!
                        window.open("https://buymeacoffee.com/fikte");
                    });
                // This makes the button more prominent
                button.buttonEl.addClass('mod-cta');
                button.buttonEl.style.backgroundColor = '#FFDD00';
                button.buttonEl.style.color = '#000000';
                button.buttonEl.style.cursor = 'pointer';
            });
    }


    async renderStartHereTab() {
        const containerEl = this.contentEl;
        containerEl.empty();

        // We are setting the HTML directly to bypass the MarkdownRenderer and avoid plugin conflicts.
        containerEl.innerHTML = `
        <h2>üöÄ Quick Start: Initial Setup</h2>
        <hr>
        <p>Welcome, to get the most out of this plugin, it's recommended to configure a few key settings to match your workflow.</p>
        <hr>
        <h3>1. Set Up Your Scratchpad Note</h3>
        <p>The <strong>Scratchpad</strong> tab needs to point to a note file in your vault. By default, it looks for <code>ScratchPad.md</code> in your vault's root.</p>
        <ul>
            <li><strong>Go to:</strong> "ScratchPad Tab" ‚Üí "ScratchPage note path"></li>
            <li><strong>Action:</strong> Set the <strong>ScratchPad note path</strong> to any note you prefer. If it doesn't exist, the plugin will create it for you.</li>
        </ul>
        <hr>
        <h3>2. Configure Your Daily Notes</h3>
        <p>For calendar dots and click-to-open features to work, the plugin needs to know where your daily notes are.</p>
        <ul>
            <li><strong>Go to:</strong> "Calendar Functional" ‚Üí "Daily Notes"</li>
            <li><strong>Action:</strong> Set your <strong>Daily Notes folder</strong> and <strong>Daily note format</strong> to match your existing setup (e.g., YYYY-MM-DD).</li>
        </ul>
        <hr>
        <h3>3. Define Your Task Format</h3>
        <p>For the plugin to recognize your tasks and due dates, they <strong>must</strong> use the <code>üìÖ</code> emoji for due dates. Download the Tasks plugin for improved compatibility. The following examples show the format of tasks to be used:</p>
        <p><strong>Due Dates:</strong></p>
        <pre>- [ ] My task with a due date üìÖ 2025-10-26</pre>
        <pre>- [ ] Review project notes #work üìÖ 2025-11-01</code></pre>
        <p><strong>Completion Dates:</strong></p>
        <pre>- [x] My completed task üìÖ 2025-10-26 ‚úÖ 2025-09-19</pre>
        <p>NOTE: If you do not use this Task format then you can toggle off the Tasks Tab in the "General Tab" ‚Üí "Tab Visibility" section.</p>
        <hr>
        <h3>4. (Optional) Set Your Period/Week Start Date</h3>
        <p>If you plan to use the custom Period/Week calendar system (e.g., "P7W4"), you should set its starting date. The period/week calendar system, used by some companies for financial year tracking, assumes 13 periods with 4 weeks in each period.</p>
        <ul>
            <li><strong>Go to:</strong> "Calendar Functional" ‚Üí "Period/Week System"</li>
            <li><strong>Action:</strong> Set the <strong>Start of Period 1 Week 1</strong> to the Sunday date of your choice.</li>
        </ul>
    `;
    }

}

module.exports = PeriodMonthPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
